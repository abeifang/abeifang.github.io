<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用户中心</title>
      <link href="/2024/05/09/%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%98%E6%A1%A3/"/>
      <url>/2024/05/09/%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%98%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>此文章用来存储一些工具的使用指令。人老了记不住。 </p></div><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul><li>工作区-&gt;暂存区 git add</li><li>暂存区-&gt;仓库 git commit -m ‘备注’</li><li>查看状态 git status</li><li>查看提交记录 git log 等等，自己简化的指令 git-log</li><li>版本回退  git reset –hard commitID</li><li>查看分支 git branch</li><li>创建并切换分支 git checkout -b 分支名</li><li>分支合并 git merge 分支名</li><li>删除分支 git branch -d 分支名 （需要切换到另一个分支上）</li><li>将本地仓库与gitee关联 git remote add origin 远程仓库的ssh</li><li>查看远程仓库 git remote</li><li>推送到远程仓库 git push [-f] (强制覆盖) origin master</li><li>推送到远端的同时并且建立起和远端分支的关联关系 git push –set-upstream origin master<ul><li>建立之后，可以省略分支名和远端名 git push</li></ul></li><li>克隆 get clone 仓库地址</li><li>抓取 git fetch [remote name] [branch name]</li><li>拉取 git pull [remote name] [branch name]</li></ul><h1 id="Java后端"><a href="#Java后端" class="headerlink" title="Java后端"></a>Java后端</h1><h2 id="将接收的JSON数据类型转化为对象并存储到Map中"><a href="#将接收的JSON数据类型转化为对象并存储到Map中" class="headerlink" title="将接收的JSON数据类型转化为对象并存储到Map中"></a>将接收的JSON数据类型转化为对象并存储到Map中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2 json 转对象（可以使用生成一个对象来进行接收，或者使用Map）</span></span><br><span class="line">        Map&lt;String, Object&gt;map = JSONUtil.toBean(result,Map.class);</span><br></pre></td></tr></table></figure><h1 id="Pyenv"><a href="#Pyenv" class="headerlink" title="Pyenv"></a>Pyenv</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看可安装的python发行版本</span><br><span class="line">pyenv install -l</span><br><span class="line"># 安装指定python版本</span><br><span class="line">pyenv install 3.9.0</span><br><span class="line"># 查看当前已安装的python版本(标*的为当前环境python)</span><br><span class="line">pyenv versions</span><br><span class="line">pyenv version</span><br><span class="line"># 切换python版本</span><br><span class="line">pyenv local 3.9.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重庆</title>
      <link href="/2024/05/09/%E9%87%8D%E5%BA%86/"/>
      <url>/2024/05/09/%E9%87%8D%E5%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h1><p>占个位置</p>]]></content>
      
      
      <categories>
          
          <category> 出游记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 出游记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活着-余华</title>
      <link href="/2024/05/09/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/"/>
      <url>/2024/05/09/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="活着-余华"><a href="#活着-余华" class="headerlink" title="活着 - 余华"></a>活着 - 余华</h1><p>​福贵最初嚣张跋扈，一点不把别人放在眼里。对身边的人的行为充分展示了地主家的儿子的形象。到后来，福贵在赌场被坑，导致散尽家财。然后回家被失去了世界的样子。</p><p>​福贵的父亲也因为福贵从富贵的生活变成了极为清贫。在此后不久福贵的父亲就去世了。福贵感觉是自己害死了父亲。从此福贵的悲惨人生才刚刚开始。</p><p>​福贵输光了家财，家珍的父亲也来接走了她，并且家珍走的时候已经怀了有庆。<span class='p red large'>赌博可谓是让人妻离子散</span></p><p>​在一年多以后家珍也回来了，家珍是真爱着福贵。再往后真是清贫人生、悲惨人生。</p><p>​不久之后，福贵的母亲也病危了，福贵去买药的时候还被长官抓取拉炮车，去前线打仗了。辗转一年多才回到家。在此期间，福贵的母亲已经离世，凤霞也因为生了场病而聋哑了。<span class='p red large'>支离破碎呐</span></p><p>​继续保持着贫苦的生活，再往后县长夫人生病，需要抽血，结果把有庆害死了，一个这么年轻的孩子。<span class='p red large'>官大真是压死人</span></p><p>​后来，凤霞和二喜结婚了。二喜对凤霞非常好，结婚也是花了很多钱弄得很有排面。凤霞换怀孕了，到生孩子的时候，进产房很久没有出来，很久之后医生出来开玩笑的说，保大还是保小。二喜慌了，连忙说着保大，我要凤霞。但是医生说开玩笑的，两个都没事。但刚说不久，凤霞就因为大出血离世了。</p><p>​二喜从此背着孩子干搬运活，非常辛苦非常累。<span class='p red large'>这才是底层人的苦难</span>，后来，二喜因为干活的时候出了意外，离世了。从此只有福贵和苦根相依为命。</p><p>​福贵年纪也大了，干起活来也不太顺利。日子这么贫苦的过着。苦根长大一些后，也帮着福贵干起农活，在干活时突然发烧了，福贵将苦根带回家休息。想着给苦根吃饱些，就去煮了许多豆子。但是苦根因为吃了太多豆子而离世。<span class='p red large'>有时候命运就是这么悲惨，不知道什么时候就没了</span></p><p>​最后只有福贵一个人了，福贵去买了头牛与自己相依为命。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户中心</title>
      <link href="/2024/05/08/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
      <url>/2024/05/08/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="用户中心"><a href="#用户中心" class="headerlink" title="用户中心"></a>用户中心</h1><h1 id="好用的工具收集"><a href="#好用的工具收集" class="headerlink" title="好用的工具收集"></a>好用的工具收集</h1><blockquote><!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --><dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> <version>3.14.0</version></dependency><p>用于</p></blockquote><h1 id="企业做项目流程"><a href="#企业做项目流程" class="headerlink" title="企业做项目流程"></a>企业做项目流程</h1><ul><li>需求分析</li><li>设计（概要设计、详细设计）</li><li>技术选型</li><li>初始化 &#x2F; 引入需要的技术</li><li>写 Demo</li><li>写代码（实现业务逻辑）</li><li>测试（单元测试）</li><li>代码提交 &#x2F; 代码评审</li><li>部署</li><li>发布</li></ul><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ol><li>登录 &#x2F; 注册</li><li>用户管理（管理员）对用户的查询、修改</li><li>用户校验（仅VIP使用）</li></ol><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>前端：</p><ol><li>三件套</li><li>React</li><li>组件库 Ant Design</li><li>Umi</li><li>Ant Design Pro（现成的管理系统）</li></ol><p>后端：</p><ol><li>Java</li><li>Spring（依赖注入框架，帮助你管理Java对象，集成一些其他的内容）</li><li>Spring MVC（web框架，提供接口访问，restful接口等能力）</li><li>mybatis（Java 操作数据库的框架，持久层框架，对 jdbc 的封装）</li><li>mybatis-plus（对 mybatis 的增强，不用写 sql 也能实现增删改查）</li><li>Spring-Boot（&#x3D;&#x3D;快速启动&#x3D;&#x3D; &#x2F; 快速集成项目。不用自己管理 spring 配置，不用自己整合各种框架）</li><li>mysql</li></ol><p>部署：服务器 &#x2F; 容器（平台）</p><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ol><li>初始化项目<ol><li>前端初始化<ol><li>初始化项目</li><li>引入组件库</li><li>框架介绍 &#x2F; 瘦身</li></ol></li><li>后端初始化<ol><li>准备环境（MySQL之类的）</li><li>引入框架（整合框架）</li></ol></li></ol></li><li>登录 &#x2F; 注册<ol><li>前端</li><li>后端</li></ol></li><li>用户管理（仅管理员可见）<ol><li>前端</li><li>后端</li></ol></li></ol><h1 id="第二次直播任务"><a href="#第二次直播任务" class="headerlink" title="第二次直播任务"></a>第二次直播任务</h1><ul><li>用户库表设计</li><li>完成登录注册的前后端开发</li><li>完成用户管理后台的前后端开发</li></ul><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>有哪些表（模型）？表中有哪些字段？ 字段类型？ 数据库字段添加索引？ 表与表之间的关联？</p><p>用户表：</p><ul><li><p>id（主键） varchar</p></li><li><p>userAccount 账号</p></li><li><p>userName 昵称 varchar</p></li><li><p>avatarUrl 头像 varchar</p></li><li><p>gender 性别 tinyint</p></li><li><p>password 密码 varchar</p></li><li><p>phone 电话 varchar</p></li><li><p>email 邮箱 varchar</p></li><li><p>isValid 是否有效 tinyint 0 1 (比如被封号)</p></li></ul><hr><ul><li>createTime 创建时间 datetime</li><li>updateTime 更新时间 datetime</li><li>isDelete 是否删除 tinyint</li></ul><h2 id="自动生成器的使用"><a href="#自动生成器的使用" class="headerlink" title="自动生成器的使用"></a>自动生成器的使用</h2><p>MyBatisX 插件，自动根据数据库生成domain 实体对象，mapper（操作数据库对象），mapper.xml (定义了mapper对象和数据库的关联，可以在里面自己写SQL)，service（包括常用的增删改查），serviceImpl（具体实现 service）</p><h2 id="注册逻辑"><a href="#注册逻辑" class="headerlink" title="注册逻辑"></a>注册逻辑</h2><ol><li>用户在前端输入账户和密码、以及校验码（todo）</li><li>校验用户的账户、密码、校验密码，是否符合要求<ol><li>账户不小于 4 位</li><li>密码不小于 6 位</li><li>账户不能重复</li><li>账户不包含特殊字符</li></ol></li><li>对密码进行加密（密码千万不要以明文存储到数据库中）</li><li>向数据库插入用户数据</li></ol><h1 id="第三次直播"><a href="#第三次直播" class="headerlink" title="第三次直播"></a>第三次直播</h1><h2 id="计划-1"><a href="#计划-1" class="headerlink" title="计划"></a>计划</h2><ol><li>开发完成后端登录功能 （单机登录）</li><li>开发后端用户的管理接口 （用户的查询 &#x2F; 状态的更改）</li><li>开发前端用户登录注册功能</li><li>讨论如何校验用户（VIP可以使用）</li></ol><h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><p>接收参数：用户账户、密码</p><p>请求类型：POST</p><blockquote><p>请求参数很长时，不建议使用GET</p></blockquote><p>请求体：JSON 格式的数据</p><p>返回值：用户信息（&#x3D;&#x3D;脱敏&#x3D;&#x3D;）</p><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><ol><li>校验用户的账户、密码、是否合法</li><li>非空</li><li>账户不小于 4 位</li><li>密码不小于 6 位</li><li>账户不包含特殊字符</li><li>校验密码是否输入正确，要和数据库中的密文密码去对比</li><li>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</li><li>我们要记录用户的登录态（session），将其存到服务器上（用后端 Springboot 框架封装的服务器 tomcat 去记录）</li><li>返回用户信息 （脱敏）</li></ol><h3 id="控制层-Controller-封装请求"><a href="#控制层-Controller-封装请求" class="headerlink" title="控制层 Controller 封装请求"></a>控制层 Controller 封装请求</h3><blockquote><p>@RestController 适用于编写 restful 风格的 api ， 返回值默认为 JSON 类型</p></blockquote><p>controller 层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</p><p>service 层是对业务逻辑的校验（有可能被 controller 之外的类调用）</p><h3 id="如何知道是哪个用户登录了？"><a href="#如何知道是哪个用户登录了？" class="headerlink" title="如何知道是哪个用户登录了？"></a>如何知道是哪个用户登录了？</h3><ol><li>连接服务器端后，得到一个session1 状态，返回给前端</li><li>登陆成功后，得到了登陆成功的session，并且给该session设置一些值（比如用户信息），返回给前端一个设置cookie的“命令”</li><li>前端接收到后端的命令后，设置cookie，保存到浏览器内</li><li>前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求</li><li>后端拿到前端传来的cookie，找到对应的session</li><li>后端从session中可以取出基于该session存储的变量（用户的登录信息，登录名等等）</li></ol><h2 id="用户管理接口"><a href="#用户管理接口" class="headerlink" title="用户管理接口"></a>用户管理接口</h2><ol><li>查询用户<ol><li>允许根据用户名查询</li></ol></li><li>删除用户</li></ol><h3 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h3><p>前端需要向后端发送请求</p><p>前端 ajax 来请求后端</p><p>axios 封装了 ajax</p><p>request 是 ant design 项目又封装了一次</p><p>追踪 request 源码：用到了 umi 的插件、 requestConfig  是一个配置</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>正向代理：替客户端发送请求</p><p>反向代理：替服务器接受请求</p><p>怎么做代理？</p><ul><li>Nginx 服务器</li><li>Node.js 服务器</li></ul><h1 id="前端不再开发"><a href="#前端不再开发" class="headerlink" title="前端不再开发"></a>前端不再开发</h1><p>此项目的教程时间有点久远了。所以很多东西都不一样了。我还是注重后端开发，所以前端的就不研究了。</p><h1 id="末-直播内容"><a href="#末-直播内容" class="headerlink" title="末 - 直播内容"></a>末 - 直播内容</h1><ol><li>开发用户注销前端 &#x2F; 后端</li><li>补充用户注册校验逻辑前端 &#x2F; 后端</li><li>后端代码优化</li><li>前端代码优化</li><li>项目部署上线<ol><li>web 服务器</li><li>容器部署</li><li>绑定域名</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马赛克项目部署文档</title>
      <link href="/2024/05/08/%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/"/>
      <url>/2024/05/08/%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于 Flask 框架搭建</p></blockquote><h2 id="视频人脸马赛克——部署文档"><a href="#视频人脸马赛克——部署文档" class="headerlink" title="视频人脸马赛克——部署文档"></a>视频人脸马赛克——部署文档</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>Pyhton3.9.5</p><blockquote><p>安装</p><ul><li><p>安装gcc</p><p>  yum install gcc -y</p></li><li><p>安装Python依赖</p><p>  yum install zlib zlib-devel -y<br>  yum install bzip2 bzip2-devel  -y<br>  yum install ncurses ncurses-devel  -y<br>  yum install readline readline-devel  -y<br>  yum install openssl openssl-devel  -y<br>  yum install xz lzma xz-devel  -y<br>  yum install sqlite sqlite-devel  -y<br>  yum install gdbm gdbm-devel  -y<br>  yum install tk tk-devel  -y<br>  yum install mysql-devel -y<br>  yum install python-devel -y<br>  yum install libffi-devel -y</p></li><li><p>下载源码 Python3.9.5<br>  yum install wget -y<br>  wget <a href="https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz">https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz</a></p></li><li><p>解压 &amp; 编译 &amp; 安装</p><p>  tar -xvf Python-3.9.5.tgzcd Python-3.9.5<br>  .&#x2F;configure<br>  make all<br>  make install</p></li></ul></blockquote></li><li><p>虚拟环境（使用virtualenv）</p><ul><li><p>安装virtualenv</p><ul><li>pip3.9 install virtualenv</li></ul></li><li><p>创建虚拟环境</p><ul><li><p>mkdir envs<br>  virtualenv envs&#x2F;mosaic –python&#x3D;python3.9</p><p>  &#x3D;&#x3D;virtualenv envs&#x2F;eye_system_python –python&#x3D;$(pyenv which python3.6)&#x3D;&#x3D;</p></li></ul></li><li><p>激活虚拟环境</p><ul><li>source envs&#x2F;nb&#x2F;bin&#x2F;activate</li></ul></li><li><p>进入项目所在文件夹，安装 requirement.txt 中的相关依赖</p><ul><li>pip install -r requirement.txt</li></ul></li></ul></li></ul><blockquote><p>[!NOTE]</p><p>此项目需要使用&#x3D;&#x3D;ffmpeg&#x3D;&#x3D;</p></blockquote><h3 id="ffmpeg安装"><a href="#ffmpeg安装" class="headerlink" title="ffmpeg安装"></a>ffmpeg安装</h3><ul><li>安装yasm</li></ul><blockquote><p># wget <a href="http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz">http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz</a></p><p># tar -xvf yasm-1.3.0.tar.gz</p><p># cd yasm-1.3.0</p><p>编译安装yasm，安装ffmpeg必须要安装的</p><p># .&#x2F;configure &amp;&amp; make &amp;&amp; make install</p></blockquote><ul><li>安装x264</li></ul><blockquote><p>安装nasm</p><p># wget <a href="http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz">http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz</a> –no-check-certificate</p><p># tar xvJf nasm-2.13.03.tar.xz</p><p># cd nasm-2.13.03</p><p># .&#x2F;configure &amp;&amp; make &amp;&amp; make install</p><p>安装x264</p><p># yum -y install git</p><p># git clone <a href="https://code.videolan.org/videolan/x264.git">https://code.videolan.org/videolan/x264.git</a>　　　　#下载x264安装</p><p># cd x264</p><p># .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;x264 –enable-shared –enable-static</p><p># make &amp;&amp; make install</p><p>添加环境变量</p><p># vim &#x2F;etc&#x2F;profile</p><p>export PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib&#x2F;pkgconfig</p><p># source &#x2F;etc&#x2F;profile     激活</p></blockquote><ul><li>安装ffmpeg</li></ul><blockquote><p># wget <a href="http://ffmpeg.org/releases/ffmpeg-5.1.3.tar.gz">http://ffmpeg.org/releases/ffmpeg-5.1.3.tar.gz</a></p><p># tar -xvf ffmpeg-5.1.3.tar.gz</p><p># cd ffmpeg-5.1.3</p><p># .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg5.1.3 –enable-gpl –enable-libx264 –extra-cflags&#x3D;”-I&#x2F;usr&#x2F;local&#x2F;x264&#x2F;include” –extra-ldflags&#x3D;”-L&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib”</p><p># make &amp;&amp; make install</p><p>&#x3D;&#x3D;添加环境变量&#x3D;&#x3D;</p><p># vim &#x2F;etc&#x2F;profile</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;ffmpeg&#x2F;bin</p><p># source &#x2F;etc&#x2F;profile     激活</p><p># vim &#x2F;etc&#x2F;ld.so.conf  #文件最后添加以下内容</p><p>&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib</p><p># ldconfig</p><p># &#x2F;usr&#x2F;local&#x2F;ffmpeg5.1.3&#x2F;bin&#x2F;ffmpeg -v　　　　#安装成功，查看环境变</p></blockquote><h3 id="运行及停止命令"><a href="#运行及停止命令" class="headerlink" title="运行及停止命令"></a>运行及停止命令</h3><p>使用nohup使得程序后台常驻（先进入项目文件夹）</p><ul><li>&#x3D;&#x3D;nohup python app.py &amp;&#x3D;&#x3D;</li></ul><p>停止命令，使用kill杀死进程</p><ul><li>&#x3D;&#x3D;ps aux | grep python app.py&#x3D;&#x3D; （查找进程）</li><li>&#x3D;&#x3D;kill PID&#x3D;&#x3D; (杀死进程)</li></ul><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ul><li>正常情况下命名为收到请求传递的名称，若在video中此名称已存在，则在此名称后加了五位随机字母为新名字。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上线 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署上线踩坑</title>
      <link href="/2024/05/08/%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/05/08/%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="部署上线踩坑"><a href="#部署上线踩坑" class="headerlink" title="部署上线踩坑"></a>部署上线踩坑</h1><h2 id="文件如何上传服务器"><a href="#文件如何上传服务器" class="headerlink" title="文件如何上传服务器"></a>文件如何上传服务器</h2><p>通过git工具传到gitee，然后通过clone到服务器上</p><p>修改代码在本地修改之后在提交到gitee上，在服务器上通过git pull 拉取</p><h2 id="如果项目中使用了ffprobe视频处理工具"><a href="#如果项目中使用了ffprobe视频处理工具" class="headerlink" title="如果项目中使用了ffprobe视频处理工具"></a>如果项目中使用了ffprobe视频处理工具</h2><p>需要将ffmpeg安装到服务器中，并且配置环境变量</p><p>见：<a href="https://blog.csdn.net/weixin_44692055/article/details/128848638">CentOS环境安装ffmpeg</a></p><h2 id="报错-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#报错-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="报错 libGL.so.1: cannot open shared object file: No such file or directory"></a>报错 libGL.so.1: cannot open shared object file: No such file or directory</h2><p>在虚拟环境中，卸载opencv-python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall opencv-python</span><br><span class="line">安装 opencv-python-headless</span><br><span class="line">pip install opencv-python-headless</span><br></pre></td></tr></table></figure><h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="yum源无法使用"><a href="#yum源无法使用" class="headerlink" title="yum源无法使用"></a>yum源无法使用</h2><p>参考文章：[<a href="https://www.cnblogs.com/Leehy0518/p/17317425.html">解决CentOS7的yum源无法正常使用</a>]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">报错信息如下</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">base                                                        | 3.6 kB  00:00:00     </span><br><span class="line">http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - &quot;Could not resolve host: mirrors.cloud.aliyuncs.com; Unknown error&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> One of the configured repositories failed (Extra Packages for Enterprise Linux 7 - x86_64),</span><br><span class="line"> and yum doesn&#x27;t have enough cached data to continue. At this point the only</span><br><span class="line"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="line"></span><br><span class="line">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="line"></span><br><span class="line">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="line">        upstream. This is most often useful if you are using a newer</span><br><span class="line">        distribution release than is supported by the repository (and the</span><br><span class="line">        packages for the previous distribution release still work).</span><br><span class="line"></span><br><span class="line">     3. Run the command with the repository temporarily disabled</span><br><span class="line">            yum --disablerepo=epel ...</span><br><span class="line"></span><br><span class="line">     4. Disable the repository permanently, so yum won&#x27;t use it by default. Yum</span><br><span class="line">        will then just ignore the repository until you permanently enable it</span><br><span class="line">        again or use --enablerepo for temporary usage:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --disable epel</span><br><span class="line">        or</span><br><span class="line">            subscription-manager repos --disable=epel</span><br><span class="line"></span><br><span class="line">     5. Configure the failing repository to be skipped, if it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">        compromise:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --save --setopt=epel.skip_if_unavailable=true</span><br><span class="line"></span><br><span class="line">failure: repodata/repomd.xml from epel: [Errno 256] No more mirrors to try.</span><br><span class="line">http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - &quot;Could not resolve host: mirrors.cloud.aliyuncs.com; Unknown error&quot;</span><br></pre></td></tr></table></figure><p>解决方法：修改vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 这个配置文件。此时我报错的原因是里面没有内容了</p><ul><li><p>添加基本内容</p></li><li><pre><code>  DEVICE=ens32  BOOTPROTO=dhcp  ONBOOT=yes  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再依次执行以下代码：</span><br><span class="line"></span><br><span class="line">```undefined</span><br><span class="line">重启网路</span><br><span class="line">systemctl restart NetworkManager.service</span><br><span class="line">清理yum缓存</span><br><span class="line">yum clean all</span><br><span class="line">更新缓存</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="部署成功后外网无法访问"><a href="#部署成功后外网无法访问" class="headerlink" title="部署成功后外网无法访问"></a>部署成功后外网无法访问</h2><blockquote><p>部署成功后只是</p></blockquote><h2 id="docker安装mysql无限重启"><a href="#docker安装mysql无限重启" class="headerlink" title="docker安装mysql无限重启"></a>docker安装mysql无限重启</h2><blockquote><p>缓冲池设置小一些。在my.cnf里面配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size=512M</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> 上线 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
