<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三星Galaxy S24 Ultra</title>
      <link href="/2024/07/03/%E4%B8%89%E6%98%9FGalaxy-S24-Ultra/"/>
      <url>/2024/07/03/%E4%B8%89%E6%98%9FGalaxy-S24-Ultra/</url>
      
        <content type="html"><![CDATA[<div class="tip warning"><p>不得不说三星的颜值我还是非常喜欢的，就是一直没有使用过（穷🤣）。最近的这个想入手的冲动愈发按耐不住，只有写个文章过过瘾了···</p></div><p><strong>先来看看外观</strong></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031255974.png"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031256366.png"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031256365.png"></p><div class="tip warning"><p>这个先行者的套装还有点意思，不过我觉得还是贵了···</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031259112.png"></p> <div class="tip warning"><p>系统讲解就跳过了，这东西仁者见仁，主要是我没用过😁</p></div><div class="tip warning"><p>一时间分不出来亮面和磨砂谁更有质感了···</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031322395.png"></p><div class="tip warning"><p>话说小米的质感得努努力啊，还是差那么一些</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031329079.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2024/07/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2024/07/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>动态规划算法学习记录</p></div><h2 id="爬楼梯">爬楼梯</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/climbing-stairs/" title="爬楼梯"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>爬楼梯</span></a></p><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code>个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><p>输入：n = 2 输出：2 解释：有两种方法可以爬到楼顶。</p><ol type="1"><li>1 阶 + 1 阶</li><li>2 阶</li></ol><p><strong>示例 2：</strong></p><p>输入：n = 3 输出：3 解释：有三种方法可以爬到楼顶。</p><ol type="1"><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h3 id="我的解答">我的解答</h3><div class="tip warning"><p>采用递归的方式进行编写。每次进行选择都是0和1两种情况，则编写递归函数计算0和1选择的种类数即可。并将数值对应的方式存入HashMap中，使得在递归之前先检查是否已经已存在数据，存在则直接查询返回</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; list = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> upLayer(n - <span class="number">1</span>,list) + upLayer(n - <span class="number">2</span>,list);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">upLayer</span><span class="params">(<span class="type">int</span> n,HashMap&lt;Integer,Integer&gt; map)</span> {</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(n)) {</span><br><span class="line">            <span class="keyword">return</span> map.get(n);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> upLayer(n - <span class="number">1</span>,map) + upLayer(n - <span class="number">2</span>,map);</span><br><span class="line">        map.put(n,temp);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="官方解答">官方解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            p = q; </span><br><span class="line">            q = r; </span><br><span class="line">            r = p + q;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407022159898.gif"></p><p>使用<strong>滚动数组</strong>实现，这方法太妙了！</p><h2 id="斐波那契数">斐波那契数</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/fibonacci-number/" title="斐波那契数"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>斐波那契数</span></a></p><p><strong>斐波那契数</strong> （通常用 <code>F(n)</code>表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由<code>0</code> 和 <code>1</code>开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(0) = 0，F(1) = 1</span><br><span class="line">F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</span><br></pre></td></tr></table></figure><p>给定 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br><span class="line">解释：F(2) = F(1) + F(0) = 1 + 0 = 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：2</span><br><span class="line">解释：F(3) = F(2) + F(1) = 1 + 1 = 2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：3</span><br><span class="line">解释：F(4) = F(3) + F(2) = 2 + 1 = 3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 30</code></li></ul><h3 id="自己解答">自己解答</h3><div class="tip warning"><p>思路是使用上一节学到的动态数组，遍历数字从而逐渐累加和，从而得出结果</p></div><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;n -<span class="number">1</span>;i++) {</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">            c = a + b;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="官方解答-1">官方解答</h3><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) {</span><br><span class="line">            p = q; </span><br><span class="line">            q = r; </span><br><span class="line">            r = p + q;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><strong>方法二：矩阵快速幂</strong></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031656763.png"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[][] q = {{<span class="number">1</span>, <span class="number">1</span>}, {<span class="number">1</span>, <span class="number">0</span>}};</span><br><span class="line">        <span class="type">int</span>[][] res = pow(q, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] pow(<span class="type">int</span>[][] a, <span class="type">int</span> n) {</span><br><span class="line">        <span class="type">int</span>[][] ret = {{<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">                ret = multiply(ret, a);</span><br><span class="line">            }</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">         </span><br><span class="line">            a = multiply(a, a);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] multiply(<span class="type">int</span>[][] a, <span class="type">int</span>[][] b) {</span><br><span class="line">        <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) {</span><br><span class="line">                c[i][j] = a[i][<span class="number">0</span>] * b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>] * b[<span class="number">1</span>][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(logn)。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法三：通项公式</strong></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031659868.png"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">double</span> <span class="variable">sqrt5</span> <span class="operator">=</span> Math.sqrt(<span class="number">5</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">fibN</span> <span class="operator">=</span> Math.pow((<span class="number">1</span> + sqrt5) / <span class="number">2</span>, n) - Math.pow((<span class="number">1</span> - sqrt5) / <span class="number">2</span>, n);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) Math.round(fibN / sqrt5);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>下面这哥们面向结果编程🤣🤣🤣<img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407031701245.png"></p></div><h2 id="第-n-个泰波那契数">第 N 个泰波那契数</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/n-th-tribonacci-number/" title="第 N 个泰波那契数"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>第 N 个泰波那契数</span></a></p><p>泰波那契序列 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.469ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1091.3 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 定义如下：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="21.384ex" height="1.971ex" role="img" focusable="false" viewBox="0 -677 9451.7 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1298.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2354.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2854.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3298.8,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4597.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5652.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6152.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6597.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7895.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8951.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>, 且在<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.266ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 3211.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mn" transform="translate(2711.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 的条件下 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="24.558ex" height="2.002ex" role="img" focusable="false" viewBox="0 -677 10854.5 885"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2272.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3328.5,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4642,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(5642.2,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7859.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(8859.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></span></p><p>给你整数 <code>n</code>，请返回第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 个泰波那契数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.469ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1091.3 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> 的值。</p><p><strong>示例 1：</strong></p><p>输入：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 2433.6 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span> 输出：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span> 解释： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="18.399ex" height="1.906ex" role="img" focusable="false" viewBox="0 -677 8132.6 842.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1298.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2354.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3076.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4076.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4798.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5799,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6576.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7632.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="18.399ex" height="1.871ex" role="img" focusable="false" viewBox="0 -677 8132.6 827"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(1298.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2354.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3076.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4076.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4798.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5799,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(6576.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7632.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span></p><p><strong>示例 2：</strong></p><p>输入：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.637ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2933.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span> 输出：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.919ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 3500 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(2500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(3000,0)"></path></g></g></g></svg></mjx-container></span></p><p><strong>提示：</strong></p><ul><li><strong><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.306ex" height="1.715ex" role="img" focusable="false" viewBox="0 -676 6323.1 758"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(2611.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3489.3,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mn" transform="translate(5323.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></strong></li><li>答案保证是一个 32 位整数，即 <strong><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="18.903ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 8355.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1129,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1598,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(2314,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2780,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3508.8,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="msup" transform="translate(5342.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(6854.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7855.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span></strong>。</li></ul><h3 id="自己解答-1">自己解答</h3><div class="tip warning"><p>思路还是之前的动态数组的方式，与之前的写法几乎相同，只是这次换成了3个数累加而已</p></div><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>, c = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>;i&lt;=n;++i) {</span><br><span class="line">            ans = a + b + c;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">            c = ans;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="官方解答-2">官方解答</h3><p>方法一：动态规划</p><p>泰波那契数的边界条件是 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12336 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2259.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3315.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3815.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4260.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(4964.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5353.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5853.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6520,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7575.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8075.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8520.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(9224.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(9613.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(10113.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10780.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11836,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>。当 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2433.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>时，每一项的和都等于前三项的和，因此有如下递推关系： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="39.081ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 17273.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(4119.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4508.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5330.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6331,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6831,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7442.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8442.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(9146.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9535.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10357.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(11357.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(11857.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12469.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(13469.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(14173.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14562.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15384.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(16384.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(16884.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>由于泰波那契数存在递推关系，因此可以使用动态规划求解。动态规划的状态转移方程即为上述递推关系，边界条件为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.484ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1982 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>、<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.484ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1982 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.484ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1982 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p><p>根据状态转移方程和边界条件，可以得到时间复杂度和空间复杂度都是 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 的实现。由于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.71ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2082 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>只和前三项有关，因此可以使用「滚动数组思想」将空间复杂度优化成 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。如下的代码中给出的就是这种实现。</p><figure><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202407032229491.gif" alt="fig1"><figcaption aria-hidden="true">fig1</figcaption></figure><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>, s = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; ++i) {</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">            r = s;</span><br><span class="line">            s = p + q + r;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>眼底视盘分割——segtran</title>
      <link href="/2024/06/25/%E7%9C%BC%E5%BA%95%E8%A7%86%E7%9B%98%E5%88%86%E5%89%B2%E2%80%94%E2%80%94segtran/"/>
      <url>/2024/06/25/%E7%9C%BC%E5%BA%95%E8%A7%86%E7%9B%98%E5%88%86%E5%89%B2%E2%80%94%E2%80%94segtran/</url>
      
        <content type="html"><![CDATA[<p>点击去Github -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://github.com/askerlee/segtran"   title="使用挤压和扩展转换器的医学图像分割"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>使用挤压和扩展转换器的医学图像分割</span></a></p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><ul><li>–task分割任务的名称</li><li>–ds         数据文件夹。可以指定多个数据集(以“，”分隔)</li><li>–split       数据集的分割(可以为每个数据集单独指定分割)</li><li>–profile    计算参数和 FLOPs 的数量。</li><li>–insize     使用这个尺寸的图像(在所有裁剪尺寸中)进行训练。设置为0以使用所有大小。</li><li>–patch     为训练调整输入图像的大小。</li><li>–samplenum     用于每个数据集的监督训练样本数量(默认:无，使用每个数据集的所有图像)。为数据集提供0以使用它的所有图像。不要使用-1，因为它会导致argparse错误。</li><li>–bnopt     如何在训练期间优化 BN 统计&#x2F;仿射参数。</li><li>–polyformer     进行 polyformer 训练。</li><li>–sourceopt       在源域上优化哪些参数。</li><li>–targetopt        在目标域上优化哪些参数。</li><li>–adv                对抗性训练模式。</li><li>–featdisinchan   特征鉴别器的输入通道数</li><li>–sourceds         源域的数据集名称。</li><li>–sourcebs         源域上无监督对抗学习的批处理大小(访问所有源域图像)。</li><li>–targetbs          目标域上无监督对抗学习的批处理大小(访问所有目标域图像)。</li><li>–domweight      对抗性域损失的权重。</li><li>–supweight       监督训练损失的权重。设置为0表示进行无监督DA。</li><li>–reconweight    DA重建损失的权重。默认值:0，不重构。</li><li>–adda              使用ADDA(而不是默认的RevGrad目标)。</li><li>–optfilter          只优化与指定关键字匹配的参数。</li><li>–robustaug       鲁棒性训练期间使用的增强类型。</li><li>–robustaugdeg  鲁棒性增强程度(1或2个数字)。</li><li>–gbias              使用全局偏置而不是变压器层。</li><li>–maxiter            最大训练迭代次数</li><li>–saveiter            每N次迭代保存模型快照</li><li>–cp                   加载这个检查点</li><li>–lrwarmup         LR预热步骤数</li><li>–bs                   所有gpu上的总batch_size</li><li>–opt                  优化算法 </li><li>–lr                    学习速率</li><li>–decay              权重更新</li><li>–gradclip           梯度夹   </li><li>–attnclip            隔离tran注意力剪辑</li><li>–local_rank        </li><li>–locprob           在训练中进行定位的概率</li><li>–tunebn            仅调整批规范进行域适应，保持模型权重不变。</li><li>–diceweight       骰子损失的权重。</li><li>–focus              特别预测的类别(具有更高的损失重量)</li><li>–exclusive         旨在预测排他性掩码(而不是非排他性掩码)</li><li>–vcdr                眼底图像的学习式vCDR损失方案。none:不使用vCDR丢失。对偶:用单独的vC估计量和vD估计量估计vCDR。single:使用单个CNN直接估计vCDR。  </li><li>–vcdrweight      vCDR丢失权重。</li><li>–vcdrestimstart   开始对vCDR估计器的vCDR损耗进行迭代。</li><li>–vcdrnetstart       开始分割模型的vCDR损耗迭代。</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 算法研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣算法记录</title>
      <link href="/2024/06/18/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/06/18/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>算法！算法！算法！！！ </p></div><h2 id="价格减免（2024年6月18日）"><a href="#价格减免（2024年6月18日）" class="headerlink" title="价格减免（2024年6月18日）"></a>价格减免（2024年6月18日）</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/apply-discount-to-prices/solutions/2809596/jie-ge-jian-mian-by-leetcode-solution-m8tx/"   title="价格减免"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>价格减免</span></a></p><p><strong>句子</strong> 是由若干个单词组成的字符串，单词之间用单个空格分隔，其中每个单词可以包含数字、小写字母、和美元符号 <code>&#39;$&#39;</code> 。如果单词的形式为美元符号后跟着一个非负实数，那么这个单词就表示一个 <strong>价格</strong> 。</p><ul><li>例如 <code>&quot;$100&quot;</code>、<code>&quot;$23&quot;</code> 和 <code>&quot;$6&quot;</code> 表示价格，而 <code>&quot;100&quot;</code>、<code>&quot;$&quot;</code> 和 <code>&quot;$1e5</code> 不是。</li></ul><p>给你一个字符串 <code>sentence</code> 表示一个句子和一个整数 <code>discount</code> 。对于每个表示价格的单词，都在价格的基础上减免 <code>discount%</code> ，并 <strong>更新</strong> 该单词到句子中。所有更新后的价格应该表示为一个 <strong>恰好保留小数点后两位</strong> 的数字。</p><p>返回表示修改后句子的字符串。</p><p>注意：所有价格 <strong>最多</strong> 为 <code>10</code> 位数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：sentence = &quot;there are $1 $2 and 5$ candies in the shop&quot;, discount = 50</span><br><span class="line">输出：&quot;there are $0.50 $1.00 and 5$ candies in the shop&quot;</span><br><span class="line">解释：</span><br><span class="line">表示价格的单词是 &quot;$1&quot; 和 &quot;$2&quot; 。 </span><br><span class="line">- &quot;$1&quot; 减免 50% 为 &quot;$0.50&quot; ，所以 &quot;$1&quot; 替换为 &quot;$0.50&quot; 。</span><br><span class="line">- &quot;$2&quot; 减免 50% 为 &quot;$1&quot; ，所以 &quot;$1&quot; 替换为 &quot;$1.00&quot; 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：sentence = &quot;1 2 $3 4 $5 $6 7 8$ $9 $10$&quot;, discount = 100</span><br><span class="line">输出：&quot;1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$&quot;</span><br><span class="line">解释：</span><br><span class="line">任何价格减免 100% 都会得到 0 。</span><br><span class="line">表示价格的单词分别是 &quot;$3&quot;、&quot;$5&quot;、&quot;$6&quot; 和 &quot;$9&quot;。</span><br><span class="line">每个单词都替换为 &quot;$0.00&quot;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= sentence.length &lt;= 105</code></li><li><code>sentence</code> 由小写英文字母、数字、<code>&#39; &#39;</code> 和 <code>&#39;$&#39;</code> 组成</li><li><code>sentence</code> 不含前导和尾随空格</li><li><code>sentence</code> 的所有单词都用单个空格分隔</li><li>所有价格都是 <strong>正</strong> 整数且不含前导零</li><li>所有价格 <strong>最多</strong> 为 <code>10</code> 位数字</li><li><code>0 &lt;= discount &lt;= 100</code></li></ul><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><p>方法一：模拟</p><p>思路与算法</p><p>我们按照题目中的要求进行模拟即可。</p><p>首先我们将给定的字符串 sentence 根据空格进行分割，得到其中的每一个单词。随后我们遍历每个单词，如果该单词：</p><p>以 $ 开头；<br>后续至少有一个字符，且均在 [0,9]中；</p><p>那么该单词就表示一个价格。我们提取后续的字符，转换成整数，计算折扣（即乘上 1−（discount &#x2F; 100），保留两位小数，再转换回字符串，并添加开头的 $ 即可。</p><p>当所有单词遍历完成之后，我们就可以再加上空格，得到最终的字符串。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">discountPrices</span><span class="params">(String sentence, <span class="type">int</span> discount)</span> &#123;</span><br><span class="line">        String[] words = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> words[i];</span><br><span class="line">            <span class="keyword">if</span> (word.charAt(<span class="number">0</span>) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; isNumeric(word.substring(<span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> Long.parseLong(word.substring(<span class="number">1</span>)) * (<span class="number">1</span> - discount / <span class="number">100.0</span>);</span><br><span class="line">                words[i] = String.format(<span class="string">&quot;$%.2f&quot;</span>, price);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNumeric</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵中严格递增的单元格数（2024年6月19日）"><a href="#矩阵中严格递增的单元格数（2024年6月19日）" class="headerlink" title="矩阵中严格递增的单元格数（2024年6月19日）"></a>矩阵中严格递增的单元格数（2024年6月19日）</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/"   title="矩阵中严格递增的单元格数"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>矩阵中严格递增的单元格数</span></a></p><p>给你一个下标从 <strong>1</strong> 开始、大小为 <code>m x n</code> 的整数矩阵 <code>mat</code>，你可以选择任一单元格作为 <strong>起始单元格</strong> 。</p><p>从起始单元格出发，你可以移动到 <strong>同一行或同一列</strong> 中的任何其他单元格，但前提是目标单元格的值 <strong>严格大于</strong> 当前单元格的值。</p><p>你可以多次重复这一过程，从一个单元格移动到另一个单元格，直到无法再进行任何移动。</p><p>请你找出从某个单元开始访问矩阵所能访问的 <strong>单元格的最大数量</strong> 。</p><p>返回一个表示可访问单元格最大数量的整数。</p><p><strong>示例 1：</strong></p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406192132499.png" alt="diag1drawio" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[3,1],[3,4]]</span><br><span class="line">输出：2</span><br><span class="line">解释：上图展示了从第 1 行、第 2 列的单元格开始，可以访问 2 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 2 个单元格，因此答案是 2 。 </span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406192133119.png" alt="img" style="zoom:50%;" /></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[1,1],[1,1]]</span><br><span class="line">输出：1</span><br><span class="line">解释：由于目标单元格必须严格大于当前单元格，在本示例中只能访问 1 个单元格。 </span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><strong><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406192134416.png" alt="img" style="zoom:50%;" /></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[3,1,6],[-9,5,7]]</span><br><span class="line">输出：4</span><br><span class="line">解释：上图展示了从第 2 行、第 1 列的单元格开始，可以访问 4 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 4 个单元格，因此答案是 4 。  </span><br></pre></td></tr></table></figure><h3 id="自己解答"><a href="#自己解答" class="headerlink" title="自己解答"></a>自己解答</h3><div class="tip warning"><p>遍历每一个单元格进行获取最短路径。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxIncreasingCells</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;mat.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;mat[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> getMin(mat, mat[i][j], i, j) + <span class="number">1</span>;</span><br><span class="line">                results.add(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(results, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer p1, Integer p2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p2 - p1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(<span class="type">int</span>[][] mat,<span class="type">int</span> nowNum,<span class="type">int</span> line,<span class="type">int</span> column)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; max = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;mat[<span class="number">0</span>].length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[line][i] &gt; nowNum) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[line][i],line,i) + <span class="number">1</span>;</span><br><span class="line">                max.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;mat.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[j][column] &gt; nowNum) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[j][column],j,column) + <span class="number">1</span>;</span><br><span class="line">                max.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(max, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer p1, Integer p2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p2 - p1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> max.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>报错</strong>：超出时间限制🤣</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406201023114.png" alt="image-20240620102354273"></p><p>感觉是可以优化的。比如已经获得最短路径的单元格就不需要再去遍历了。</p><p><strong>优化后</strong>：</p><div class="tip warning"><p>我添加了HashMap用来存储每个数字对应的最短路径值，然后每次到这个数的时候就查表。但是我漏了一个需求，同一个数字重复出现的位置不同会导致最短路径不同。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxIncreasingCells</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; minPath = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;mat.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;mat[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> getMin(mat, mat[i][j], i, j,minPath);</span><br><span class="line">                results.add(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(results, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer p1, Integer p2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p2 - p1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(<span class="type">int</span>[][] mat,<span class="type">int</span> nowNum,<span class="type">int</span> line,<span class="type">int</span> column,HashMap&lt;Integer,Integer&gt; minPath)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; maxList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;mat[<span class="number">0</span>].length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[line][i] &gt; nowNum) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!minPath.containsKey(mat[line][i]))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[line][i],line,i,minPath) + <span class="number">1</span>;</span><br><span class="line">                    maxList.add(temp);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxList.add(minPath.get(mat[line][i]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;mat.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[j][column] &gt; nowNum) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!minPath.containsKey(mat[j][column]))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[j][column],j,column,minPath) + <span class="number">1</span>;</span><br><span class="line">                    maxList.add(temp);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxList.add(minPath.get(mat[j][column]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxList.isEmpty()) &#123;</span><br><span class="line">            minPath.put(nowNum,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxList.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer p1, Integer p2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p2 - p1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nowMinPath</span> <span class="operator">=</span> maxList.get(<span class="number">0</span>);</span><br><span class="line">        minPath.put(nowNum,nowMinPath);</span><br><span class="line">        maxList.clear();</span><br><span class="line">        <span class="keyword">return</span> nowMinPath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>我继续改为使用遍历的方式存储每一个单元格的最路径值。并且使用HashMap，将键设置为横纵坐标拼起来的字符串，确保键唯一，即使这样，还是第424个测试用例没有通过，我已经检查不出问题了。。。。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="type">int</span>[][] mat = &#123;&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>&#125;,&#123;-<span class="number">9</span>,<span class="number">5</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> solution.maxIncreasingCells(mat);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxIncreasingCells</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        ArrayList&lt;Pos&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, Pos&gt; pos = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;mat.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;mat[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pos.containsKey(String.valueOf(i) + j))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[i][j],i,j,pos);</span><br><span class="line"><span class="comment">//                    temp.setMinPath(temp.getMinPath() + 1);</span></span><br><span class="line"><span class="comment">//                    pos.put(String.valueOf(i) + j,temp);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Pos&gt; entry : pos.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.getValue().getMinPath() &gt; res) &#123;</span><br><span class="line">                res = entry.getValue().getMinPath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(<span class="type">int</span>[][] mat,<span class="type">int</span> nowNum,<span class="type">int</span> line,<span class="type">int</span> column,HashMap&lt;String, Pos&gt; pos)</span> &#123;</span><br><span class="line">        ArrayList&lt;Pos&gt; maxList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;mat[<span class="number">0</span>].length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[line][i] &gt; nowNum) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pos.containsKey(String.valueOf(line) + i))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[line][i],line,i,pos);</span><br><span class="line">                    <span class="type">Pos</span> <span class="variable">pos1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pos</span>();</span><br><span class="line">                    pos1.setNumber(nowNum);</span><br><span class="line">                    pos1.setLine(line);</span><br><span class="line">                    pos1.setColumn(column);</span><br><span class="line">                    pos1.setMinPath(temp + <span class="number">1</span>);</span><br><span class="line">                    maxList.add(pos1);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Pos</span> <span class="variable">tempPos</span> <span class="operator">=</span> pos.get(String.valueOf(line) + i);</span><br><span class="line">                <span class="type">Pos</span> <span class="variable">pos1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pos</span>();</span><br><span class="line">                pos1.setNumber(nowNum);</span><br><span class="line">                pos1.setLine(line);</span><br><span class="line">                pos1.setColumn(column);</span><br><span class="line">                pos1.setMinPath(tempPos.getMinPath() + <span class="number">1</span>);</span><br><span class="line">                maxList.add(pos1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;mat.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[j][column] &gt; nowNum) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pos.containsKey(String.valueOf(j) + column))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(mat,mat[j][column],j,column,pos);</span><br><span class="line">                    <span class="type">Pos</span> <span class="variable">pos1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pos</span>();</span><br><span class="line">                    pos1.setNumber(nowNum);</span><br><span class="line">                    pos1.setLine(line);</span><br><span class="line">                    pos1.setColumn(column);</span><br><span class="line">                    pos1.setMinPath(temp + <span class="number">1</span>);</span><br><span class="line">                    maxList.add(pos1);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Pos</span> <span class="variable">tempPos</span> <span class="operator">=</span> pos.get(String.valueOf(j) + column);</span><br><span class="line">                <span class="type">Pos</span> <span class="variable">pos1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pos</span>();</span><br><span class="line">                pos1.setNumber(nowNum);</span><br><span class="line">                pos1.setLine(line);</span><br><span class="line">                pos1.setColumn(column);</span><br><span class="line">                pos1.setMinPath(tempPos.getMinPath() + <span class="number">1</span>);</span><br><span class="line">                maxList.add(pos1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxList.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Pos</span> <span class="variable">pos1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pos</span>();</span><br><span class="line">            pos1.setColumn(column);</span><br><span class="line">            pos1.setLine(line);</span><br><span class="line">            pos1.setNumber(nowNum);</span><br><span class="line">            pos1.setMinPath(<span class="number">1</span>);</span><br><span class="line">            pos.put(String.valueOf(line) + column,pos1);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxList.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Pos&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Pos p1, Pos p2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p2.getMinPath() - p1.getMinPath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Pos</span> <span class="variable">maxPos</span> <span class="operator">=</span> maxList.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//        String key = String.valueOf(maxPos.getLine()) + maxPos.getColumn();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(line) + column;</span><br><span class="line">        <span class="keyword">if</span> (!pos.containsKey(key))&#123;</span><br><span class="line">            pos.put(key,maxPos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPos.getMinPath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pos</span> &#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">int</span> line;</span><br><span class="line">    <span class="type">int</span> column;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMinPath</span><span class="params">(<span class="type">int</span> minPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minPath = minPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> minPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLine</span><span class="params">(<span class="type">int</span> line)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.line = line;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getColumn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> column;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColumn</span><span class="params">(<span class="type">int</span> column)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.column = column;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="官方题解-1"><a href="#官方题解-1" class="headerlink" title="官方题解"></a>官方题解</h3><h4 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h4><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406202124571.png" alt="image-20240620212415601"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxIncreasingCells</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">        Map&lt;Integer, List&lt;<span class="type">int</span>[]&gt;&gt; mp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, List&lt;<span class="type">int</span>[]&gt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] row = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] col = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                mp.putIfAbsent(mat[i][j], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="type">int</span>[]&gt;());</span><br><span class="line">                mp.get(mat[i][j]).add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(mp.keySet());</span><br><span class="line">        Collections.sort(keys);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> key : keys) &#123;</span><br><span class="line">            List&lt;<span class="type">int</span>[]&gt; pos = mp.get(key);</span><br><span class="line">            List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(); <span class="comment">// 存放相同数值的答案，便于后续更新 row 和 col</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] arr : pos) &#123;</span><br><span class="line">                res.add(Math.max(row[arr[<span class="number">0</span>]], col[arr[<span class="number">1</span>]]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pos.size(); i++) &#123;</span><br><span class="line">                <span class="type">int</span>[] arr = pos.get(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> res.get(i);</span><br><span class="line">                row[arr[<span class="number">0</span>]] = Math.max(row[arr[<span class="number">0</span>]], d);</span><br><span class="line">                col[arr[<span class="number">1</span>]] = Math.max(col[arr[<span class="number">1</span>]], d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(row).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="美丽下标对的数目"><a href="#美丽下标对的数目" class="headerlink" title="美丽下标对的数目"></a>美丽下标对的数目</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/number-of-beautiful-pairs/"   title="美丽下标对的数目"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>美丽下标对的数目</span></a></p><h3 id="自己解答-1"><a href="#自己解答-1" class="headerlink" title="自己解答"></a>自己解答</h3><div class="tip warning"><p>写一个函数用来判断两个数是不是互质，返回一个布尔值。为真则自变量加1，遍历完成之后返回。判断互质我采用了辗转相除法加上递归。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBeautifulPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.toString(nums[i]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">num_first</span> <span class="operator">=</span> num1.charAt(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.toString(nums[j]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">num_last</span> <span class="operator">=</span> num2.charAt(num2.length() - <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(isGcd(num_first,num_last)) &#123;</span><br><span class="line">                    res += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isGcd</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num1 == num2 &amp;&amp; num1 != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num_max</span> <span class="operator">=</span> getMaxNUm(num1,num2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num_min</span> <span class="operator">=</span> getMinNUm(num1,num2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">new_num</span> <span class="operator">=</span> num_max / num_min;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> num_max % num_min;</span><br><span class="line">        <span class="keyword">if</span>(remainder == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num_min == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> isGcd(getMaxNUm(new_num,num_min),remainder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxNUm</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinNUm</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 &gt; num2 ? num2 : num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong>只击败了5%的用户🤣</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406211552381.png" alt="image-20240621155225154"></p><p> 阿文</p><h3 id="官方题解-2"><a href="#官方题解-2" class="headerlink" title="官方题解"></a>官方题解</h3><p><strong>方法一：暴力枚举</strong></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406211556388.png" alt="image-20240621155621320"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBeautifulPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, n = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                nums[i] /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (gcd(nums[i], nums[j] % <span class="number">10</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：哈希表</strong></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406211556740.png" alt="image-20240621155655669"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBeautifulPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>; y &lt;= <span class="number">9</span>; y++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (gcd(x % <span class="number">10</span>, y) == <span class="number">1</span>) &#123;</span><br><span class="line">                    res += cnt[y];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (x &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406211557351.png" alt="image-20240621155743266"></p><h2 id="检测大写字母"><a href="#检测大写字母" class="headerlink" title="检测大写字母"></a>检测大写字母</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/detect-capital/"   title="检测大写字母"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>检测大写字母</span></a></p><p>我们定义，在以下情况时，单词的大写用法是正确的：</p><ul><li>全部字母都是大写，比如 <code>&quot;USA&quot;</code> 。</li><li>单词中所有字母都不是大写，比如 <code>&quot;leetcode&quot;</code> 。</li><li>如果单词不只含有一个字母，只有首字母大写， 比如 <code>&quot;Google&quot;</code> 。</li></ul><p>给你一个字符串 <code>word</code> 。如果大写用法正确，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p>输入：word &#x3D; “USA”<br>输出：true</p><p><strong>示例 2：</strong></p><p>输入：word &#x3D; “FlaG”<br>输出：false</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>word</code> 由小写和大写英文字母组成</li></ul><h3 id="自己解答-2"><a href="#自己解答-2" class="headerlink" title="自己解答"></a>自己解答</h3><div class="tip warning"><p>想法是分三种情况考虑。第一种是全都大写，第二种是第一个字母大写其他小写，第三种是全部小写。分别实现即可</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">detectCapitalUse</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="comment">// 若为一个字母直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (word.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断第一个字母是否是大写</span></span><br><span class="line">        <span class="keyword">if</span> (checkBig(word.charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">            <span class="comment">// 根据第二个字母是否是大写区分出前两种情况</span></span><br><span class="line">            <span class="keyword">if</span> (checkBig(word.charAt(<span class="number">1</span>))) &#123;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!checkBig(word.charAt(i))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(checkBig(word.charAt(i))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 若第一个字母不是大写，则需要所有字母都为小写</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(checkBig(word.charAt(i))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 定义函数用于判断字符是否是大写字母</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">checkBig</span><span class="params">(<span class="type">char</span> word)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (word &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; word &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="官方题解-3"><a href="#官方题解-3" class="headerlink" title="官方题解"></a>官方题解</h3><p><strong>方法一：根据题目要求实现</strong></p><p>思路和算法</p><p>根据题目要求，若单词的大写用法正确，则需要满足：</p><p>若第 $1$个字母为大写，则其他字母必须均为大写或均为小写，即其他字母必须与第 $2$ 个字母的大小写相同；</p><p>若第 $1$ 个字母为小写，则其他字母必须均为小写。</p><p>根据以上规则，可以整理得到以下更简单的判断规则：</p><p>无论第 $1$ 个字母是否大写，其他字母必须与第 $2$ 个字母的大小写相同；</p><p>若第 $1$ 个字母为小写，则需额外判断第 $2$ 个字母是否为小写。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">detectCapitalUse</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="comment">// 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写</span></span><br><span class="line">        <span class="keyword">if</span> (word.length() &gt;= <span class="number">2</span> &amp;&amp; Character.isLowerCase(word.charAt(<span class="number">0</span>)) &amp;&amp; Character.isUpperCase(word.charAt(<span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; word.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLowerCase(word.charAt(i)) ^ Character.isLowerCase(word.charAt(<span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下一个更大元素-II"><a href="#下一个更大元素-II" class="headerlink" title="下一个更大元素 II"></a>下一个更大元素 II</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/next-greater-element-ii/"   title="下一个更大元素 II"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>下一个更大元素 II</span></a></p><p>给定一个循环数组 <code>nums</code> （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 *<code>nums</code> 中每个元素的 <strong>下一个更大元素</strong>。</p><p>数字 <code>x</code> 的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code> 。</p><p><strong>示例 1:</strong></p><p>输入: $nums &#x3D; [1,2,1]$<br>输出: $[2,-1,2]$<br>解释: 第一个 $1$ 的下一个更大的数是 $2$；<br>数字 $2$ 找不到下一个更大的数；<br>第二个 $1$ 的下一个最大的数需要循环搜索，结果也是 $2$。</p><p><strong>示例 2:</strong></p><p>输入: $nums &#x3D; [1,2,3,4,3]$<br>输出:$ [2,3,4,-1,4]$</p><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><h3 id="自己解答-3"><a href="#自己解答-3" class="headerlink" title="自己解答"></a>自己解答</h3><div class="tip warning"><p>整体思路是遍历整个数组，然后从第一个开始，判断出第一个之后的最大值就存在$ArrayList$里面，然后根据需要确定是否需要再次遍历$ArrayList$来确定最大值。</p></div><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">CHECK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxPos</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; maxNum = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class="line">                    maxNum.add(nums[j]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    CHECK = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (CHECK || i == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (maxNum.isEmpty()) &#123;</span><br><span class="line">                    MAX = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;maxNum.size();k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (maxNum.get(k) == -<span class="number">1</span> &amp;&amp; maxPos == k) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nums[i] == nums[k]) &#123;</span><br><span class="line">                            maxNum.add(-<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        maxNum.add(nums[k]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i] &lt; maxNum.get(k)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nums[i] &lt; nums[k]) &#123;</span><br><span class="line">                            maxNum.add(nums[k]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        maxNum.add(maxNum.get(k));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (k == maxNum.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        MAX = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                CHECK = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (MAX) &#123;</span><br><span class="line">                maxPos = i;</span><br><span class="line">                maxNum.add(-<span class="number">1</span>);</span><br><span class="line">                MAX = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[maxNum.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxNum.size(); i++) &#123;</span><br><span class="line">            res[i] = maxNum.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406241959474.png" alt="image-20240624195930951"></p><h3 id="官方解答"><a href="#官方解答" class="headerlink" title="官方解答"></a>官方解答</h3><p><strong>方法一：单调栈 + 循环数组</strong></p><p><strong>思路及算法</strong></p><p>我们可以使用单调栈解决本题。单调栈中保存的是下标，从栈底到栈顶的下标在数组 $nums$ 中对应的值是单调不升的。</p><p>每次我们移动到数组中的一个新的位置 $i$，我们就将当前单调栈中所有对应值小于 $nums[i]$ 的下标弹出单调栈，这些值的下一个更大元素即为 $nums[i]$​（证明很简单：如果有更靠前的更大元素，那么这些位置将被提前弹出栈）。随后我们将位置 $i$ 入栈。</p><p>但是注意到只遍历一次序列是不够的，例如序列 $[2,3,1]$，最后单调栈中将剩余 $[3,1]$，其中元素 $[1]$ 的下一个更大元素还是不知道的。</p><p>一个朴素的思想是，我们可以把这个循环数组「拉直」，即复制该序列的前 $n−1$ 个元素拼接在原序列的后面。这样我们就可以将这个新序列当作普通序列，用上文的方法来处理。</p><p>而在本题中，我们不需要显性地将该循环数组「拉直」，而只需要在处理时对下标取模即可。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(ret, -<span class="number">1</span>);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n * <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; nums[i % n]) &#123;</span><br><span class="line">                ret[stack.pop()] = nums[i % n];</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i % n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度: $O(n)$，其中 $n$ 是序列的长度。我们需要遍历该数组中每个元素最多 $2$ 次，每个元素出栈与入栈的总次数也不超过 $4$ 次。    </p><p>空间复杂度: $O(n)$，其中 $n$ 是序列的长度。空间复杂度主要取决于栈的大小，栈的大小至多为 $2n−1$。</p><h2 id="找到矩阵中的好子集"><a href="#找到矩阵中的好子集" class="headerlink" title="找到矩阵中的好子集"></a>找到矩阵中的好子集</h2><p>点击去力扣 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://leetcode.cn/problems/find-a-good-subset-of-the-matrix/"   title="找到矩阵中的好子集"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>找到矩阵中的好子集</span></a></p><p>给你一个下标从 <strong>0</strong> 开始大小为 <code>m x n</code> 的二进制矩阵 <code>grid</code> 。</p><p>从原矩阵中选出若干行构成一个行的 <strong>非空</strong> 子集，如果子集中任何一列的和至多为子集大小的一半，那么我们称这个子集是 <strong>好子集</strong>。</p><p>更正式的，如果选出来的行子集大小（即行的数量）为 k，那么每一列的和至多为 <code>floor(k / 2)</code> 。</p><p>请你返回一个整数数组，它包含好子集的行下标，请你将其 <strong>升序</strong> 返回。</p><p>如果有多个好子集，你可以返回任意一个。如果没有好子集，请你返回一个空数组。</p><p>一个矩阵 <code>grid</code> 的行 <strong>子集</strong> ，是删除 <code>grid</code> 中某些（也可能不删除）行后，剩余行构成的元素集合。</p><p><strong>示例 1：</strong></p><p>输入：$grid &#x3D; [[0,1,1,0],[0,0,0,1],[1,1,1,1]]$<br>输出：$[0,1]$<br>解释：我们可以选择第 $0$ 和第 $1$ 行构成一个好子集。<br>选出来的子集大小为 $2$ 。</p><ul><li>第 $0$ 列的和为 $0 + 0 &#x3D; 0$ ，小于等于子集大小的一半。</li><li>第 $1$ 列的和为 $1 + 0 &#x3D; 1 $，小于等于子集大小的一半。</li><li>第 $2$ 列的和为 $1 + 0 &#x3D; 1$ ，小于等于子集大小的一半。</li><li>第 $3$ 列的和为 $0 + 1 &#x3D; 1$ ，小于等于子集大小的一半。</li></ul><p><strong>示例 2：</strong></p><p>输入：$grid &#x3D; [[0]]$<br>输出：$[0]$<br>解释：我们可以选择第 $0$ 行构成一个好子集。<br>选出来的子集大小为 $1$ 。</p><ul><li>第 $0$ 列的和为 $0$ ，小于等于子集大小的一半。</li></ul><p><strong>示例 3：</strong></p><p>输入：$grid &#x3D; [[1,1,1],[1,1,1]]$<br>输出：$[]$<br>解释：没有办法得到一个好子集。</p><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m &lt;= 104</code></li><li><code>1 &lt;= n &lt;= 5</code></li><li><code>grid[i][j]</code> 要么是 <code>0</code> ，要么是 <code>1</code> 。</li></ul><h3 id="自己解法"><a href="#自己解法" class="headerlink" title="自己解法"></a>自己解法</h3><div class="tip warning"><p>想着用python来写的。我自己的思路是遍历取出两个行出来，使用python中的.T拿到其中一个的转置，然后看乘积是否大于等于1，若大于等于1则表示两个不满足条件，反则满足返回。但是对语法不熟悉，没有成功实现</p></div><h3 id="官方解法"><a href="#官方解法" class="headerlink" title="官方解法"></a>官方解法</h3><p>方法一：分类讨论</p><p>思路</p><p>对所选出来的行数进行分类讨论，有以下几种情况：</p><p>假设答案至少一行，那么需要这一行满足全为 $0$。</p><p>​假设答案至少两行，那么不存在一列这两行都是 $1$。分别用$ x$ 和 $y$ 表示这两行所表示的数，能推出至少存在两行 $x$&amp;$y&#x3D;&#x3D;0$。</p><p>​假设答案至少三行，那么这三行每一列加起来的和不超过 $1$。这个条件比两行的情况更严格，如果两行都找不到答案，那么一定没有三行的情况了。</p><p>​假设答案至少四行，那么这四行每一列加起来的和不超过 $2$。如果两行找不到答案，说明任选两行至少存在一列这两行都是 $1$。同时这一列这两行已经都是 $1$ 了，那么这一列的其他两行必须是 0 才满足条件。所以，当答案有四行的情况下，需要满足任选两行这一列都是 1 同时其他两行必须是 0 至少需要 $C^2_{4}&#x3D;6$ 列，但题意说矩阵的列数 $n&lt;&#x3D;5$，因此这种情况不存在。</p><p>​一般的，对于任意一行，假设答案至少需要选取 $k$ 行。考虑任选两行至少存在一列这两行都是 $1$ 的构造，一共需要 $k−1$ 对构造，当这一列选择了 $1$ 后，其他 $k−1$ 行最多有 $\frac{k}{2}-1$ 个 $1$，所以最多能贡献$\frac{k}{2}-1$个构造。因为 $\frac{k−1}{\frac{k}{2}-1}&gt;2$， 所以这一行至少需要 $3$ 个 $1$ 才能达到 $k−1$ 个构造，同时因为列数不超过 $5$，所以至多有 $2$ 列是 $0$。因此任意一行 $1$ 的个数比 $0$ 更多，进而推出任选 $k$ 行，$1 $的总数比 $0$ 更多，无法找到一个合法的构造满足题意。</p><p>综上所述，只需要考虑答案小于等于两行的情况。每行二进制所表示的数一共有 $2^n$ 种情况，其中 $n$ 为矩阵的列数。</p><p><strong>Java:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">goodSubsetofBinaryMatrix</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; mp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">st</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                st |= (grid[j][i] &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">            mp.put(st, j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mp.containsKey(<span class="number">0</span>)) &#123;</span><br><span class="line">            ans.add(mp.get(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry1 : mp.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> entry1.getKey(), i = entry1.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry2 : mp.entrySet()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> entry2.getKey(), j = entry2.getValue();</span><br><span class="line">                <span class="keyword">if</span> ((x &amp; y) == <span class="number">0</span>) &#123;</span><br><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                    list.add(Math.min(i, j));</span><br><span class="line">                    list.add(Math.max(i, j));</span><br><span class="line">                    <span class="keyword">return</span> list;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Python:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">goodSubsetofBinaryMatrix</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        mp = &#123;&#125;</span><br><span class="line">        m = <span class="built_in">len</span>(grid)</span><br><span class="line">        n = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            st = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                st |= (grid[j][i] &lt;&lt; i)</span><br><span class="line">            mp[st] = j</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> mp:</span><br><span class="line">            ans.append(mp[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">for</span> x, i <span class="keyword">in</span> mp.items():</span><br><span class="line">            <span class="keyword">for</span> y, j <span class="keyword">in</span> mp.items():</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (x &amp; y):</span><br><span class="line">                    <span class="keyword">return</span> [<span class="built_in">min</span>(i, j), <span class="built_in">max</span>(i, j)]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：$O(nm+C^2)$，其中 $m$ 为矩阵的行数，$n$ 为矩阵的列数，$C&#x3D;2^n $表示每一行所表示数的范围。</p><p>空间复杂度：$O(2^n)$，其中$ n $为矩阵的列数。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米SU7</title>
      <link href="/2024/06/07/%E5%B0%8F%E7%B1%B3SU7/"/>
      <url>/2024/06/07/%E5%B0%8F%E7%B1%B3SU7/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Yi421Q7R7?vd_source=3c345e27d8321a7372c0ef8871978426"   title="300万都买不来的情绪价值！小米SU7做到了！「 我在东北开电车-小米SU7 Max」"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>300万都买不来的情绪价值！小米SU7做到了！「 我在东北开电车-小米SU7 Max」</span></a></p><div class="tip warning"><p>看了发布会就觉得好帅，然后前一段时间专门去光环购物中心去看这个车，第一眼看到是真的帅啊。可惜在没钱的年纪就遇到了想买的车😒，然后约到了试驾，还专门去小米交付中心试驾了一下，体验真不错，是真的帅。B站看了这么多 SU7 的视频，这个UP的视频还是最有意思的。推荐！👍</p></div><div class="tip key"><p>这就是回头率啊，情绪价值拉满</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071119874.png" alt="image-20240607111941146"></p><div class="tip key"><p>我觉得这个人也好看🤣🤣🤣</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071121638.png" alt="image-20240607112119005"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071121042.png" alt="image-20240607112149613"></p><div class="tip key"><p>这加速都炸麦了，不过第一次感受这个有过山车的感觉。上次去重庆这边的交付中心试驾都吓我一跳，失重感非常强烈。</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071123854.png" alt="image-20240607112336391"></p><div class="tip key"><p>博主把车开去哈工大，粉丝体验专场，哈哈哈</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071124073.png" alt="image-20240607112441646"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071125591.png" alt="image-20240607112549073"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071126925.png" alt="image-20240607112605534"></p><div class="tip key"><p>带出去转一圈这几个哥们太搞笑了</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071126543.png" alt="image-20240607112630101"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071126032.png" alt="image-20240607112658504"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071127637.png" alt="image-20240607112712204"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071127976.png" alt="image-20240607112753427"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071128974.png" alt="image-20240607112816446"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071128118.png" alt="image-20240607112834628"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406071128029.png" alt="image-20240607112850466"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英国</title>
      <link href="/2024/05/30/%E8%8B%B1%E5%9B%BD/"/>
      <url>/2024/05/30/%E8%8B%B1%E5%9B%BD/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV17M4m1Z77h?vd_source=3c345e27d8321a7372c0ef8871978426"   title="【英国旅拍4k】 地平线4 | 死亡搁浅 | 穿越游戏世界！"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>【英国旅拍4k】 地平线4 | 死亡搁浅 | 穿越游戏世界！</span></a></p><div class="tip key"><ul><li>就这，我在屏幕前都能感受到的震撼···</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301834315.png" alt="image-20240530183418744"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301834623.png" alt="image-20240530183433064"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301834729.png" alt="image-20240530183442185"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301835356.png" alt="image-20240530183501849"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301835755.png" alt="image-20240530183515161"></p><div class="tip key"><ul><li>地平线4既视感，真熟悉啊</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301840989.png" alt="image-20240530184057458"></p><div class="tip key"><ul><li>真有这种纯天然草地的山吗，我纳闷为什么不长野草呢，好特别。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301843323.png" alt="image-20240530184334745"></p><div class="tip key"><p>这才是理想的生活</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301844132.png" alt="image-20240530184405010"></p><div class="tip key"><p>这是自由的味道</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301846730.png" alt="image-20240530184654497"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站网友的顶级文笔</title>
      <link href="/2024/05/30/B%E7%AB%99%E7%BD%91%E5%8F%8B%E7%9A%84%E9%A1%B6%E7%BA%A7%E6%96%87%E7%AC%94/"/>
      <url>/2024/05/30/B%E7%AB%99%E7%BD%91%E5%8F%8B%E7%9A%84%E9%A1%B6%E7%BA%A7%E6%96%87%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1E1421B7UK?vd_source=3c345e27d8321a7372c0ef8871978426"   title="B站网友的顶级文笔"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>B站网友的顶级文笔</span></a></p><div class="tip key"><ul><li>到现在啊，归家只是冬日，再无春夏秋</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301239886.png" alt="image-20240530123929958"></p><div class="tip key"><ul><li>前路迷惘呐</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301240150.png" alt="image-20240530124020357"></p><div class="tip key"><ul><li>相见越来越少，同事时间胜过亲人、朋友</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301241158.png" alt="image-20240530124123840"></p><div class="tip key"><ul><li>这真是生活。从意气风发，到油盐醋茶，印证了读书的路。书读的越多，越感叹生活不易。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301244853.png" alt="image-20240530124442540"></p><div class="tip key"><ul><li>想起了罗翔老师的一句话。最困难的事情是，跨域知道和做到的鸿沟。我们总是知道自己应该做什么，但从未做到。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301246820.png" alt="image-20240530124628282"></p><div class="tip key"><ul><li>从小就被追问自己的梦想是什么，到如今我仍没有答案。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301247123.png" alt="image-20240530124719610"></p><div class="tip key"><ul><li>每个人的回忆都是一部长篇小说。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301248341.png" alt="image-20240530124849946"></p><div class="tip key"><ul><li>好像从未见过春天，一生只有冬夏。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301249137.png" alt="image-20240530124938784"></p><div class="tip key"><ul><li>已经被禁锢了思想，束缚了手脚，成了随大流的普通人。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301250516.png" alt="image-20240530125050901"></p><div class="tip key"><ul><li>如今已经变成了，听着别人的梦想，心里竟是玩笑。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301252846.png" alt="image-20240530125206309"></p><div class="tip key"><ul><li>什么是故乡，故乡的人才是故乡。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301253385.png" alt="image-20240530125306871"></p><div class="tip key"><ul><li>卷也卷不过，躺也躺不平。</li></ul></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301254342.png" alt="image-20240530125409733"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>镰仓</title>
      <link href="/2024/05/29/%E9%95%B0%E4%BB%93/"/>
      <url>/2024/05/29/%E9%95%B0%E4%BB%93/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Fb421b7YH?vd_source=3c345e27d8321a7372c0ef8871978426"   title="感受镰仓：倒挂列车，江之岛，大海，沙滩，文化。"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>感受镰仓：倒挂列车，江之岛，大海，沙滩，文化。</span></a></p><div class="tip key"><p>倒挂列车，好像武汉光谷也有</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292240791.png" alt="image-20240529224010377"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292217880.png" alt="image-20240529221747356"></p><div class="tip key"><p>感觉这种装修风格挺特别的</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292218467.png" alt="image-20240529221854840"></p><div class="tip key"><p>好像我还没见过这种海边路唱的人，挺不错的</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292220910.png" alt="image-20240529222048125"></p><div class="tip key"><p>等我毕业一定要再去一次海边！！！</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292225609.png" alt="image-20240529222514114"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292225726.png" alt="image-20240529222526107"></p><div class="tip key"><p>好特别的视角，虽然不是那么的科技，但是有复古的味道</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292227802.png" alt="image-20240529222750277"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292228345.png" alt="image-20240529222808724"></p><div class="tip key"><p>这配音笑死我了，一定要去听一下这段的配音，17:25</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292228205.png" alt="image-20240529222851730"></p><div class="tip key"><p>海边真的好舒服，可惜是个内陆人。。。</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292231222.png" alt="image-20240529223115493"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闯进如梦般的樱花世界</title>
      <link href="/2024/05/29/%E9%97%AF%E8%BF%9B%E5%A6%82%E6%A2%A6%E8%88%AC%E7%9A%84%E6%A8%B1%E8%8A%B1%E4%B8%96%E7%95%8C/"/>
      <url>/2024/05/29/%E9%97%AF%E8%BF%9B%E5%A6%82%E6%A2%A6%E8%88%AC%E7%9A%84%E6%A8%B1%E8%8A%B1%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Tx4y1h7KV?vd_source=3c345e27d8321a7372c0ef8871978426"   title="闯进如梦般的樱花世界！"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>闯进如梦般的樱花世界！</span></a></p><div class="tip key"><p>看着这樱花烂漫的时间，我却还在工位上为代码发愁！</p></div><div class="tip key"><p>摘自评论：</p><p>​看着看着莫名落泪了。想到现在正是四月，窗外正是春光明媚，我却囿于日复一日的考试和高考将至的巨大压力中，少有片刻的喘息机会。想到现在也正是人生的春天，十八岁也正是最蓬勃的年纪，一路上却常常伴随着乌云和阴雨，少有阳光普照的日子。但我知道我一直是一个向往阳光的人，所以才会抓紧一个个明媚的春日午后，拿起相机定格下每一个转瞬即逝的瞬间；所以才会喜欢上那些像光一样照亮我生活的人。今天见到了久违的高一语文老师，他是我整个高中阶段所遇到最可亲可敬的一位老师。但是在高三学年开学前，他却生了一场大病，从那以后我就再没见过他，直到今天中午才时隔一个多学期再次见到他。他依然是老样子，面对学生时总是不吝啬笑容和鼓励。很难相信他刚刚经历过——甚至仍在经历着——病痛的折磨。也许人生就是这样吧，不光有春天，也有秋天；不光有和煦的微风和暖人的阳光，也有阴霾的日子和刺骨的寒。我又想起冯至的那段话“人们爱把青年比作春，这比喻是正确的。可是彼此的相似点与其说是青年人的晴朗有如春阳的明丽，倒不如从另一方面看，青年人的愁苦、青年人的生长，更像那在阴云暗淡的风里、雨里、寒里演变着的春。因为后者比前者更漫长、沉重而更有意义。”所以也许乌云和阴雨都是暂时的，经历过它们的冲刷与磨砺后变得坚韧并独立的我自会蜕变并迎来人生的夏天；又或者乌云和阴雨并不随人生阶段的转变而消失，它们会陪伴我的一生直至我的灵魂如烟散去，那我也就只好恭候它们每一次的到来，并珍惜每一次云销雨霁后的彩虹。最后我还想送给自己一句话：“路虽远，行则将至。”</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291850711.png" alt="image-20240529185018396"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291850436.png" alt="image-20240529185027205"></p><div class="tip key"><p>惬意</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291852816.png" alt="image-20240529185201469"></p><div class="tip key"><p>好帅的柴犬</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291853953.png" alt="image-20240529185340540"></p><div class="tip key"><p>人走了就不叫了，哈哈哈哈哈哈</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291854872.png" alt="image-20240529185404483"></p><div class="tip key"><p>这厕所能拉出屎吗？感觉被一万双眼睛盯着</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291857959.png" alt="image-20240529185720462"></p><div class="tip key"><p>这种风格还挺治愈的</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291858695.png" alt="image-20240529185807258"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291858481.png" alt="image-20240529185817077"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291859512.png" alt="image-20240529185903046"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291859607.png" alt="image-20240529185929212"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291900248.png" alt="image-20240529190043809"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291902502.png" alt="image-20240529190203910"></p><div class="tip key"><p>看起来貌似还不错</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291903824.png" alt="image-20240529190259958"></p><div class="tip key"><p>这一幕大赞！</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291904254.png" alt="image-20240529190451634"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291905086.png" alt="image-20240529190505462"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习笔记</title>
      <link href="/2024/05/29/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/29/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p>学习概览：</p><ol><li>基础篇<ul><li>初识JVM</li><li>字节码文件详解</li><li>Java 内存结构</li><li>垃圾回收</li><li>类的生命周期和类加载器</li></ul></li><li>实战篇<ul><li>内存泄漏<ul><li>概念学习</li><li>监控工具</li><li>产生原因</li><li>线上实战</li></ul></li><li>GC 调优</li><li>性能调优<ul><li>JMH 性能测试</li><li>线上实战</li></ul></li></ul></li><li>高级篇<ul><li>即时编译器 JIT</li><li>ASM 字节码增强</li><li>Java Agent 技术</li><li>ZGC </li><li>GraalVM<ul><li>功能介绍</li><li>入门案例</li><li>Spring Native</li><li>Web 应用</li></ul></li></ul></li><li>原理篇<ul><li>Java 对象布局</li><li>异常、反射原理</li><li>G1 垃圾回收器工作原理</li><li>编译器优化<ul><li>方法内联</li><li>逃逸分析</li></ul></li></ul></li><li>面试题<ul><li>常见的 JVM 参数</li><li>Tomcat 的类加载器</li><li>ThreadLocal 会内存泄露吗？</li><li>如何优化减少 Full GC</li><li>三色标记法是什么？</li></ul></li></ol><h2 id="初识-JVM"><a href="#初识-JVM" class="headerlink" title="初识 JVM"></a>初识 JVM</h2><p>JVM（Java Virtual Machine）: Java虚拟机</p><h3 id="JVM-的功能"><a href="#JVM-的功能" class="headerlink" title="JVM 的功能"></a>JVM 的功能</h3><p>解释和运行： 对字节码文件中的指令，实时的解释成机器码，让计算机执行</p><p>内存管理：</p><ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制，回收不再使用的对象</li></ul><p>即时编译（JIT）</p><ul><li>对热点代码进行优化，提升执行效率</li><li>Java 语言如果不做任何优化，性能不如C、C++等语言</li><li>目的是为了跨平台</li></ul><h3 id="常见的-JVM"><a href="#常见的-JVM" class="headerlink" title="常见的 JVM"></a>常见的 JVM</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405290945433.png" alt="image-20240529094548345"></p><h2 id="字节码文件详解"><a href="#字节码文件详解" class="headerlink" title="字节码文件详解"></a>字节码文件详解</h2><h3 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h3><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405290955343.png" alt="image-20240529095508295" style="zoom:50%;" /><h3 id="字节码文件的组成"><a href="#字节码文件的组成" class="headerlink" title="字节码文件的组成"></a>字节码文件的组成</h3><h4 id="以正确姿势打开文件"><a href="#以正确姿势打开文件" class="headerlink" title="以正确姿势打开文件"></a>以正确姿势打开文件</h4><ul><li>字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读。</li></ul><p>通过NotePad++ 使用十六进制插件查看class文件：</p><p>左边为地址，中间为十六进制数据，右边为编码</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405290959919.png" alt="image-20240529095935829"></p><p>推荐使用<a href="https://github.com/ingokegel/jclasslib/releases">jclasslib</a>工具查看字节码文件。</p><h4 id="字节码文件组成"><a href="#字节码文件组成" class="headerlink" title="字节码文件组成"></a>字节码文件组成</h4><p>基础信息：魔数、字节码文件对应的 Java 版本号访问标识（public final等等）、父类和接口</p><p>常量池：保存了字符串常量、类或接口名、字段名主要在字节码指令中使用</p><p>字段：当前类或接口声明的字段信息</p><p>方法：当前类或接口声明的方法信息转换成字节码指令</p><p>属性：类的属性，比如源码的文件名、内部类的列表等</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291027489.png" alt="image-20240529102734415"></p><p>魔数：</p><p>每个字节码文件开头的4位都是指定的，称为魔数</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291029930.png" alt="image-20240529102946836"></p><p>魔数的作用：</p><ul><li>文件是无法通过文件扩展名来确定文件类型的，文件扩展名可以随意修改，不影响文件的内容</li><li>软件使用文件的头几个字节（文件头）去校验文件的类型，如果软件不支持该种类型就会出错。</li></ul><p>常见的文件类型：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291032834.png" alt="image-20240529103207777"></p><h4 id="主副版本号"><a href="#主副版本号" class="headerlink" title="主副版本号"></a>主副版本号</h4><ul><li>主副版本号指的是编译字节码文件的 JDK 版本号，主版本号用来标识大版本号，JDK1.0-1.1使用了45.0-45.3，JDK1.2 是 46 之后每升级一个大版本就加1；副版本号是当主版本号相同时作为区分不同版本的标识，一般只需要关心主版本号</li><li>1.2之后大版本号计算方法就是：主版本号 - 44</li><li>版本号的作用主要是判断当前字节码的版本和运行时的 JDK 是否兼容</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291037021.png" alt="image-20240529103715970"></p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><ul><li>字节码文件中常量池的作用：避免相同的内容重复定义，节省空间。</li></ul><p>解释：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291049766.png" alt="image-20240529104949709"></p><p>在常量池中，一份字面量只存储一份，可是现在有字段名和字面量相同，在常量池中如何存储呢。</p><ul><li>将abc字面量存入常量池中，并在常量池中存储一份String类型的字面量，引用到abc的字面量，a1和a2再引用这份String类型的字面量。</li><li>而变量abc的字段名是直接引用abc字面量，这样就节省了空间。</li></ul><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291053586.png" alt="image-20240529105319526" style="zoom: 50%;" /><ul><li>常量池中的数据都有一个编号，编号从1开始。在字段或者字节码指令中通过编号可以快速找到对应的数据。</li><li>字节码指令中通过编号引用到常量池的过程称之为&#x3D;&#x3D;符号引用&#x3D;&#x3D;</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291055093.png" alt="image-20240529105507030"></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>局部变量表</p><ul><li>数组为0的位置存储的函数参数args，根据声明顺序生成局部变量表下标</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291100182.png" alt="image-20240529110059147"></p><ul><li><p>iconst_0 将常量 0 放入操作数栈</p></li><li><p>istore_1 将操作数栈的数据取出放在局部变量表数组中下标为1的位置（弹出，操作数栈的数据销毁）</p></li><li><p>iload_1 将局部变量表数组中下标为1的位置的数据放入操作数栈（复制，局部变量表的数据保留）</p></li><li><p>iadd 将操作数栈中最上面的两个值相加，并将结果存入操作数栈中</p></li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291109804.png" alt="image-20240529110956718"></p><p>从字节码文件的层面解释 i &#x3D; i++：</p><p>将i++翻译为字节码文件之后，语句为：</p><ul><li>iinc 1 by 1：表示把局部变量表中下标为1的位置的数据加 1，并且此操作不进入操作数栈，是直接在局部变量表中完成。</li></ul><p>所以最初将0放入了操作数栈，然后存入局部变量表，然后局部变量表下标为 1 的数据 0 加 1，变成了 1，然后 istore_1 将操作数栈中的 0 存入 局部变量表中下标为 1 的位置，所以结果为 0</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291115133.png" alt="image-20240529111535071"></p><p>++i 同理：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291116570.png" alt="image-20240529111632503"></p><h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><p>用法见官网 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://arthas.aliyun.com/doc/"   title="Arthas官方文档"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Arthas官方文档</span></a></p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301341818.png" alt="image-20240530134140680"></p><h3 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h3><ul><li>第一步是&#x3D;&#x3D;类加载器&#x3D;&#x3D;根据类的全限定名通过不同的渠道以二进制的方式获取字节码信息。&#x3D;&#x3D;程序员可以使用Java代码拓展的不同的渠道&#x3D;&#x3D;。</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301345159.png" alt="image-20240530134516063"></p><p>控制开发者访问数据的范围</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405301347223.png" alt="image-20240530134739135"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API开发平台</title>
      <link href="/2024/05/28/API%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
      <url>/2024/05/28/API%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="API-开放平台"><a href="#API-开放平台" class="headerlink" title="API 开放平台"></a>API 开放平台</h1><p>背景：</p><ol><li>前端开发需要用到后端接口</li><li>使用现成的系统的功能（<a href="http://api.btstu.cn/%EF%BC%89">http://api.btstu.cn/）</a></li></ol><p>做一个 API 接口平台：</p><ol><li>防止攻击（安全性）</li><li>不能随便调用（限制、开通）</li><li>统计调用次数</li><li>计费</li><li>流量保护</li><li>API 接入</li></ol><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>做一个提供 API 接口调用的平台，用户可以注册登录，开通接口调用权限。用户可以使用接口，并且每次调用会进行统计。管理员可以发布接口、下线接口、接入接口，以及可视化接口的调用情况、数据分析。</p><h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405282030600.png" alt="image-20240528203059561"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端：</p><ol><li>Ant Design Pro</li><li>React</li><li>Ant Design Procomponents</li><li>Umi</li><li>Umi Request (Axios 的封装)</li></ol><p>后端：</p><ol><li>Java 、Spring Boot</li><li>Spring Boot Starter （SDK 开发）</li><li>？？？</li></ol><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>管理员可以对接口信息进行增删改查</li><li>用户可以访问前台，查看接口信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打工人的进化史</title>
      <link href="/2024/05/28/%E6%89%93%E5%B7%A5%E4%BA%BA%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/"/>
      <url>/2024/05/28/%E6%89%93%E5%B7%A5%E4%BA%BA%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1YZ421J75H?vd_source=3c345e27d8321a7372c0ef8871978426"   title="用100万+张照片，拍下中国打工人的命运迁徙"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>用100万+张照片，拍下中国打工人的命运迁徙</span></a></p><div class="tip key"><p>在我看来，这些是经济发展中付出辛勤劳动的人们。干了几十年了，生活不过还是底层，还是为了温饱而奔波。再看如今的社会环境，随处可见的不买五险一金的企业，随处可见的压榨劳动人民的工厂，纸上实现的双休制度，谁知道是不是监管的问题呢，或许本就是说说而已。都说报警是人生的第一课，人民警察是不是人民的呢😁。苦难不值得被歌颂</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281921557.png" alt="image-20240528192150039"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281926248.png" alt="image-20240528192616571"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281927394.png" alt="image-20240528192659876"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人总是喜欢带着滤镜看别人生活，却用放大镜看自己的烦恼</title>
      <link href="/2024/05/28/%E4%BD%A0%E6%83%B3%E6%B4%BB%E5%87%BA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
      <url>/2024/05/28/%E4%BD%A0%E6%83%B3%E6%B4%BB%E5%87%BA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1pw4m197yq?vd_source=3c345e27d8321a7372c0ef8871978426"   title="人总是喜欢带着滤镜看别人生活，却用放大镜看自己的烦恼"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>人总是喜欢带着滤镜看别人生活，却用放大镜看自己的烦恼</span></a></p><p>外卖员羡慕直播不用风吹日晒</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281904426.png" alt="image-20240528190422145"></p><p>直播的羡慕敲代码的可以坐办公室</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281904963.png" alt="image-20240528190457578"></p><p>程序员羡慕外卖员不加班有生活</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281905052.png" alt="image-20240528190537835"></p><p>都是一直羡慕别人的生活</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281906455.png" alt="image-20240528190616030"></p><p>慢慢进步就好了😁</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日打卡</title>
      <link href="/2024/05/28/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/"/>
      <url>/2024/05/28/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="每日打卡"><a href="#每日打卡" class="headerlink" title="每日打卡"></a>每日打卡</h1><div class="tip info"><p>从此开始记录每日的学习进展 </p></div><h2 id="2024年5月28日"><a href="#2024年5月28日" class="headerlink" title="2024年5月28日"></a>2024年5月28日</h2><div class="tip key"><p><strong>健康：</strong></p><ul><li>肚子疼了半个月了，准备周末去挂号检查一下</li><li>感觉身体状况不佳</li></ul><p><strong>学习：</strong></p><ul><li>今天翻了许多的文献，还是对这个算法怎么做没有思路</li><li>API 开放平台看了一些，因为电脑跑着爬虫，所以啥也干不了</li></ul></div><h2 id="2024年5月29日"><a href="#2024年5月29日" class="headerlink" title="2024年5月29日"></a>2024年5月29日</h2><div class="tip key"><p><strong>学习：</strong></p><ul><li>看了看眼睛的构成，知道了视网膜分割算法原理是检测每个像素点是否为血管从而完成分割的。但是还是不知道我这个屈光转裸眼怎么处理，害。</li><li>把伙伴匹配系统的代码拷过来继续做了，结果整了一晚上还是没有解决跨域问题，真是非常的离谱啊…</li><li>单词完成打卡，40个，过六级！</li></ul></div><div class="note warning flat"><p>warning 都停了半个月了···</p></div><h2 id="2024年6月18日"><a href="#2024年6月18日" class="headerlink" title="2024年6月18日"></a>2024年6月18日</h2><p><strong>计划：</strong></p><ol><li>完成一章 python 书籍的修改（下午 5 点前完成）</li><li>看 SGL 算法的具体实现，寻找特征的提取方式（6 - 9）</li><li>完成单词打卡</li><li>继续完成伙伴匹配系统 （9 - 11）</li></ol><p><strong>完成情况</strong></p><ol><li>书籍修改一章完成</li><li>算法没看。。。</li><li>单词没记完</li><li>这个系统也没做</li><li>电脑太卡了，看了会儿现代操作系统</li></ol><h2 id="2024年6月19日"><a href="#2024年6月19日" class="headerlink" title="2024年6月19日"></a>2024年6月19日</h2><p>今天忘了计划了。。</p><ol><li>基本上完成了书籍的修改任务</li><li>把临时给我的信息补全代码写出来了，刚测好。明天还得跟工程师对接一下接口</li><li>之前爬必应的代码找不到了，又得重写</li><li>单词没记</li></ol><h2 id="2024年6月24日"><a href="#2024年6月24日" class="headerlink" title="2024年6月24日"></a>2024年6月24日</h2><p>上个星期一直在改书，就没有写每日计划。</p><p>新的一周又开始了。</p><p><strong>计划：</strong></p><ol><li>上午复习英语，下午要考试了。</li><li>考完试之后继续学习那个深度学习的书。</li><li>晚上刷力扣的每日一题</li><li>记单词</li></ol><p><strong>完成情况：</strong></p><ol><li>英语考试完成。</li><li>深度学习的书看完了引言和预备知识。明天开始看线性神经网络。</li><li>完成了力扣每日一题。</li><li>完成记单词。</li></ol><h2 id="2024年6月25日"><a href="#2024年6月25日" class="headerlink" title="2024年6月25日"></a>2024年6月25日</h2><p><strong>计划：</strong></p><ol><li>开始学习线性神经网络，今日目标是把线性神经网络、多层感知机、深度学习计算学完。</li><li>完成力扣的每日一题</li><li>学一小时Python</li><li>单词打卡</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屈光转裸眼算法研究记录</title>
      <link href="/2024/05/28/%E5%B1%88%E5%85%89%E8%BD%AC%E8%A3%B8%E7%9C%BC%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/05/28/%E5%B1%88%E5%85%89%E8%BD%AC%E8%A3%B8%E7%9C%BC%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>记录从头开始的学术研究过程 </p></div><h2 id="ChatGPT-建议"><a href="#ChatGPT-建议" class="headerlink" title="ChatGPT 建议"></a>ChatGPT 建议</h2><p>问题：我看了视网膜血管分割的原理，是判断每个像素点是否为血管从而完成分割。而我现在有一个算法任务，需要根据眼底图像和屈光度数生成裸眼图像，我看了许久还是没有思路，请你帮我想想从什么角度去完成此算法</p><h4 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><p>这听起来是一个有趣但也挑战性的算法任务！要根据眼底图像和屈光度数生成裸眼图像，你可以考虑以下几个方向：</p><ol><li><strong>图像处理与分割</strong>：首先，你可能需要对眼底图像进行预处理和分割，以便提取出感兴趣的特征，比如眼球边缘、视网膜等。这可能涉及到图像增强、边缘检测、分割算法等技术。</li><li><strong>屈光度数信息融合</strong>：屈光度数是对眼球光学系统的描述，可以通过屈光度数信息来推断眼睛的折射、散光等情况。你可以尝试将这些信息融合到图像处理的过程中，比如根据不同的屈光度数调整图像的对比度、亮度等参数，以模拟不同屈光度的视觉效果。</li><li><strong>视觉仿真与模型构建</strong>：考虑构建一个视觉仿真模型，该模型能够根据眼底图像和屈光度数生成对应的裸眼图像。这可能涉及到机器学习、深度学习等技术，你可以尝试使用已有的数据集进行训练，以学习眼底图像和屈光度数之间的关联，然后生成裸眼图像。</li><li><strong>医学知识与专家咨询</strong>：考虑到眼睛的复杂结构和视觉系统，如果可能的话，最好咨询眼科专家或医生，了解更多关于眼底图像、屈光度数和裸眼图像之间的关系，以及可能需要考虑的其他因素。</li></ol><p>综合考虑以上几点，你可以尝试设计一个综合利用图像处理、屈光度数信息和机器学习技术的算法，以实现根据眼底图像和屈光度数生成裸眼图像的目标。希望这些想法能够给你一些启发！</p><h2 id="眼底图像组成"><a href="#眼底图像组成" class="headerlink" title="眼底图像组成"></a>眼底图像组成</h2><p><strong>视盘(optic disc, OD)：</strong></p><ul><li>全称视神经盘，也叫视神经乳头，视网膜由黄斑向鼻侧约3mm处有一直径约1.5mm，境界清楚的淡红色圆盘状结构，称为视神经盘，简称视盘，如同一个盘子。</li></ul><p><strong>视杯（optic cup，OC）：</strong></p><ul><li>眼底所见视乳头有一个正常的生理性凹陷叫视杯（optic cup），如同一个杯子。杯子与盘子的直径之比就叫杯盘比，即C&#x2F;D。正常C&#x2F;D在0.3左右且一般不超过0.5。</li></ul><p><strong>视网膜中央动脉、静脉：</strong></p><ul><li>从视盘发出、放射状走形的大血管。其中，动脉呈鲜红色，静脉呈暗红色，动脉与静脉管径之比为2:3。</li></ul><p><strong>黄斑部：</strong></p><ul><li>位于眼球后极正中部，大小约一个视盘或稍大，无血管，其中心有一针尖大的反光点称中心凹光反射。</li></ul><p><strong>视网膜：</strong></p><ul><li>视网膜为一层神经组织构成的薄膜，是眼球壁的最内层。正常视网膜是无色透明的，因为其下的脉络膜充满血管，双眼眼底照相时视网膜呈均匀的深桔红色。</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281011996.png" alt="image-20240528101137886"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 算法研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常踩坑</title>
      <link href="/2024/05/15/%E6%97%A5%E5%B8%B8%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/05/15/%E6%97%A5%E5%B8%B8%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>记录在工作中不经意遇到的离谱bug </p></div><h1 id="日常踩坑"><a href="#日常踩坑" class="headerlink" title="日常踩坑"></a>日常踩坑</h1><h2 id="pycharm无法激活conda环境"><a href="#pycharm无法激活conda环境" class="headerlink" title="pycharm无法激活conda环境"></a>pycharm无法激活conda环境</h2><p>点击终端的时候，直接报错无法激活conda环境。并且已经设置了环境变量，且在自带的终端中可以激活。</p><p>解决方法：</p><p>​打开 Anaconda Prompt</p><p>​输入命令 conda init powershell</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意大利 · 多洛米蒂</title>
      <link href="/2024/05/13/%E6%84%8F%E5%A4%A7%E5%88%A9%20%C2%B7%20%E5%A4%9A%E6%B4%9B%E7%B1%B3%E8%92%82/"/>
      <url>/2024/05/13/%E6%84%8F%E5%A4%A7%E5%88%A9%20%C2%B7%20%E5%A4%9A%E6%B4%9B%E7%B1%B3%E8%92%82/</url>
      
        <content type="html"><![CDATA[<h1 id="意大利-·-多洛米蒂"><a href="#意大利-·-多洛米蒂" class="headerlink" title="意大利 · 多洛米蒂"></a>意大利 · 多洛米蒂</h1><p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1mw411a7So?vd_source=3c345e27d8321a7372c0ef8871978426"   title="现实版魔戒世界！"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>现实版魔戒世界！</span></a></p><h2 id="阿卑斯山下的骏马"><a href="#阿卑斯山下的骏马" class="headerlink" title="阿卑斯山下的骏马"></a>阿卑斯山下的骏马</h2><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132308893.png" alt="image-20240513230804757" style="zoom:80%;" /><h2 id="121"><a href="#121" class="headerlink" title="121"></a>121</h2><blockquote><p>好辽阔壮观的地貌啊，显得我们真是非常渺小的。埋个伏笔，后面有另一番风景。</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132310250.png" alt="image-20240513231045955"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132310042.png" alt="image-20240513231058738"></p><h2 id="山峰山"><a href="#山峰山" class="headerlink" title="山峰山"></a>山峰山</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132314682.png" alt="image-20240513231442327"></p><blockquote><p>这种旅行太惬意了。碰个杯</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132316570.png" alt="image-20240513231645316"></p><blockquote><p>这个一看就是中国人去贴的。哈哈哈哈哈</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132318748.png" alt="image-20240513231815469"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132318082.png" alt="image-20240513231845941"></p><h2 id="奇幻天象"><a href="#奇幻天象" class="headerlink" title="奇幻天象"></a>奇幻天象</h2><blockquote><p>前方烟雾弹</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132319024.png" alt="image-20240513231950865"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132321796.png" alt="image-20240513232151682"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132322175.png" alt="image-20240513232247011"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132323078.png" alt="image-20240513232325012"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132323553.png" alt="image-20240513232335252"></p><h2 id="伏笔"><a href="#伏笔" class="headerlink" title="伏笔"></a>伏笔</h2><blockquote><p>魔戒山的另一番风味</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132326044.png" alt="image-20240513232630695"></p><blockquote><p>up的头发立起来了，是有被雷劈的风险的。太危险了</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132327436.png" alt="image-20240513232732177"></p><blockquote><p>无人机寄了</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132328455.png" alt="image-20240513232842792"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132329163.png" alt="image-20240513232903410"></p><h2 id="云顶天宫"><a href="#云顶天宫" class="headerlink" title="云顶天宫"></a>云顶天宫</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330968.png" alt="image-20240513233004048"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330436.png" alt="image-20240513233010814"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330267.png" alt="image-20240513233021628"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330232.png" alt="image-20240513233049474"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云旅行 - 伊斯坦布尔</title>
      <link href="/2024/05/12/%E4%BA%91%E6%97%85%E8%A1%8C-%E4%BC%8A%E6%96%AF%E5%9D%A6%E5%B8%83%E5%B0%94/"/>
      <url>/2024/05/12/%E4%BA%91%E6%97%85%E8%A1%8C-%E4%BC%8A%E6%96%AF%E5%9D%A6%E5%B8%83%E5%B0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="伊斯坦布尔"><a href="#伊斯坦布尔" class="headerlink" title="伊斯坦布尔"></a>伊斯坦布尔</h1><p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Km421j7v5?vd_source=3c345e27d8321a7372c0ef8871978426"   title="伊斯坦布尔"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>伊斯坦布尔</span></a></p><h2 id="早餐"><a href="#早餐" class="headerlink" title="早餐"></a>早餐</h2><p>红茶、无限供应的面包、番茄炒蛋（土耳其版）</p><blockquote><p>感觉这个面包没有盐味…</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122242097.png"/></div></div><h2 id="海鸥"><a href="#海鸥" class="headerlink" title="海鸥"></a>海鸥</h2><blockquote><p>有机会一定要去看看海鸥和这波光粼粼的海面！</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122248921.png" alt="image-20240512224833499"></p><h2 id="圣索菲亚大教堂（Hagia-Sophia）"><a href="#圣索菲亚大教堂（Hagia-Sophia）" class="headerlink" title="圣索菲亚大教堂（Hagia Sophia）"></a>圣索菲亚大教堂（Hagia Sophia）</h2><blockquote><p>看起来好辉煌，充满时代的味道</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122258493.png"/></div></div><blockquote><p>清真寺要围头发，还蛮特别的</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122253182.png"/></div></div><h2 id="礼拜"><a href="#礼拜" class="headerlink" title="礼拜"></a>礼拜</h2><blockquote><p>这是真礼拜！看来我过的是假的礼拜天。还满壮观的。</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122255620.png" alt="image-20240512225502220"></p><h2 id="蓝色清真寺"><a href="#蓝色清真寺" class="headerlink" title="蓝色清真寺"></a>蓝色清真寺</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122300281.png" alt="image-20240512230032090"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122300980.png" alt="image-20240512230059627"></p><h2 id="奇特方式外卖！"><a href="#奇特方式外卖！" class="headerlink" title="奇特方式外卖！"></a>奇特方式外卖！</h2><blockquote><p>外国竟然也这样取外卖，果然人都是懒的^-^</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122304731.png" alt="image-20240512230446449"></p><h2 id="摆摊"><a href="#摆摊" class="headerlink" title="摆摊"></a>摆摊</h2><blockquote><p>出国摆摊就现在！</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122306615.png" alt="image-20240512230628241"></p><h2 id="下午茶"><a href="#下午茶" class="headerlink" title="下午茶"></a>下午茶</h2><blockquote><p>说的是土耳其下午茶都是甜食，看这样子是甜得不得了。</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122308438.png" alt="image-20240512230832281"></p><h2 id="黄昏"><a href="#黄昏" class="headerlink" title="黄昏"></a>黄昏</h2><blockquote><p>好喜欢这种日落海边的感觉！一个内陆人民对海的执念，心旷神怡</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122309936.png" alt="image-20240512230946627"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122310190.png" alt="image-20240512231012012"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122310877.png" alt="image-20240512231024689"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openCV 学习</title>
      <link href="/2024/05/12/openCV%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/05/12/openCV%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>介绍：用于记录自己学习 openCV 的理论笔记 </p></div><h1 id="openCV笔记"><a href="#openCV笔记" class="headerlink" title="openCV笔记"></a>openCV笔记</h1><h2 id="图像读取"><a href="#图像读取" class="headerlink" title="图像读取"></a>图像读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv_show</span>(<span class="params">name,img</span>):</span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;cat&#x27;</span>, img)</span><br><span class="line"><span class="comment"># img = cv2.imread(&#x27;cat.png&#x27;,cv2.IMREAD_GRAYSCALE)</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>,<span class="number">0</span>) <span class="comment">#读取灰度图像</span></span><br><span class="line">cv_show(<span class="string">&#x27;cat&#x27;</span>, img)</span><br><span class="line">imgType = <span class="built_in">type</span>(img)     <span class="comment"># 图像存储类型</span></span><br><span class="line">xiangSuNum = img.size  <span class="comment"># 像素个数</span></span><br><span class="line">insideType = img.dtype  <span class="comment"># 数据类型</span></span><br></pre></td></tr></table></figure><h2 id="视频读取"><a href="#视频读取" class="headerlink" title="视频读取"></a>视频读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">Video = cv2.VideoCapture(<span class="string">&#x27;test.mp4&#x27;</span>)</span><br><span class="line"><span class="comment"># 检查是否正确打开</span></span><br><span class="line"><span class="keyword">if</span> Video.isOpened():</span><br><span class="line">    isOpen, frame = Video.read() <span class="comment"># 读取视频的第一帧，isOpen是布尔值，判断是否正常打开。frame为读取第一帧的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    isOpen = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    ret, frame = Video.read()</span><br><span class="line">    <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) <span class="comment"># 转为灰度帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;result&#x27;</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">10</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:<span class="comment"># 27是ACSII码的退出键 waitKey(10)值指定处理完一帧后的等待时间</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">Video.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="截取部分图像数据"><a href="#截取部分图像数据" class="headerlink" title="截取部分图像数据"></a>截取部分图像数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------------------截取部分图像数据----------------------------------</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">cat = img[<span class="number">0</span>:<span class="number">500</span>,<span class="number">0</span>:<span class="number">500</span>] <span class="comment"># 从左上角开始计算</span></span><br><span class="line">cv_show(<span class="string">&#x27;cat&#x27;</span>,cat)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131546717.png" alt="image-20240513154649550"></p><h2 id="颜色通道提取"><a href="#颜色通道提取" class="headerlink" title="颜色通道提取"></a>颜色通道提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">b, g, r = cv2.split(img) <span class="comment"># # 将图像拆分为bgr三通道</span></span><br><span class="line">img = cv2.merge((b, g, r)) <span class="comment"># 将拆出来的 bgr重写为一个图像</span></span><br><span class="line"><span class="comment"># 只保留R</span></span><br><span class="line">cur_img = img.copy()</span><br><span class="line">cur_img[:, :, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">cur_img[:, :, <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">cv_show(<span class="string">&#x27;img&#x27;</span>, cur_img)</span><br><span class="line"><span class="comment"># 其他两个通道同理</span></span><br></pre></td></tr></table></figure><h2 id="边界填充"><a href="#边界填充" class="headerlink" title="边界填充"></a>边界填充</h2><blockquote><p> 如果实际的图像与需求大小不符，可以将图像边缘进行填充</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">top_size, bottom_size, left_size, right_size = (<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>) <span class="comment"># 设置上下左右的填充值</span></span><br><span class="line">replicate = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REPLICATE)</span><br><span class="line">reflect = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT)</span><br><span class="line">reflect101 = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT_101)</span><br><span class="line">wrap = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_WRAP)</span><br><span class="line">constant = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_CONSTANT,value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplot(<span class="number">231</span>),plt.imshow(img,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Original&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">232</span>),plt.imshow(replicate,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Replicate&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">233</span>),plt.imshow(reflect,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Reflect&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">234</span>),plt.imshow(reflect101,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Reflect101&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">235</span>),plt.imshow(wrap,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Wrap&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">236</span>),plt.imshow(constant,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Constant&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131616087.png" alt="Snipaste_2024-05-13_16-15-29"></p><h2 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img_cat = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">img_dog = cv2.imread(<span class="string">&#x27;dog.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 假设cat图像尺寸为(414,500,3)</span></span><br><span class="line"><span class="comment"># 假设dog图像尺寸为(500,500,3) 就需要先将图像调整为相同尺寸</span></span><br><span class="line">img_dog = cv2.resize(img_dog,(<span class="number">414</span>,<span class="number">500</span>))</span><br><span class="line">res = cv2.addWeighted(img_cat,<span class="number">0.4</span>,img_dog,<span class="number">0.6</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret,dst = cv2.threshold(src,thresh,maxval,type)</span></span><br><span class="line"><span class="comment"># src:输入图像 thresh：阈值(实际的值，不是百分比) maxval：最大可能值（一般为255） type:(怎么判断阈值，判断之后怎么处理)</span></span><br><span class="line"><span class="comment"># cv2.THRESH_BINARY 超过阈值部分取maxval(最大值)，否则取0  相当于把亮的地方取255变为白点，暗的地方取0变为黑点，突出主体</span></span><br><span class="line"><span class="comment"># cv2.THRESH_BINARY_INV THRESH_BINARY的反转</span></span><br><span class="line"><span class="comment"># cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变</span></span><br><span class="line"><span class="comment"># cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0</span></span><br><span class="line"><span class="comment"># cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img_cat = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">img_gary = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">ret, thresh1 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">ret, thresh2 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line">ret, thresh3 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)</span><br><span class="line">ret, thresh4 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)</span><br><span class="line">ret, thresh5 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)</span><br><span class="line">titles = [<span class="string">&#x27;Original&#x27;</span>, <span class="string">&#x27;BINARY&#x27;</span>, <span class="string">&#x27;BINARY_INV&#x27;</span>, <span class="string">&#x27;TRUNC&#x27;</span>, <span class="string">&#x27;TOZERO&#x27;</span>, <span class="string">&#x27;TOZERO_INV&#x27;</span>]</span><br><span class="line">images = [img_cat, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,i+<span class="number">1</span>),plt.imshow(images[i],<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131648645.png" alt="Snipaste_2024-05-13_16-48-44"></p><h2 id="图像平滑处理"><a href="#图像平滑处理" class="headerlink" title="图像平滑处理"></a>图像平滑处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line"><span class="comment"># 简单的平均卷积操作</span></span><br><span class="line">blur = cv2.blur(img,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">cv_show(<span class="string">&#x27;blur&#x27;</span>,blur)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方框滤波</span></span><br><span class="line">box = cv2.boxFilter(img,-<span class="number">1</span>,(<span class="number">3</span>,<span class="number">3</span>),normalize=<span class="literal">True</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;box&#x27;</span>,box)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">aussian = cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;aussian&#x27;</span>,aussian)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中值滤波</span></span><br><span class="line">median = cv2.medianBlur(img,<span class="number">5</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;median&#x27;</span>,median)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131709708.png" alt="image-20240513170956530"></p><h2 id="形态学-腐蚀操作和膨胀操作"><a href="#形态学-腐蚀操作和膨胀操作" class="headerlink" title="形态学-腐蚀操作和膨胀操作"></a>形态学-腐蚀操作和膨胀操作</h2><blockquote><p>去除以下图片的毛刺</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131710660.png" alt="image-20240513171053619"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------------------腐蚀操作----------------------------------</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">erosion = cv2.erode(img,kernel,iterations=<span class="number">1</span>)</span><br><span class="line">pie = cv2.imread(<span class="string">&#x27;pie.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 处理之后变细了</span></span><br><span class="line"><span class="comment"># -------------------------膨胀操作----------------------------------</span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">dige_dilate = cv2.dilate(erosion,kernel,iterations=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131713024.png" alt="image-20240513171357983"></p><h2 id="开运算与闭运算"><a href="#开运算与闭运算" class="headerlink" title="开运算与闭运算"></a>开运算与闭运算</h2><blockquote><p>开运算： 先腐蚀再膨胀</p><p>闭运算：先膨胀再腐蚀</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开运算</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">opening = cv2.morphologyEx(img,cv2.MORPH_OPEN,kermel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭运算</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">opening = cv2.morphologyEx(img,cv2.MORPH_CLOSE,kermel)</span><br></pre></td></tr></table></figure><h2 id="梯度运算"><a href="#梯度运算" class="headerlink" title="梯度运算"></a>梯度运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 梯度 = 膨胀 - 腐蚀</span></span><br><span class="line">pie = cv2.imread(<span class="string">&#x27;pre.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">7</span>,<span class="number">7</span>),np.uint8)</span><br><span class="line">dilate = cv2.dilate(pie,kernel,iterations = <span class="number">5</span>)</span><br><span class="line">erosion = cv2.erode(pie,kernel,iterations = <span class="number">5</span>)</span><br><span class="line">res = np.hstack(dilate,erosion) <span class="comment"># 将两个图片拼在一起显示，横向 vstack为纵向</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gradient = cv2.morphologyEx(pie,cv2.MORPH_GRADIENT,kernel)</span><br></pre></td></tr></table></figure><h2 id="礼帽与黑帽"><a href="#礼帽与黑帽" class="headerlink" title="礼帽与黑帽"></a>礼帽与黑帽</h2><ul><li>礼帽 &#x3D; 原始输入 - 开运算结果</li><li>黑帽 &#x3D; 闭运算 - 原始输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 礼帽</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">tophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;tophat&#x27;</span>,tophat)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 黑帽</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">blackhat = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;blackhat&#x27;</span>,blackhat)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="图像梯度-Sobel算子"><a href="#图像梯度-Sobel算子" class="headerlink" title="图像梯度 - Sobel算子"></a>图像梯度 - Sobel算子</h2><blockquote><p>Gx 表示水平方向，Gy 表示垂直方向</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140856052.png" alt="image-20240514085623958"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;pie.png&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># dst = cv2.Sobel(src, ddepth, dx, dy, ksize)</span></span><br><span class="line"><span class="comment"># ddepth: 图像的深度（通常为 -1）</span></span><br><span class="line"><span class="comment"># dx 和 dy 分别表示水平和竖直方向</span></span><br><span class="line"><span class="comment"># ksize 是 Sobel 算子的大小</span></span><br><span class="line">sobelx = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 白到黑是正数，黑到白就是负数，所有负数会被截断成0，所以要取绝对值</span></span><br><span class="line">sobelx = cv2.convertScaleAbs(sobelx)</span><br><span class="line"><span class="comment"># 分别计算出 Gx Gy再求和</span></span><br><span class="line">sobely = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">sobely = cv2.convertScaleAbs(sobely)</span><br><span class="line">sobelxy = cv2.addWeighted(sobelx, <span class="number">0.5</span>, sobely, <span class="number">0.5</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="图像梯度-Scharr算子"><a href="#图像梯度-Scharr算子" class="headerlink" title="图像梯度 - Scharr算子"></a>图像梯度 - Scharr算子</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140918478.png" alt="image-20240514091833419"></p><h3 id="图像梯度-laplacian算子"><a href="#图像梯度-laplacian算子" class="headerlink" title="图像梯度 - laplacian算子"></a>图像梯度 - laplacian算子</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140919969.png" alt="image-20240514091938911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">sobelx = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize = <span class="number">3</span>)</span><br><span class="line">sobely = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize = <span class="number">3</span>)</span><br><span class="line">sobelx = cv2.convertScaleAbs(sobelx)</span><br><span class="line">sobely = cv2.convertScaleAbs(sobely)</span><br><span class="line">sobelxy = cv2.addWeighted(sobelx, <span class="number">0.5</span>, sobely, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">scharrx = cv2.Scharr(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">scharry = cv2.Scharr(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">scharrx = cv2.convertScaleAbs(scharrx)</span><br><span class="line">scharry = cv2.convertScaleAbs(scharry)</span><br><span class="line">scharrxy = cv2.addWeighted(scharrx, <span class="number">0.5</span>, scharry, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">laplacian = cv2.Laplacian(img, cv2.CV_64F)</span><br><span class="line">laplacian = cv2.convertScaleAbs(laplacian)</span><br><span class="line"></span><br><span class="line">res = np.hstack((sobelxy, scharrxy, laplacian))</span><br></pre></td></tr></table></figure><h2 id="Canny-边缘检测算法"><a href="#Canny-边缘检测算法" class="headerlink" title="Canny 边缘检测算法"></a>Canny 边缘检测算法</h2><ul><li>使用高斯滤波器，以平滑图像， 滤除噪声。</li><li>计算图像中每个像素点的梯度强度和方向。</li><li>应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。</li><li>应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。</li><li>通过抑制孤立的弱边缘最终完成边缘检测。</li></ul><p>高斯滤波器</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140936193.png" alt="image-20240514093645117"></p><p>梯度和方向</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140937619.png" alt="image-20240514093748547"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140937674.png" alt="image-20240514093759607"></p><p>非极大值抑制</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140938627.png" alt="image-20240514093830561"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140940186.png" alt="image-20240514094041096"></p><p>双阈值检测</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140941673.png" alt="image-20240514094126597"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">v1 = cv2.Canny(img, <span class="number">80</span>, <span class="number">150</span>) <span class="comment"># 后面两个数值为minVal 和 maxVal</span></span><br><span class="line">v2 = cv2.Canny(img, <span class="number">50</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140947567.png" alt="image-20240514094745459"></p><h3 id="高斯金字塔"><a href="#高斯金字塔" class="headerlink" title="高斯金字塔"></a>高斯金字塔</h3><p>向下采样方法（缩小）</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140948293.png" alt="image-20240514094842231"></p><p>向上采样方法（放大）</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140950310.png" alt="image-20240514095057239"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;AM.png&quot;</span>)</span><br><span class="line"><span class="comment"># 上采样</span></span><br><span class="line">up = cv2.pyrUp(img)</span><br><span class="line"><span class="comment"># 下采样</span></span><br><span class="line">down = cv2.pyrDown(img)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拉普拉斯金字塔"><a href="#拉普拉斯金字塔" class="headerlink" title="拉普拉斯金字塔"></a>拉普拉斯金字塔</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140955216.png" alt="image-20240514095529131"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">down = cv2.pyrDown(img)</span><br><span class="line">down_up = cv2.pyrUp(down)</span><br><span class="line">l_l = img - down_up</span><br></pre></td></tr></table></figure><h2 id="图像轮廓"><a href="#图像轮廓" class="headerlink" title="图像轮廓"></a>图像轮廓</h2><blockquote><p>cv2.findContours(img,mode,method)</p></blockquote><p>mode：轮廓检索模式</p><ul><li>RETR_EXTERNAL：只检索最外面的轮廓</li><li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中</li><li>RETR_CCOMP：检索所有的轮廓，并将他们组织为两层，顶层是各部分的外部边界，第二层是空洞的边界</li><li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次（&#x3D;&#x3D;用这个就足够&#x3D;&#x3D;）</li></ul><p>method：轮廓逼近方法</p><ul><li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。</li><li>CHAIN_APPROX_SIMPLE：压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;contours.png&quot;</span>) <span class="comment"># 必须为 png 格式</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GARY)</span><br><span class="line">ret, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY) <span class="comment"># 二值化</span></span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX, cv2.CHAIN_APPROX_NONE)</span><br><span class="line"><span class="comment"># 传入绘制图像，轮廓，轮廓索引，颜色模式，线条厚度</span></span><br><span class="line"><span class="comment"># 注意需要copy，要不原图会变</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, contours, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)<span class="comment"># -1表示绘出所有轮廓</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="轮廓近似"><a href="#轮廓近似" class="headerlink" title="轮廓近似"></a>轮廓近似</h3><p>设置阈值 T，找出与 AB 曲线上最远的点 D，判断 D 到 AB 的距离是否小于阈值，若小于则将 AB 直线代替 AB 曲线，若大于，则继续以相同的方法判断 AD 直线能否代替 AD 曲线，以此类推。</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405200906069.png" alt="image-20240520090634996"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;contour2.png&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GARY)</span><br><span class="line">ret, thresh = cv2.threshold(gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[<span class="number">0</span>] <span class="comment"># 取出第一个轮廓</span></span><br><span class="line"><span class="comment"># 展示轮廓效果</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, [cut], -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv.show(res, <span class="string">&#x27;res&#x27;</span>)</span><br><span class="line"></span><br><span class="line">thresholdT = <span class="number">0.1</span> <span class="comment"># 设置阈值</span></span><br><span class="line">epsilon = thresholdT*cv2.arcLength(cnt, <span class="literal">True</span>)</span><br><span class="line">approx = cv2.approxPloyDP(cnt, epsilon, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 展示近似后的效果</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, [approx], -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv.show(res, <span class="string">&#x27;res&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="边界矩形"><a href="#边界矩形" class="headerlink" title="边界矩形"></a>边界矩形</h3><p>画出轮廓的外接矩形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;contour2.png&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GARY)</span><br><span class="line">ret, thresh = cv2.threshold(gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[<span class="number">0</span>] <span class="comment"># 取出第一个轮廓</span></span><br><span class="line"></span><br><span class="line">x, y, w, h = cv2.boundingRect(cnt)</span><br><span class="line">img = cv2.rectangle(img, (x, y), (x + w, y + h),(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv2.show(img,<span class="string">&#x27;img&#x27;</span>) <span class="comment"># 展示处理后的图像</span></span><br><span class="line">area = cv2.contourArea(cnt) <span class="comment"># 边界包裹的面积</span></span><br><span class="line">rect_area = w*h <span class="comment"># 外接矩形面积</span></span><br><span class="line">extent = <span class="built_in">float</span>(area) / rect_area</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;轮廓面积与边界矩形比&#x27;</span>, extent)</span><br></pre></td></tr></table></figure><h3 id="外接圆"><a href="#外接圆" class="headerlink" title="外接圆"></a>外接圆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 承接了上一小节的 cnt</span></span><br><span class="line">(x, y), radius = cv2.minEnclosingCircle(cnt)</span><br><span class="line">center = (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br><span class="line">radius = <span class="built_in">int</span>(radius)</span><br><span class="line">img = cv2.circle(img, center, radius, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">cv2.show(img,<span class="string">&#x27;img&#x27;</span>) <span class="comment"># 展示处理后的图像</span></span><br></pre></td></tr></table></figure><p>一个三角形画出了外接矩形和外接圆</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405200925076.png" alt="image-20240520092541997"></p><h2 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h2><p>模板匹配和卷积原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，这个差别程度的计算方法在 opencv 里有 6 种，然后将每次计算的结果放入一个矩阵，作为结果输出。假如原图形是 A * B 大小， 而模板是 a * b 大小，则输出结果的矩阵是（A - a  + 1）*（B - b + 1）</p><ul><li>TM_SQDIFF：计算平方不同，计算出来的值越小，越相关</li><li>TM_CCORR：计算相关性，计算出来的值越大，越相关</li><li>TM_CCOEFF：计算相关系数，计算出来的值越大，越相关</li><li>TM_SQDIFF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关</li><li>TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关</li><li>TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">template = cv2.imread(<span class="string">&#x27;face.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">h, w = template.shape[:<span class="number">2</span>]</span><br><span class="line">res = cv2.matchTemplate(img, template, cv2.TM_SQDIFF)</span><br><span class="line">min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)</span><br><span class="line"><span class="comment"># 匹配多个对象</span></span><br><span class="line">res = cv2.matchTemplate(img, template, cv2.TM_SQDIFF_NORMED)</span><br><span class="line">threshold = <span class="number">0.8</span></span><br><span class="line"><span class="comment"># 取匹配程度大于百分之80的坐标</span></span><br><span class="line">loc = np.where(res &gt;= threshold)</span><br><span class="line"><span class="comment"># 画出</span></span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> <span class="built_in">zip</span>(*loc[::-<span class="number">1</span>]):</span><br><span class="line">    bottom_right = (pt[<span class="number">0</span>] + w, pt[<span class="number">1</span>] + h)</span><br><span class="line">    cv2.rectangle(img, pt, bottom_right, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241417173.png" alt="image-20240524141705079"></p><p>cv2.calcHist(images, channels, mask, histSize, ranges)</p><ul><li>images：原图像图像格式为 uint8 或 float32。当传入函数时，用中括号 [] 括，例如 [img]</li><li>channels：同样用中括号括来他会告函数我们统幅图 像的直方图。如果入图像是灰度图它的值就是 [0] 如果是彩色图像的传入参数可以是 [0] [1] [2] 他们分别对应着 BGR</li><li>mask：掩模图像。统整幅图像的直方图就把它为 None。但是如果想统图像某一部分的直方图，就制作一个掩模图像并使用它。</li><li>histSize：BIN 的数目。也应用中括号括来</li><li>ranges：像素值范围常为 [0256]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;cat.jpg&#x27;</span>, <span class="number">0</span>) <span class="comment"># 表示灰度图</span></span><br><span class="line">hist = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">hist.shape</span><br></pre></td></tr></table></figure><h3 id="mask-操作"><a href="#mask-操作" class="headerlink" title="mask 操作"></a>mask 操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建mask</span></span><br><span class="line">mask = np.zeros(img.shape[:<span class="number">2</span>], np.uint8)</span><br><span class="line">mask[<span class="number">100</span>:<span class="number">300</span>, <span class="number">100</span>:<span class="number">400</span>] = <span class="number">255</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">masked_img = cv2.bitwise_and(img, img, mask=mask)</span><br><span class="line">hist_full = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">hist_mask = cv2.calcHist([img], [<span class="number">0</span>], mask, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"><span class="comment"># 绘制结果</span></span><br><span class="line">plt.subplot(<span class="number">221</span>), plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>), plt.imshow(mask, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>), plt.imshow(masked_img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>), plt.plot(hist_full), plt.plot(hist_mask)</span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241440546.png" alt="image-20240524144025475"></p><h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入一个图像即可</span></span><br><span class="line">equ = cv2.equalizeHist(img)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241446689.png" alt="image-20240524144630569"></p><h3 id="自适应直方图均衡化"><a href="#自适应直方图均衡化" class="headerlink" title="自适应直方图均衡化"></a>自适应直方图均衡化</h3><p>将图像分块，只在各自块内进行直方图均衡化处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clahe = cv2.createCLAHE(clipLimit=<span class="number">2.0</span>, tileGridSize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">res_clahe = clahe.apply(img)</span><br><span class="line">res = np.hstack((img,equ,res_clahe))</span><br><span class="line">cv_show(res,<span class="string">&#x27;res&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241451223.png" alt="image-20240524145111999"></p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>点击去知乎看详解 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://zhuanlan.zhihu.com/p/19763358"   title="傅里叶分析之掐死教程（完整版）"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>傅里叶分析之掐死教程（完整版）</span></a></p><p>傅里叶变换的作用</p><ul><li>高频：变化剧烈的灰度分量，例如边界。</li><li>低频：变化缓慢的灰度分量，例如一片大海。</li></ul><p>滤波：</p><ul><li><p>低通滤波器：只保留低频，会使得图像模糊</p></li><li><p>高通滤波器：只保留高频，会使得图像细节增强</p></li><li><p>opencv中主要就是 cv2.dft() 和 cv2.idft()，输入图像需要先转换成np.float32 格式</p></li><li><p>得到的结果中频率为 0 的部分会在左上角，通常要转换到中心位置，可以通过 shift 变换来实现。</p></li><li><p>cv2.dft() 返回的结果是双通道的（实部，虚数），通常还需要转换成图像格式才能展示（0，255）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"><span class="comment"># 得到灰度图能表示的形式</span></span><br><span class="line">magnitude_spectrum = <span class="number">20</span>*np.log(cv2.magnitude(dft_shift[:,:,<span class="number">0</span>],dft_shift[:,:,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input Image&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(magnitude_spectrum,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Magnitude Spectrum&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241523408.png" alt="image-20240524152306308"></p><h3 id="低通滤波"><a href="#低通滤波" class="headerlink" title="低通滤波"></a>低通滤波</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">rows, cols = img.shape</span><br><span class="line">crow,ccol = <span class="built_in">int</span>(row/<span class="number">2</span>),<span class="built_in">int</span>(cols/<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 低通滤波</span></span><br><span class="line">mask = np.zeros((rows, cols, <span class="number">2</span>),np.uint8)</span><br><span class="line">mask[crow-<span class="number">30</span>:crow+<span class="number">30</span>, ccol-<span class="number">30</span>:ccol+<span class="number">30</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDFT</span></span><br><span class="line">fshift = dft_shift*mask</span><br><span class="line">f_ishift = np.fft.ifftshift(fshift)</span><br><span class="line">img_back = cv2.idft(f_ishift)</span><br><span class="line">img_back = cv2.magnitude(img_back[:,:,<span class="number">0</span>],img_back[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input Image&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img_back,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Result&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241545508.png" alt="image-20240524154510402"></p><h3 id="高通滤波"><a href="#高通滤波" class="headerlink" title="高通滤波"></a>高通滤波</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">rows, cols = img.shape</span><br><span class="line">crow,ccol = <span class="built_in">int</span>(row/<span class="number">2</span>),<span class="built_in">int</span>(cols/<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 低通滤波</span></span><br><span class="line">mask = np.ones((rows, cols, <span class="number">2</span>),np.uint8)</span><br><span class="line">mask[crow-<span class="number">30</span>:crow+<span class="number">30</span>, ccol-<span class="number">30</span>:ccol+<span class="number">30</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDFT</span></span><br><span class="line">fshift = dft_shift*mask</span><br><span class="line">f_ishift = np.fft.ifftshift(fshift)</span><br><span class="line">img_back = cv2.idft(f_ishift)</span><br><span class="line">img_back = cv2.magnitude(img_back[:,:,<span class="number">0</span>],img_back[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input Image&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img_back,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Result&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241546845.png" alt="image-20240524154644740"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统</title>
      <link href="/2024/05/11/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/11/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="伙伴匹配系统"><a href="#伙伴匹配系统" class="headerlink" title="伙伴匹配系统"></a>伙伴匹配系统</h1><div class="tip info"><p>介绍：帮助用户找到志同道合的伙伴 </p></div><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>用户去添加标签，标签的分类（要哪些标签，怎么把标签进行分类）学习方向？</li><li>主动搜索：允许用户根据标签去搜索其他用户<ol><li>Redis 缓存</li></ol></li><li>组队<ol><li>创建队伍</li><li>加入队伍</li><li>根据标签查询队伍</li><li>邀请其他人</li></ol></li><li>允许用户去修改标签</li><li>推荐<ol><li>相似度计算算法 + 本地分布式计算</li></ol></li></ol><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol><li>Vue 3 开发框架（提交页面开发效率）</li><li>Vant UI （基于 Vue 的移动端组件库） （React 版 Zent）</li><li>Vite （打包工具，快！）</li><li>Nginx 来单机部署</li></ol><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>Java 编程语言 + SpringBoot 框架</li><li>SpringMVC + Mybatis + Mybatis Plus</li><li>MySQL 数据库</li><li>Redis 缓存</li><li>Swagger + Knife4j 接口文档</li></ol><h2 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h2><ol><li>前端初始化</li><li>前端主页 + 组件概览</li><li>数据库表设计<ol><li>标签表</li><li>用户表</li></ol></li><li>开发后端 - 根据标签搜索用户</li><li>开发前端 - 根据标签搜索用户</li></ol><h3 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h3><p>用脚手架初始化项目</p><ul><li>Vue CLI</li><li>Vite 脚手架</li></ul><p>整合组件库 Vant：</p><ul><li>安装 Vant</li><li>按需引入 <a href="https://vant-ui.github.io/vant/#/zh-CN/quickstart">指令参考官方文档</a></li></ul><p>开发页面经验：</p><ol><li>多参考</li><li>从整体到局部</li><li>先想清楚页面要做成什么样子，再写代码</li></ol><h3 id="前端主页-组件概览"><a href="#前端主页-组件概览" class="headerlink" title="前端主页 + 组件概览"></a>前端主页 + 组件概览</h3><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><ol><li>导航条：展示当前页面</li><li>主页搜索框 -&gt; 推荐页 -&gt; 搜索结果页</li><li>内容</li><li>tab栏：<ul><li>主页（推荐页 + 广告）<ul><li>搜索框</li><li>banner</li><li>推荐信息流</li></ul></li><li>队伍页</li><li>用户页</li></ul></li></ol><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>很多页面要复用组件 &#x2F; 样式，重复写很麻烦，不利于维护，所以抽象一个通用的布局（Layout）</p><h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>标签的分类（要有哪些标签，怎么把标签分类）</p><h4 id="标签表（分类表）"><a href="#标签表（分类表）" class="headerlink" title="标签表（分类表）"></a>标签表（分类表）</h4><p>建议用标签不要用分类。更灵活</p><ul><li>性别 ： 男，女</li><li>方向：Java、Python、C++</li><li>目标：考研、春招、秋招、考公、竞赛</li><li>身份：大学生、待业、研究生</li><li>状态：乐观、有点丧、一般、单身、已婚、有对象</li><li>【用户自定义标签】？</li></ul><p>字段：</p><ul><li><p>id int 主键</p></li><li><p>标签名 varchar 非空 （必须唯一，唯一索引）</p></li><li><p>userId 上传标签的用户 int （普通索引）</p></li><li><p>parentId 父标签 int（分类）</p></li><li><p>isParent 是否为父标签 tinyint</p></li><li><p>creatTime 创建时间 datetime</p></li><li><p>updateTime 更新时间 datetime</p></li><li><p>isDelete 是否删除 tinyint</p></li></ul><p>怎么查询所有标签，并且把标签分好组？能实现 √</p><p>根据父标签查询子标签，根据id查询 √</p><p>SQL语言分类：</p><p>DDL define 建表、操作表</p><p>DML manager 更新删除数据，影响实际表里的内容</p><p>DCL control 控制、权限</p><p>DQL query 查询</p><h4 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h4><p>用户有哪些标签？</p><ol><li>直接在用户表补充 tags 字段，[‘java’, ‘男’]存 JSON 字符串<ol><li>优点：查询方便，不用新建关联表，标签是用户的固有属性（除了该系统、其他系统可能也要使用），节省开发成本。</li><li>缺点：用户表多一列，会有点</li><li>哪怕性能低，可以用缓存</li></ol></li><li>加一个关联表，记录用户和标签的关系<ol><li>优点：查询灵活，可以正查反查</li><li>缺点：要多建一个表、多维护一个表</li><li>重点：企业大项目开发中尽量减少关联查询，很影响扩展性，而且会影响查询性能</li></ol></li></ol><h3 id="开发后端接口"><a href="#开发后端接口" class="headerlink" title="开发后端接口"></a>开发后端接口</h3><p>搜索标签：</p><ol><li>允许用户传入多个标签，多个标签都存在才搜索出来 and。like %Java% and like %C++%</li><li>允许用户传入多个标签，有任何一个标签存在就能搜索出来 or。like %Java% or like %C++%</li></ol><p>两种方式：</p><ol><li>SQL查询</li><li>内存查询</li></ol><h3 id="用户中心来集中提供用户的检索、操作、登录、鉴权等等"><a href="#用户中心来集中提供用户的检索、操作、登录、鉴权等等" class="headerlink" title="用户中心来集中提供用户的检索、操作、登录、鉴权等等"></a>用户中心来集中提供用户的检索、操作、登录、鉴权等等</h3><h2 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h2><ol><li>前端开发（搜索页面、用户信息页、用户信息修改页）</li><li>前端整合路由</li><li>后端整合Swagger + Knife4j 接口文档</li><li>存量用户信息导入及同步（爬虫）</li></ol><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><ol><li>stream &#x2F; parallelStream 流式处理</li><li>Optional 可选类</li></ol><h3 id="前端整合路由"><a href="#前端整合路由" class="headerlink" title="前端整合路由"></a>前端整合路由</h3><p>点击去Vue-Router 官方文档 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://router.vuejs.org/zh/guide/"   title="Vue-Router"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Vue-Router</span></a></p><p>Vue - Router 其实就是帮助你根据不同的 url 来展示不同的页面（组件），不用自己写 if &#x2F; else</p><p>路由配置影响整个项目，所以建议单独用 config 目录、单独的配置文件去集中定义和管理。</p><p>有些组件库可能自带了和 Vue-Router 的整合，所以尽量先看组件文档，省去自己写的时间。</p><h2 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h2><p>计划：</p><ol><li>后端整合Swagger + Knife4j 接口文档</li><li>存量用户信息导入及同步（爬虫）</li><li>前后端联调：搜索页面、用户信息页、用户信息修改页</li><li>标签整理、部分细节优化</li></ol><h3 id="后端整合Swagger-Knife4j-接口文档"><a href="#后端整合Swagger-Knife4j-接口文档" class="headerlink" title="后端整合Swagger + Knife4j 接口文档"></a>后端整合Swagger + Knife4j 接口文档</h3><p>什么是接口文档？写接口信息的文档，每条接口包括：</p><ul><li>请求参数</li><li>响应参数<ul><li>错误码</li></ul></li><li>接口地址</li><li>接口名称</li><li>请求类型</li><li>请求格式</li><li>备注</li></ul><p>谁用？一般是后端或者负责人提供，后端前端都要使用</p><p>为什么需要接口文档？</p><ul><li>有个书面内容（背书或者归档），便于大家参考和查阅，便于沉淀和维护，拒绝口口相传</li><li>有个文档方便与前端和后端开发对接，前端后端联调的&#x3D;&#x3D;介质&#x3D;&#x3D;。后端&#x3D;&gt;接口文档&lt;&#x3D;前端</li><li>好的接口文档支持在线调试、在线测试，可以作为工具提高我们的开发测试效率</li></ul><p>怎么做接口文档？</p><ul><li>手写（比如腾讯文档、Markdown笔记）</li><li>自动化接口文档生成：Swagger、Postman（侧重接口管理）；apifox，apipost，eolink（国产）</li></ul><p>Swagger原理：</p><ol><li>自定义 Swagger 配置类</li><li>定义需要生成接口文档的代码位置（Controller）</li></ol><p>千万注意：线上环境不要把接口暴露出去</p><blockquote><p>[!NOTE]</p><p>可直接引入knife4j，其集成了 Swagger 和 openAPI &#x3D;&#x3D;引入请见官方文档&#x3D;&#x3D;。</p></blockquote><p>FeHelper 前端插件 推荐安装</p><h2 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h2><p>计划：</p><ol><li>页面和功能开发（搜索页面、用户信息、用户修改页面）</li><li>改造用户中心，把单机登录改为分布式 session 登录</li><li>标签的整理、细节的优化</li></ol><h3 id="前端页面跳转传值"><a href="#前端页面跳转传值" class="headerlink" title="前端页面跳转传值"></a>前端页面跳转传值</h3><ol><li>query &#x3D;&gt; url searchParams, url 后附加参数（传递值长度有限）</li><li>vuex （全局状态管理），搜索页将关键词塞到状态中，搜索结果页从状态中取值</li></ol><p>以下代码使用参考Vue Router官方文档 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://router.vuejs.org/zh/"   title="Vue Router"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Vue Router</span></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/user/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/eduardo&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命名路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="整合Axios"><a href="#整合Axios" class="headerlink" title="整合Axios"></a>整合Axios</h2><p>点击去官方文档 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.axios-http.cn/"   title="Axios中文文档"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Axios中文文档</span></a></p><h2 id="Session-共享"><a href="#Session-共享" class="headerlink" title="Session 共享"></a>Session 共享</h2><h3 id="Cookie-范围"><a href="#Cookie-范围" class="headerlink" title="Cookie 范围"></a>Cookie 范围</h3><p>种 session 的时候注意范围， Springboot 项目中可以通过 cookie。domain 来配置。（3.0版本之后不需要配置）</p><p>比如两个域名：</p><ul><li>aaa.abeibiiji.com</li><li>bbb.abeibiji.com</li></ul><p>如果要共享cookie ，可以种一个更高层的公共域名，比如 abeibiji.com</p><h3 id="为什么需要共享？"><a href="#为什么需要共享？" class="headerlink" title="为什么需要共享？"></a>为什么需要共享？</h3><p>思考：为什么服务器A登录后， 请求发送到服务器B，不认识该用户？</p><p>原因：</p><ol><li>用户在A登录，所以 session （用户登录信息）存在了 A 上</li><li>结果请求 B 时，B 没有用户信息，所以不认识。</li></ol><p>如图：</p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406032157631.png" alt="image-20240603215713650" style="zoom:50%;" /><p>解决方案：&#x3D;&#x3D;共享存储&#x3D;&#x3D;，而不是把数据放到单台服务器的内存中</p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406032158186.png" alt="image-20240603215816129" style="zoom:50%;" /><h3 id="如何共享存储"><a href="#如何共享存储" class="headerlink" title="如何共享存储"></a>如何共享存储</h3><p>核心思想：把数据放到同一个地方去管理</p><ol><li>Redis（基于内存的 K&#x2F;V 数据库）此处选择 Redis，因为用户信息读取 &#x2F; 是否登录的判断极其 &#x3D;&#x3D;频繁&#x3D;&#x3D;，Redis 基于内存，读写性能很高，简单的数据单机 qps 5w - 10w</li><li>MySQL</li><li>文件服务器 ceph</li></ol><h3 id="Session-共享实现"><a href="#Session-共享实现" class="headerlink" title="Session 共享实现"></a>Session 共享实现</h3><ol><li><p>安装 <a class="btn-anzhiyu outline orange larger" href="https://redis.io"   title="Redis"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Redis</span></a></p></li><li><p>安装 Redis 管理工具 <a class="btn-anzhiyu outline orange larger" href="https://quick123.net"   title="quick redis"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>quick redis</span></a></p></li><li><p>引入 Redis：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;依赖具有时效性，具体依赖参考maven仓库&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>引入 spring-session 和 redis 的整合，使得自动将session 存储到 redis 中。</li></ol><h2 id="其他单点登陆方案"><a href="#其他单点登陆方案" class="headerlink" title="其他单点登陆方案"></a>其他单点登陆方案</h2><p>常用的就是 JWT</p><p>Redis Session 对比 JWT 的优缺点 <a class="btn-anzhiyu outline orange larger" href="https://zhuanlan.zhihu.com/p/108999941"   title="基于jwt和session的区别和优缺点"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>基于jwt和session的区别和优缺点</span></a></p><h2 id="开发主页"><a href="#开发主页" class="headerlink" title="开发主页"></a>开发主页</h2><p>直接使用的 card 组件列表展示。</p><p>模拟 100万用户数据查询。</p><h3 id="100-万用户数据插入方式"><a href="#100-万用户数据插入方式" class="headerlink" title="100 万用户数据插入方式"></a>100 万用户数据插入方式</h3><ol><li>用编译器的可视化界面导入：适合一次性导入，数据量可控</li><li>编写程序：for 循环，建议分批，不要一把梭哈（可以用接口来控制）。&#x3D;&#x3D;要保证可控，幂等，注意线上环境和测试环境是有区别的！&#x3D;&#x3D;</li><li>执行 SQL 语句：适用于小数据量</li></ol><h3 id="编写一次性任务"><a href="#编写一次性任务" class="headerlink" title="编写一次性任务"></a>编写一次性任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 for 循环遍历插入数据</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入用户数据</span></span><br><span class="line"><span class="comment">     * 写在了 测试类里面，程序运行时记得注释，不然会自动运行测试类！！！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doInsertUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 检测运行时间</span></span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INSERT_NUM</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">// 使用数组 分批插入 效率较高</span></span><br><span class="line">        ArrayList&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; INSERT_NUM; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;假用户&quot;</span> + i);</span><br><span class="line">            user.setUserAccount(<span class="string">&quot;假用户&quot;</span> + i);</span><br><span class="line">            user.setAvatarUrl(<span class="string">&quot;https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405102124088.jpeg&quot;</span>);</span><br><span class="line">            user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            user.setUserPassword(<span class="string">&quot;11111111&quot;</span>);</span><br><span class="line">            user.setUserPhone(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">            user.setUserEmail(<span class="string">&quot;12345678@qq.com&quot;</span>);</span><br><span class="line">            user.setUserStatus(<span class="number">0</span>);</span><br><span class="line">            user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">            user.setUserRole(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            user.setUserTags(<span class="string">&quot;[\&quot;Java\&quot;]&quot;</span>);</span><br><span class="line">            user.setUserProfile(<span class="string">&quot;这是假用户&quot;</span>);</span><br><span class="line">            user.setUserCode(<span class="string">&quot;99999999&quot;</span>);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用 Service层的saveBatch批量插入数据</span></span><br><span class="line">        userService.saveBatch(userList,<span class="number">100</span>);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        System.out.println(stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用多线程插入数据</span></span><br><span class="line"></span><br><span class="line">！这里要在前面声明自定义线程池</span><br><span class="line">    <span class="comment">// 自定义线程池</span></span><br><span class="line">    <span class="comment">//CPU 密集型：分配的核心线程数 = CPU -1</span></span><br><span class="line">    <span class="comment">// IO 密集型：分配的核心线程数可以大于CPU核数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">60</span>,<span class="number">1000</span>,<span class="number">10000</span>,TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并发批量插入用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doConcurrencyInsertUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INSERT_NUM</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">        <span class="comment">// 分二十组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;CompletableFuture&lt;Void&gt;&gt; futureList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setUsername(<span class="string">&quot;假用户&quot;</span>);</span><br><span class="line">                user.setUserAccount(<span class="string">&quot;假用户&quot;</span>);</span><br><span class="line">                user.setAvatarUrl(<span class="string">&quot;https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405102124088.jpeg&quot;</span>);</span><br><span class="line">                user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                user.setUserPassword(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line">                user.setUserPhone(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">                user.setUserEmail(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">                user.setUserStatus(<span class="number">0</span>);</span><br><span class="line">                user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">                user.setUserRole(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">                user.setUserTags(<span class="string">&quot;[\&quot;Java\&quot;]&quot;</span>);</span><br><span class="line">                user.setUserProfile(<span class="string">&quot;这是假用户&quot;</span>);</span><br><span class="line">                user.setUserCode(<span class="string">&quot;99999999&quot;</span>);</span><br><span class="line">                userList.add(user);</span><br><span class="line">                <span class="keyword">if</span> (j % batchSize == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 异步执行</span></span><br><span class="line">            <span class="comment">// 从自带的线程池中取</span></span><br><span class="line">            CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                userService.saveBatch(userList,batchSize);</span><br><span class="line">            &#125;);</span><br><span class="line">            futureList.add(future);</span><br><span class="line"><span class="comment">//             从自定义的线程池中取</span></span><br><span class="line"><span class="comment">//            CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                userService.saveBatch(userList,batchSize);</span></span><br><span class="line"><span class="comment">//            &#125;,executorService);</span></span><br><span class="line"><span class="comment">//            futureList.add(future);</span></span><br><span class="line">            </span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        CompletableFuture.allOf(futureList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[]&#123;&#125;)).join();</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        System.out.println(stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><div class="tabs" id="redis"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="redis-1">Redis介绍</button><button type="button" class="tab " data-href="redis-2">Redis数据结构</button><button type="button" class="tab " data-href="redis-3">Java里的实现方式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="redis-1"><p>定义 ： </p><ul><li><p>NoSQL 数据库</p></li><li><p>key - value 存储系统（区别于 MySQL，他存储的是键值对）</p></li></ul></div><div class="tab-item-content" id="redis-2"><p>String 字符串类型：name:“kele”</p><p>List 列表：names:[“kele”,”abei”,”abei”]</p><p>Set 集合：names:[“kele”,”abei”] (值不能重复)</p><p>Hash 哈希：nameAge：{“kele”:1,”abei”:2} (键不能重复)</p><p>Zset 集合：names:{kele - 9, abei - 12} (每个值都要指定一个分数。适合做排行榜)</p><hr><p>bloomfilter（布隆过滤器，主要从大量的数据中快速过滤值，比如拦截邮件黑名单）</p><p>geo （计算地理位置）</p><p>hyperloglog （pv &#x2F; uv）</p><p>pub &#x2F; sub （发布订阅，类似消息队列） </p><p>BitMap （10101010010100011110101）</p></div><div class="tab-item-content" id="redis-3"><p>通用的数据访问框架，定义了一组增删改查的接口。</p><p>引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">引入版本需于Spring Boot 的版本一致</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 Redis 地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">     <span class="comment"># Redis</span></span><br><span class="line">     <span class="attr">data:</span></span><br><span class="line">       <span class="attr">redis:</span></span><br><span class="line">         <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">         <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">         <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Jedis</strong></p><p>独立于 Spring 操作 Redis 的 Java 客户端</p><p>要配合 Jedis Pool 使用</p><p><strong>Redisson</strong></p><p>分布式操作 Redis 的 Java 客户端，让你像在使用本地集合一样操作 Redis （分布式 Redis 数据网格）</p><p><strong>Lettuce</strong></p><p>高阶的操作 Redis 的 Java 客户端</p><p>对比：</p><ol><li>如果你用的是 Spring ，并且没有过多的定制化要求，可以用Spring Data Redis，最方便</li><li>如果你用的不是Spring ，并且追求简单，并且没有过高的性能要求，可以用 Jedis + Jedis Pool</li><li>如果你的项目不是 Spring，并且追求高性能、高定制化，可以用 Lettuce。支持异步、连接池</li></ol><hr><ol><li>如果你的项目是分布式的，需要用到一些分布式的特性（比如，分布式锁、分布式集合），推荐用 redisson</li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><div class="tabs" id="缓存"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="缓存-1">缓存介绍</button><button type="button" class="tab " data-href="缓存-2">缓存实现</button><button type="button" class="tab " data-href="缓存-3">缓存优化性能</button><button type="button" class="tab " data-href="缓存-4">代码实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="缓存-1"><p>数据库慢？预先把数据查出来，放到一个更快读取的地方，不用再查数据库了。（缓存）</p><ul><li>提前把数据取出来保存好（通常保存到读写更快的介质，比如内存），就可以更快的读写。</li></ul><p>防止第一个用户的数据加载是从数据库中取出，从而导致第一个用户或者前几个用户的体验较差。</p><ul><li>预加载缓存，定时更新缓存。（定时任务）</li></ul><p>多个机器都要执行任务么？<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案<br>  </button><span class="hide-content">分布式锁：控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了</span></span></p></div><div class="tab-item-content" id="缓存-2"><p><strong>缓存实现方式</strong></p><ul><li>Redis (分布式缓存)</li><li>memcached (分布式)</li><li>Etcd（云原生架构的一个分布式存储，<strong>存储配置</strong>，扩容能力强）</li></ul><hr><ul><li>ehcache（单机）</li><li>本地缓存（Java 内存 Map ）</li><li>Caffeine（Java 内存缓存，高性能）</li><li>Google Guava</li></ul><p><strong>设计缓存Key</strong></p><p>不同用户看到的数据不同</p><p>systemId.moduleId.func&lt; options &gt; （不要和别人冲突）</p><p>redBirds:user:recommend:userId</p><div class="note warning flat"><p>redis内存不能无限增加，一定要设置过期时间！！！</p></div><p>为什么要设置过期时间？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案<br>  </button><span class="hide-content">如果用户的更新时间过久，就会导致用户展示的数据已经是非常旧的数据</span></span></p></div><div class="tab-item-content" id="缓存-3"><p><strong>缓存预热</strong></p><p>问题：第一个用户访问很慢，怎么优化？</p><p>缓存预热的优缺点：</p><ol><li>解决第一个用户访问慢的问题</li></ol><p>缺点：</p><ol><li>增加开发成本（额外开发、设计）</li><li>预热的时机和时间如果错了，有可能你缓存的数据不对或者太老</li><li>需要占用额外空间</li></ol><div class="tip key"><p>分析优缺点的时候，要打开思路，从整个项目从 0 到 1 的链路上去分析</p></div><p>注意点：</p><ol><li>缓存预热的意义（新增少，总用户多）</li><li>缓存的空间不能太大，要预留给其他缓存空间</li><li>缓存数据的周期</li></ol><p><strong>怎么缓存预热？</strong></p><ol><li>定时</li><li>模拟触发（手动触发）</li></ol><p><strong>定时任务实现</strong></p><ol><li>Spring Scheduler （spring boot 默认整合了）</li><li>Quartz （独立于 Spring 存在的定时任务框架）</li><li>XXL - Job 之类的分布式任务调度平台（界面 + sdk）</li></ol><p>用定时任务，每天刷新所有用户的推荐列表。</p><p>第一种方式实现：</p><ol><li>主类开启 @EnableScheduling</li><li>给要定时执行的方法添加 @Scheduling 注解，指定 cron 表达式或者执行频率</li></ol></div><div class="tab-item-content" id="缓存-4"><p><strong>将推荐改为缓存实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/recommend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;IPage&lt;User&gt;&gt; <span class="title function_">recommendUsers</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> List&lt;String&gt; tagNameList,<span class="type">long</span> pageSize,<span class="type">long</span> pageNum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(tagNameList)) &#123;</span><br><span class="line">            <span class="comment">// 直接查询数据库所有数据并返回</span></span><br><span class="line">            QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            IPage&lt;User&gt; userList = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize),queryWrapper);</span><br><span class="line">            <span class="keyword">return</span> ResultUtils.success(userList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/recommend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;IPage&lt;User&gt;&gt; <span class="title function_">recommendUsers</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> List&lt;String&gt; tagNameList,<span class="type">long</span> pageSize,<span class="type">long</span> pageNum,HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> String.format(<span class="string">&quot;redBirds:user:recommend:%s&quot;</span>, loginUser.getId());</span><br><span class="line">        ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        <span class="comment">// 如果有缓存，直接读缓存</span></span><br><span class="line">        Page&lt;User&gt; userPage = (Page&lt;User&gt;) valueOperations.get(redisKey);</span><br><span class="line">        <span class="keyword">if</span>(userPage != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtils.success(userPage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无缓存，查数据库</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        IPage&lt;User&gt; userList = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize),queryWrapper);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOperations.set(redisKey,userList,<span class="number">10000</span>, TimeUnit.MICROSECONDS); <span class="comment">// 记得设置过期时间</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis key set error : UserController - 150&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.success(userList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>缓存处理前后对比</strong></p><p>目前首页数据加载时间：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406041544956.png" alt="image-20240604154458838"></p><p>添加缓存后的加载时间：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406041720507.png" alt="image-20240604172027312"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><hr><h2 id="控制定时任务的执行"><a href="#控制定时任务的执行" class="headerlink" title="控制定时任务的执行"></a>控制定时任务的执行</h2><p>为什么？</p><ol><li>浪费资源，想象10000台服务器同时执行？</li><li>脏数据，比如重复插入</li></ol><p>要控制定时任务在同一时间只有一个服务器能执行。</p><p>怎么做？</p><ol><li>分离定时任务和主程序，只在一个服务器运行定时任务。<strong>成本太大</strong></li><li>写死配置，每个服务器都执行定时任务，只有指定ip的服务器才真实执行业务逻辑，其他的字节返回。<strong>if判断</strong></li></ol><p>上诉方式还可能存在什么问题？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为是单机部署，所以可能会存在**单点故障**，并且，在公司项目时，IP地址可能是不固定的</span></span></p><ol start="3"><li>动态配置，配置是可以轻松的、很方便的更新的（<strong>代码无需重启</strong>），但是只有 IP 符合配置的服务器才真实执行业务逻辑。<ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、Apollo、Spring Cloud Config）</li></ul></li></ol><p>上诉方式还存在什么问题吗？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为是动态配置，IP 不可控依然很麻烦，还需要人工修改，并且，在公司项目时，IP地址可能是不固定的</span></span></p><ol start="4"><li>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</li></ol><p>引出新技术： 锁</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><div class="tabs" id="锁（分布式锁）"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="锁（分布式锁）-1">什么是锁</button><button type="button" class="tab " data-href="锁（分布式锁）-2">分布式锁</button><button type="button" class="tab " data-href="锁（分布式锁）-3">代码实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="锁（分布式锁）-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果创建10个线程执行以下代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">count = count - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行10次之后，未必是count - 10</span></span><br></pre></td></tr></table></figure><p><strong>jvm锁和分布式锁有什么区别</strong></p><p>jvm锁指的是 Java 中的 ynchronized 关键字。加在函数前面表示只能同时被一个线程执行。但是此锁只能管同一个JVM中的程序，无法处理多个服务器部署的情况。</p><p>Java 实现锁：ynchronized 关键字，并发包的类</p></div><div class="tab-item-content" id="锁（分布式锁）-2"><p>为什么需要分布式锁？</p><ol><li>有限资源的情况下，控制同一时间段只有某些线程（用户&#x2F;服务器）能访问到资源。</li><li>单个锁只对单个 JVM 有效。</li></ol><p><strong>分布式锁的实现关键</strong></p><p>抢锁机制：</p><ul><li>怎么保证同一时间只有一个服务器能够抢到锁？</li></ul><p><strong>核心思想</strong>：先来的人先把数据改成自己的标识（服务器ip），后来的人发现标识已存在，就抢锁失败，继续等待。</p><p>等先来的人执行方法结束，把标识清空，其他的人继续抢锁。</p><p><strong>实现方式</strong></p><p>MySQL 数据库：select for update 行级锁（最简单）</p><p>（乐观锁）</p><p>※<strong>Redis 实现：内存数据库，读写速度快。支持setnx、lua 脚本</strong>，比较方便我们实现分布式锁。</p><ul><li>setnx：set if not exist 如果不存在，则设置；只有设置成功才会返回true，否则false</li></ul><p>Zookeeper 实现（不推荐）</p><p><strong>注意事项</strong></p><ol><li>用完锁要释放</li><li>锁一定要加过期时间</li><li>如果方法执行时间过长，锁提前过期了？<ul><li>这样还是会存在多个方法同时执行的情况</li><li>连锁效应：释放掉别人的锁。（锁设置30秒，A程序执行40秒，30秒之后，B拿到锁执行程序，B程序需要执行20秒，但是A 在执行完成之后释放了B的锁）<ul><li>解决方法：释放锁的时候检查标识是不是自己的。</li></ul></li><li>解决方法：续期</li></ul></li><li>A释放锁的时候，需要进行锁是不是自己的判断。如果此时判断的时候锁是自己的，但是进入删除逻辑的瞬间锁过期了，B发现空着，进来拿到锁，然后A执行释放逻辑，依然释放掉了B的锁。<ul><li>解决方式：在A判断锁的整个逻辑中，不允许任何程序插入。采用<strong>原子操作</strong>。<strong>Redis + lua 脚本实现</strong></li></ul></li></ol><hr><p><strong>定时任务 + 锁</strong></p><ol><li>waitTime 设置为0，只抢一次，抢不到就放弃</li><li>注意释放锁要写在 finally 中（万一前面报错锁也得释放）</li></ol><p><strong>看门狗机制</strong></p><p>redisson 的续期机制</p><p>开一个监听线程，如果方法还没执行完，则续期</p><p>原理：</p><ol><li>监听当前线程，每10秒续期一次</li><li>如果线程挂掉（注意 debug 模式也会被认为是服务器宕机），则不会续期</li></ol><p>看门狗机制详解 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://blog.csdn.net/qq_26222859/article/details/79645203"   title="Redisson 分布式锁的watch dog自动续期机制"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Redisson 分布式锁的watch dog自动续期机制</span></a></p><p>Redis 如果是集群（而不是只有一个 Redis ），如果分布式锁的数据不同步怎么办？</p><ul><li>红锁(Redlock) -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://blog.csdn.net/feiying0canglang/article/details/113258494" title="Redisson--红锁(Redlock)--使用/原理"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Redisson–红锁(Redlock)–使用&#x2F;原理</span></a></li></ul></div><div class="tab-item-content" id="锁（分布式锁）-3"><p><strong>Redisson 实现分布式锁</strong></p><p>Java 客户端，数据网格</p><p>实现了很多Java里支持的接口和数据结构</p><p>Redisson 是一个 java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</strong></p><p><strong>两种引入方式：</strong></p><ol><li>spring boot starter 引入（不推荐，版本迭代太快，容易冲突）<ul><li>github链接 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter"   title="redisson-spring-boot-starter"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>redisson-spring-boot-starter</span></a></li></ul></li><li>※直接引入</li></ol><p>访问 redisson 的 github 仓库，点击 Quick Start</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406051347776.png"></p><p>使用 maven 导入包</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202406051348958.png" alt="image-20240605134830896"></p><p>往下翻就有 Java 的快速实现。</p><p>编写 RedissonConfig 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span> <span class="comment">// 直接从配置文件中读取</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisAddress</span> <span class="operator">=</span> String.format(<span class="string">&quot;reids://%s:%s&quot;</span>,host,port);</span><br><span class="line">        config.useSingleServer().setAddress(redisAddress).setDatabase(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redisson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="组队功能"><a href="#组队功能" class="headerlink" title="组队功能"></a>组队功能</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>用户可以创建一个队伍，设置队伍的人数、队伍名称（标题）、秒速、超时时间</p><ul><li>队长、剩余的人数</li><li>聊天？</li><li>用户可以加入队伍（其他、未满、未过期）</li><li>邀请</li><li>是否需要队长同意？</li><li>用户可以退伍（如果队长推出，权限转移给第二早加入的用户 —— 先来后到）</li><li>队长可以解散队伍</li><li>分享队伍 &#x3D;&gt; 邀请其他用户加入队伍</li><li>公开或者加密</li><li>修改队伍信息</li><li>不展示已过期的队伍</li><li>可以加入多个队伍，但是要有上限</li><li>队伍人满后发送消息通知</li><li>用户创建队伍的上限多少</li></ul><p>展示队伍列表，根据名称搜索队伍，信息流中不展示已过期的队伍。</p><h3 id="系统（接口）设计"><a href="#系统（接口）设计" class="headerlink" title="系统（接口）设计"></a>系统（接口）设计</h3><ol><li>请求参数是否为空？</li><li>是否登录，未登录不允许创建</li><li>校验信息<ol><li>队伍人数 &gt;1 且 &lt;&#x3D;20</li><li>队伍标题 &lt;&#x3D; 20</li><li>描述 &lt;&#x3D; 512</li><li>teamStatus 是否公开（int）不传默认为 0 （公开）</li><li>密码有的话 &lt;&#x3D; 32</li><li>超时时间 &gt; 当前时间</li><li>校验用户最多创建5个队伍</li></ol></li><li>插入队伍信息到队伍表</li><li>插入用户 &#x3D;&gt; 队伍关系到关系表</li></ol><h3 id="数据库表设计-1"><a href="#数据库表设计-1" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><h4 id="队伍表-team"><a href="#队伍表-team" class="headerlink" title="队伍表 team"></a>队伍表 team</h4><p>字段：</p><ul><li>id 主键 bigint （最简单、连续，放 url 上比较简短，但缺点是爬虫）</li><li>name 队伍名称</li><li>description 描述</li><li>maxNum 最大人数</li><li>expireTime 过期时间</li><li>userId 用户 id</li><li>status 0 - 公开， 1 - 私有 ， 2 - 加密</li><li>teamPassword 密码</li><li>createTime 创建时间</li><li>updateTime 更新时间 </li><li>isDelete 是否删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> team</span><br><span class="line">(</span><br><span class="line">    id           <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    name     <span class="type">varchar</span>(<span class="number">256</span>)                     <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;队伍名称&#x27;</span>,</span><br><span class="line">    description  <span class="type">varchar</span>(<span class="number">1024</span>)                      <span class="keyword">null</span> comment <span class="string">&#x27;队伍描述&#x27;</span>,</span><br><span class="line">    maxNum   <span class="type">int</span>                                <span class="keyword">null</span> comment <span class="string">&#x27;最大人数&#x27;</span>,</span><br><span class="line">    expireTime   datetime  <span class="keyword">null</span> comment <span class="string">&#x27;过期时间&#x27;</span>,</span><br><span class="line">    userId           <span class="type">bigint</span> comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    teamStatus     <span class="type">varchar</span>(<span class="number">256</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;用户身份 user - 用户 admin - 管理员 ban - 封号&#x27;</span>,</span><br><span class="line">    teamPassword <span class="type">varchar</span>(<span class="number">512</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;队伍密码&#x27;</span>,        </span><br><span class="line">    createTime   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    isDelete     tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">) comment<span class="string">&#x27;队伍&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个关系：</p><ol><li>用户加了哪些队伍？</li><li>队伍里有哪些用户？</li></ol><p>方式：</p><ol><li>建立用户 - 队伍关系表 teamId userId（便于修改，查询性能高一点，可以选择这个，不用全表遍历）</li><li>用户表补充已加入的队伍字段，队伍表补充已加入的用户字段（不用写多对多的代码，可以直接根据队伍查用户、根据用户查队伍）</li></ol><h4 id="用户-队伍表"><a href="#用户-队伍表" class="headerlink" title="用户 - 队伍表"></a>用户 - 队伍表</h4><p>user_team</p><p>字段：</p><ul><li>id 主键</li><li>userId 用户 id</li><li>teamid 队伍 id</li><li>joinTime 加入时间</li><li>createTime 创建时间</li><li>updateTime 更新时间 </li><li>isDelete 是否删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_team</span><br><span class="line">(</span><br><span class="line">    id           <span class="type">bigint</span> auto_increment<span class="keyword">primary</span> key,</span><br><span class="line">    userId       <span class="type">bigint</span> comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    teamId       <span class="type">bigint</span> comment <span class="string">&#x27;队伍id&#x27;</span>,</span><br><span class="line">    joinTime    datetime   <span class="keyword">null</span> comment <span class="string">&#x27;加入时间&#x27;</span>,</span><br><span class="line">    createTime   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    isDelete     tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">) comment<span class="string">&#x27;队伍&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="为什么需要请求参数包装类？"><a href="#为什么需要请求参数包装类？" class="headerlink" title="为什么需要请求参数包装类？"></a>为什么需要请求参数包装类？</h3><ol><li>请求参数名称和实体类不一样</li><li>有一些参数用不到，如果要自动生成接口文档，会增加理解成本</li></ol><p>为什么需要包装类？</p><p>可能有些字段需要隐藏，不能返回给前端</p><p>或者有些字段某些方法是不关心的</p><h3 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">// 开启事物</span></span><br></pre></td></tr></table></figure><p>为了保证队伍表和用户队伍表的数据一致。防止队伍表插入成功而队伍用户表插入失败的情况。如果出现异常，事物自动回滚。</p><h3 id="查询队伍列表"><a href="#查询队伍列表" class="headerlink" title="查询队伍列表"></a>查询队伍列表</h3><p>展示队伍列表，根据名称搜索队伍，信息流中不展示已过期的队伍。</p><ol><li>从请求参数中取出队伍名称，如果存在则作为查询条件</li><li>不展示已过期的队伍（根据过期时间筛选）</li><li>关联查询已加入队伍的用户信息</li><li>只有管理员才能查看加密的房间</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具指令存档</title>
      <link href="/2024/05/09/%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%98%E6%A1%A3/"/>
      <url>/2024/05/09/%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%98%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="指令记录存档"><a href="#指令记录存档" class="headerlink" title="指令记录存档"></a>指令记录存档</h1><div class="tip info"><p>此文章用来存储一些工具的使用指令。人老了记不住。 </p></div><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>工作区-&gt;暂存区 git add</li><li>暂存区-&gt;仓库 git commit -m ‘备注’</li><li>查看状态 git status</li><li>查看提交记录 git log 等等，自己简化的指令 git-log</li><li>版本回退  git reset –hard commitID</li><li>查看分支 git branch</li><li>创建并切换分支 git checkout -b 分支名</li><li>分支合并 git merge 分支名</li><li>删除分支 git branch -d 分支名 （需要切换到另一个分支上）</li><li>将本地仓库与gitee关联 git remote add origin 远程仓库的ssh</li><li>查看远程仓库 git remote</li><li>推送到远程仓库 git push [-f] (强制覆盖) origin master</li><li>推送到远端的同时并且建立起和远端分支的关联关系 git push –set-upstream origin master<ul><li>建立之后，可以省略分支名和远端名 git push</li></ul></li><li>克隆 get clone 仓库地址</li><li>抓取 git fetch [remote name] [branch name]</li><li>拉取 git pull [remote name] [branch name]</li></ul><h2 id="Java后端"><a href="#Java后端" class="headerlink" title="Java后端"></a>Java后端</h2><h3 id="将接收的JSON数据类型转化为对象并存储到Map中"><a href="#将接收的JSON数据类型转化为对象并存储到Map中" class="headerlink" title="将接收的JSON数据类型转化为对象并存储到Map中"></a>将接收的JSON数据类型转化为对象并存储到Map中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2 json 转对象（可以使用生成一个对象来进行接收，或者使用Map）</span></span><br><span class="line">        Map&lt;String, Object&gt;map = JSONUtil.toBean(result,Map.class);</span><br></pre></td></tr></table></figure><h2 id="Pyenv"><a href="#Pyenv" class="headerlink" title="Pyenv"></a>Pyenv</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看可安装的python发行版本</span><br><span class="line">pyenv install -l</span><br><span class="line"># 安装指定python版本</span><br><span class="line">pyenv install 3.9.0</span><br><span class="line"># 查看当前已安装的python版本(标*的为当前环境python)</span><br><span class="line">pyenv versions</span><br><span class="line">pyenv version</span><br><span class="line"># 切换python版本</span><br><span class="line">pyenv local 3.9.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重庆</title>
      <link href="/2024/05/09/%E9%87%8D%E5%BA%86/"/>
      <url>/2024/05/09/%E9%87%8D%E5%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h1><p>占个位置</p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 出游记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活着-余华</title>
      <link href="/2024/05/09/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/"/>
      <url>/2024/05/09/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="活着-余华"><a href="#活着-余华" class="headerlink" title="活着 - 余华"></a>活着 - 余华</h1><p>​福贵最初嚣张跋扈，一点不把别人放在眼里。对身边的人的行为充分展示了地主家的儿子的形象。到后来，福贵在赌场被坑，导致散尽家财。然后回家被失去了世界的样子。</p><p>​福贵的父亲也因为福贵从富贵的生活变成了极为清贫。在此后不久福贵的父亲就去世了。福贵感觉是自己害死了父亲。从此福贵的悲惨人生才刚刚开始。</p><p>​福贵输光了家财，家珍的父亲也来接走了她，并且家珍走的时候已经怀了有庆。<span class='p red large'>赌博可谓是让人妻离子散</span></p><p>​在一年多以后家珍也回来了，家珍是真爱着福贵。再往后真是清贫人生、悲惨人生。</p><p>​不久之后，福贵的母亲也病危了，福贵去买药的时候还被长官抓取拉炮车，去前线打仗了。辗转一年多才回到家。在此期间，福贵的母亲已经离世，凤霞也因为生了场病而聋哑了。<span class='p red large'>支离破碎呐</span></p><p>​继续保持着贫苦的生活，再往后县长夫人生病，需要抽血，结果把有庆害死了，一个这么年轻的孩子。<span class='p red large'>官大真是压死人</span></p><p>​后来，凤霞和二喜结婚了。二喜对凤霞非常好，结婚也是花了很多钱弄得很有排面。凤霞换怀孕了，到生孩子的时候，进产房很久没有出来，很久之后医生出来开玩笑的说，保大还是保小。二喜慌了，连忙说着保大，我要凤霞。但是医生说开玩笑的，两个都没事。但刚说不久，凤霞就因为大出血离世了。</p><p>​二喜从此背着孩子干搬运活，非常辛苦非常累。<span class='p red large'>这才是底层人的苦难</span>，后来，二喜因为干活的时候出了意外，离世了。从此只有福贵和苦根相依为命。</p><p>​福贵年纪也大了，干起活来也不太顺利。日子这么贫苦的过着。苦根长大一些后，也帮着福贵干起农活，在干活时突然发烧了，福贵将苦根带回家休息。想着给苦根吃饱些，就去煮了许多豆子。但是苦根因为吃了太多豆子而离世。<span class='p red large'>有时候命运就是这么悲惨，不知道什么时候就没了</span></p><p>​最后只有福贵一个人了，福贵去买了头牛与自己相依为命。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户中心</title>
      <link href="/2024/05/08/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
      <url>/2024/05/08/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="用户中心"><a href="#用户中心" class="headerlink" title="用户中心"></a>用户中心</h1><h2 id="好用的工具收集"><a href="#好用的工具收集" class="headerlink" title="好用的工具收集"></a>好用的工具收集</h2><blockquote><!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --><dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> <version>3.14.0</version></dependency><p>用于</p></blockquote><h2 id="企业做项目流程"><a href="#企业做项目流程" class="headerlink" title="企业做项目流程"></a>企业做项目流程</h2><ul><li>需求分析</li><li>设计（概要设计、详细设计）</li><li>技术选型</li><li>初始化 &#x2F; 引入需要的技术</li><li>写 Demo</li><li>写代码（实现业务逻辑）</li><li>测试（单元测试）</li><li>代码提交 &#x2F; 代码评审</li><li>部署</li><li>发布</li></ul><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>登录 &#x2F; 注册</li><li>用户管理（管理员）对用户的查询、修改</li><li>用户校验（仅VIP使用）</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端：</p><ol><li>三件套</li><li>React</li><li>组件库 Ant Design</li><li>Umi</li><li>Ant Design Pro（现成的管理系统）</li></ol><p>后端：</p><ol><li>Java</li><li>Spring（依赖注入框架，帮助你管理Java对象，集成一些其他的内容）</li><li>Spring MVC（web框架，提供接口访问，restful接口等能力）</li><li>mybatis（Java 操作数据库的框架，持久层框架，对 jdbc 的封装）</li><li>mybatis-plus（对 mybatis 的增强，不用写 sql 也能实现增删改查）</li><li>Spring-Boot（&#x3D;&#x3D;快速启动&#x3D;&#x3D; &#x2F; 快速集成项目。不用自己管理 spring 配置，不用自己整合各种框架）</li><li>mysql</li></ol><p>部署：服务器 &#x2F; 容器（平台）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol><li>初始化项目<ol><li>前端初始化<ol><li>初始化项目</li><li>引入组件库</li><li>框架介绍 &#x2F; 瘦身</li></ol></li><li>后端初始化<ol><li>准备环境（MySQL之类的）</li><li>引入框架（整合框架）</li></ol></li></ol></li><li>登录 &#x2F; 注册<ol><li>前端</li><li>后端</li></ol></li><li>用户管理（仅管理员可见）<ol><li>前端</li><li>后端</li></ol></li></ol><h2 id="第二次直播任务"><a href="#第二次直播任务" class="headerlink" title="第二次直播任务"></a>第二次直播任务</h2><ul><li>用户库表设计</li><li>完成登录注册的前后端开发</li><li>完成用户管理后台的前后端开发</li></ul><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>有哪些表（模型）？表中有哪些字段？ 字段类型？ 数据库字段添加索引？ 表与表之间的关联？</p><p>用户表：</p><ul><li><p>id（主键） varchar</p></li><li><p>userAccount 账号</p></li><li><p>userName 昵称 varchar</p></li><li><p>avatarUrl 头像 varchar</p></li><li><p>gender 性别 tinyint</p></li><li><p>password 密码 varchar</p></li><li><p>phone 电话 varchar</p></li><li><p>email 邮箱 varchar</p></li><li><p>isValid 是否有效 tinyint 0 1 (比如被封号)</p></li></ul><hr><ul><li>createTime 创建时间 datetime</li><li>updateTime 更新时间 datetime</li><li>isDelete 是否删除 tinyint</li></ul><h3 id="自动生成器的使用"><a href="#自动生成器的使用" class="headerlink" title="自动生成器的使用"></a>自动生成器的使用</h3><p>MyBatisX 插件，自动根据数据库生成domain 实体对象，mapper（操作数据库对象），mapper.xml (定义了mapper对象和数据库的关联，可以在里面自己写SQL)，service（包括常用的增删改查），serviceImpl（具体实现 service）</p><h3 id="注册逻辑"><a href="#注册逻辑" class="headerlink" title="注册逻辑"></a>注册逻辑</h3><ol><li>用户在前端输入账户和密码、以及校验码（todo）</li><li>校验用户的账户、密码、校验密码，是否符合要求<ol><li>账户不小于 4 位</li><li>密码不小于 6 位</li><li>账户不能重复</li><li>账户不包含特殊字符</li></ol></li><li>对密码进行加密（密码千万不要以明文存储到数据库中）</li><li>向数据库插入用户数据</li></ol><h2 id="第三次直播"><a href="#第三次直播" class="headerlink" title="第三次直播"></a>第三次直播</h2><h3 id="计划-1"><a href="#计划-1" class="headerlink" title="计划"></a>计划</h3><ol><li>开发完成后端登录功能 （单机登录）</li><li>开发后端用户的管理接口 （用户的查询 &#x2F; 状态的更改）</li><li>开发前端用户登录注册功能</li><li>讨论如何校验用户（VIP可以使用）</li></ol><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><p>接收参数：用户账户、密码</p><p>请求类型：POST</p><blockquote><p>请求参数很长时，不建议使用GET</p></blockquote><p>请求体：JSON 格式的数据</p><p>返回值：用户信息（&#x3D;&#x3D;脱敏&#x3D;&#x3D;）</p><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ol><li>校验用户的账户、密码、是否合法</li><li>非空</li><li>账户不小于 4 位</li><li>密码不小于 6 位</li><li>账户不包含特殊字符</li><li>校验密码是否输入正确，要和数据库中的密文密码去对比</li><li>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</li><li>我们要记录用户的登录态（session），将其存到服务器上（用后端 Springboot 框架封装的服务器 tomcat 去记录）</li><li>返回用户信息 （脱敏）</li></ol><h4 id="控制层-Controller-封装请求"><a href="#控制层-Controller-封装请求" class="headerlink" title="控制层 Controller 封装请求"></a>控制层 Controller 封装请求</h4><blockquote><p>@RestController 适用于编写 restful 风格的 api ， 返回值默认为 JSON 类型</p></blockquote><p>controller 层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</p><p>service 层是对业务逻辑的校验（有可能被 controller 之外的类调用）</p><h4 id="如何知道是哪个用户登录了？"><a href="#如何知道是哪个用户登录了？" class="headerlink" title="如何知道是哪个用户登录了？"></a>如何知道是哪个用户登录了？</h4><ol><li>连接服务器端后，得到一个session1 状态，返回给前端</li><li>登陆成功后，得到了登陆成功的session，并且给该session设置一些值（比如用户信息），返回给前端一个设置cookie的“命令”</li><li>前端接收到后端的命令后，设置cookie，保存到浏览器内</li><li>前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求</li><li>后端拿到前端传来的cookie，找到对应的session</li><li>后端从session中可以取出基于该session存储的变量（用户的登录信息，登录名等等）</li></ol><h3 id="用户管理接口"><a href="#用户管理接口" class="headerlink" title="用户管理接口"></a>用户管理接口</h3><ol><li>查询用户<ol><li>允许根据用户名查询</li></ol></li><li>删除用户</li></ol><h4 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h4><p>前端需要向后端发送请求</p><p>前端 ajax 来请求后端</p><p>axios 封装了 ajax</p><p>request 是 ant design 项目又封装了一次</p><p>追踪 request 源码：用到了 umi 的插件、 requestConfig  是一个配置</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>正向代理：替客户端发送请求</p><p>反向代理：替服务器接受请求</p><p>怎么做代理？</p><ul><li>Nginx 服务器</li><li>Node.js 服务器</li></ul><h2 id="前端不再开发"><a href="#前端不再开发" class="headerlink" title="前端不再开发"></a>前端不再开发</h2><p>此项目的教程时间有点久远了。所以很多东西都不一样了。我还是注重后端开发，所以前端的就不研究了。</p><h2 id="末-直播内容"><a href="#末-直播内容" class="headerlink" title="末 - 直播内容"></a>末 - 直播内容</h2><ol><li>开发用户注销前端 &#x2F; 后端</li><li>补充用户注册校验逻辑前端 &#x2F; 后端</li><li>后端代码优化</li><li>前端代码优化</li><li>项目部署上线<ol><li>web 服务器</li><li>容器部署</li><li>绑定域名</li></ol></li></ol><h3 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h3><ol><li><p>通用返回对象</p><p> 目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功的还是失败的</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abei&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//封装后</span></span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1111</span> <span class="comment">//自定义错误码，与自己的业务强相关</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abei&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">50001</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXX地方发生了异常&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自定义错误码</li><li>自定义返回信息</li></ul></li><li><p>封装全局异常处理</p><ol><li>定义业务异常类<ol><li>相对 java 的异常类，支持更多字段</li><li>自定义构造函数，更灵活 &#x2F; 快捷的设置字段</li></ol></li><li>编写全局异常处理器<ol><li>捕获代码中所有的异常，集中处理，让前端得到更详细的业务报错 &#x2F; 信息</li><li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li><li>集中处理，比如记录日志</li></ol></li></ol></li><li><p>全局请求日志和登录校验</p></li></ol><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><p>本地开发： localhost</p><p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上。</p><p>为什么需要？</p><ol><li>每个环境互不影响</li><li>区分不同的阶段： 开发 &#x2F; 测试 &#x2F; 生产</li><li>对项目进行优化：<ol><li>本地日志级别</li><li>精简依赖，节省项目体积</li><li>项目的环境 &#x2F; 参数可以调整，比如 JVM 参数、</li></ol></li></ol><p>针对不同环境做不同事情。</p><p>多环境分类：</p><ol><li>本地环境：（自己的电脑）localhost</li><li>开发环境：（远程开发）大家连同一台机器，为了大家开发方便</li><li>测试环境：（测试）开发 &#x2F; 测试 &#x2F; 产品，分为 性能测试 &#x2F; 功能测试 &#x2F; 系统集成测试，独立的数据库，独立的服务器</li><li>预发布环境：（体验服）和正式环境一致，正式数据库，更严谨，查出更多问题</li><li>正式环境（上线，公开对外访问的项目）：尽量不要改动，保证上线前代码是”完美“运行</li><li>沙箱环境（实验环境）：为了实验，测试新功能</li></ol><h3 id="后端多环境上线"><a href="#后端多环境上线" class="headerlink" title="后端多环境上线"></a>后端多环境上线</h3><p>SpringBoot项目，通过 application.yml 添加不同的后缀来区分配置文件</p><p>可以在启动项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\user-center-backend-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马赛克项目部署文档</title>
      <link href="/2024/05/08/%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/"/>
      <url>/2024/05/08/%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于 Flask 框架搭建</p></blockquote><h1 id="视频人脸马赛克——部署文档"><a href="#视频人脸马赛克——部署文档" class="headerlink" title="视频人脸马赛克——部署文档"></a>视频人脸马赛克——部署文档</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>Pyhton3.9.5</p><blockquote><p>安装</p><ul><li><p>安装gcc</p><p>  yum install gcc -y</p></li><li><p>安装Python依赖</p><p>  yum install zlib zlib-devel -y<br>  yum install bzip2 bzip2-devel  -y<br>  yum install ncurses ncurses-devel  -y<br>  yum install readline readline-devel  -y<br>  yum install openssl openssl-devel  -y<br>  yum install xz lzma xz-devel  -y<br>  yum install sqlite sqlite-devel  -y<br>  yum install gdbm gdbm-devel  -y<br>  yum install tk tk-devel  -y<br>  yum install mysql-devel -y<br>  yum install python-devel -y<br>  yum install libffi-devel -y</p></li><li><p>下载源码 Python3.9.5<br>  yum install wget -y<br>  wget <a href="https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz">https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz</a></p></li><li><p>解压 &amp; 编译 &amp; 安装</p><p>  tar -xvf Python-3.9.5.tgzcd Python-3.9.5<br>  .&#x2F;configure<br>  make all<br>  make install</p></li></ul></blockquote></li><li><p>虚拟环境（使用virtualenv）</p><ul><li><p>安装virtualenv</p><ul><li>pip3.9 install virtualenv</li></ul></li><li><p>创建虚拟环境</p><ul><li><p>mkdir envs<br>  virtualenv envs&#x2F;mosaic –python&#x3D;python3.9</p><p>  &#x3D;&#x3D;virtualenv envs&#x2F;eye_system_python –python&#x3D;$(pyenv which python3.6)&#x3D;&#x3D;</p></li></ul></li><li><p>激活虚拟环境</p><ul><li>source envs&#x2F;nb&#x2F;bin&#x2F;activate</li></ul></li><li><p>进入项目所在文件夹，安装 requirement.txt 中的相关依赖</p><ul><li>pip install -r requirement.txt</li></ul></li></ul></li></ul><blockquote><p>[!NOTE]</p><p>此项目需要使用&#x3D;&#x3D;ffmpeg&#x3D;&#x3D;</p></blockquote><h3 id="ffmpeg安装"><a href="#ffmpeg安装" class="headerlink" title="ffmpeg安装"></a>ffmpeg安装</h3><ul><li>安装yasm</li></ul><blockquote><p># wget <a href="http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz">http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz</a></p><p># tar -xvf yasm-1.3.0.tar.gz</p><p># cd yasm-1.3.0</p><p>编译安装yasm，安装ffmpeg必须要安装的</p><p># .&#x2F;configure &amp;&amp; make &amp;&amp; make install</p></blockquote><ul><li>安装x264</li></ul><blockquote><p>安装nasm</p><p># wget <a href="http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz">http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz</a> –no-check-certificate</p><p># tar xvJf nasm-2.13.03.tar.xz</p><p># cd nasm-2.13.03</p><p># .&#x2F;configure &amp;&amp; make &amp;&amp; make install</p><p>安装x264</p><p># yum -y install git</p><p># git clone <a href="https://code.videolan.org/videolan/x264.git">https://code.videolan.org/videolan/x264.git</a>　　　　#下载x264安装</p><p># cd x264</p><p># .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;x264 –enable-shared –enable-static</p><p># make &amp;&amp; make install</p><p>添加环境变量</p><p># vim &#x2F;etc&#x2F;profile</p><p>export PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib&#x2F;pkgconfig</p><p># source &#x2F;etc&#x2F;profile     激活</p></blockquote><ul><li>安装ffmpeg</li></ul><blockquote><p># wget <a href="http://ffmpeg.org/releases/ffmpeg-5.1.3.tar.gz">http://ffmpeg.org/releases/ffmpeg-5.1.3.tar.gz</a></p><p># tar -xvf ffmpeg-5.1.3.tar.gz</p><p># cd ffmpeg-5.1.3</p><p># .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg5.1.3 –enable-gpl –enable-libx264 –extra-cflags&#x3D;”-I&#x2F;usr&#x2F;local&#x2F;x264&#x2F;include” –extra-ldflags&#x3D;”-L&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib”</p><p># make &amp;&amp; make install</p><p>&#x3D;&#x3D;添加环境变量&#x3D;&#x3D;</p><p># vim &#x2F;etc&#x2F;profile</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;ffmpeg&#x2F;bin</p><p># source &#x2F;etc&#x2F;profile     激活</p><p># vim &#x2F;etc&#x2F;ld.so.conf  #文件最后添加以下内容</p><p>&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib</p><p># ldconfig</p><p># &#x2F;usr&#x2F;local&#x2F;ffmpeg5.1.3&#x2F;bin&#x2F;ffmpeg -v　　　　#安装成功，查看环境变</p></blockquote><h3 id="运行及停止命令"><a href="#运行及停止命令" class="headerlink" title="运行及停止命令"></a>运行及停止命令</h3><p>使用nohup使得程序后台常驻（先进入项目文件夹）</p><ul><li>&#x3D;&#x3D;nohup python app.py &amp;&#x3D;&#x3D;</li></ul><p>停止命令，使用kill杀死进程</p><ul><li>&#x3D;&#x3D;ps aux | grep python app.py&#x3D;&#x3D; （查找进程）</li><li>&#x3D;&#x3D;kill PID&#x3D;&#x3D; (杀死进程)</li></ul><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ul><li>正常情况下命名为收到请求传递的名称，若在video中此名称已存在，则在此名称后加了五位随机字母为新名字。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上线 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署上线踩坑</title>
      <link href="/2024/05/08/%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/05/08/%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="部署上线踩坑"><a href="#部署上线踩坑" class="headerlink" title="部署上线踩坑"></a>部署上线踩坑</h1><h2 id="文件如何上传服务器"><a href="#文件如何上传服务器" class="headerlink" title="文件如何上传服务器"></a>文件如何上传服务器</h2><p>通过git工具传到gitee，然后通过clone到服务器上</p><p>修改代码在本地修改之后在提交到gitee上，在服务器上通过git pull 拉取</p><h2 id="如果项目中使用了ffprobe视频处理工具"><a href="#如果项目中使用了ffprobe视频处理工具" class="headerlink" title="如果项目中使用了ffprobe视频处理工具"></a>如果项目中使用了ffprobe视频处理工具</h2><p>需要将ffmpeg安装到服务器中，并且配置环境变量</p><p>见：<a href="https://blog.csdn.net/weixin_44692055/article/details/128848638">CentOS环境安装ffmpeg</a></p><h2 id="报错-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#报错-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="报错 libGL.so.1: cannot open shared object file: No such file or directory"></a>报错 libGL.so.1: cannot open shared object file: No such file or directory</h2><p>在虚拟环境中，卸载opencv-python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall opencv-python</span><br><span class="line">安装 opencv-python-headless</span><br><span class="line">pip install opencv-python-headless</span><br></pre></td></tr></table></figure><h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="yum源无法使用"><a href="#yum源无法使用" class="headerlink" title="yum源无法使用"></a>yum源无法使用</h2><p>参考文章：[<a href="https://www.cnblogs.com/Leehy0518/p/17317425.html">解决CentOS7的yum源无法正常使用</a>]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">报错信息如下</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">base                                                        | 3.6 kB  00:00:00     </span><br><span class="line">http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - &quot;Could not resolve host: mirrors.cloud.aliyuncs.com; Unknown error&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> One of the configured repositories failed (Extra Packages for Enterprise Linux 7 - x86_64),</span><br><span class="line"> and yum doesn&#x27;t have enough cached data to continue. At this point the only</span><br><span class="line"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="line"></span><br><span class="line">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="line"></span><br><span class="line">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="line">        upstream. This is most often useful if you are using a newer</span><br><span class="line">        distribution release than is supported by the repository (and the</span><br><span class="line">        packages for the previous distribution release still work).</span><br><span class="line"></span><br><span class="line">     3. Run the command with the repository temporarily disabled</span><br><span class="line">            yum --disablerepo=epel ...</span><br><span class="line"></span><br><span class="line">     4. Disable the repository permanently, so yum won&#x27;t use it by default. Yum</span><br><span class="line">        will then just ignore the repository until you permanently enable it</span><br><span class="line">        again or use --enablerepo for temporary usage:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --disable epel</span><br><span class="line">        or</span><br><span class="line">            subscription-manager repos --disable=epel</span><br><span class="line"></span><br><span class="line">     5. Configure the failing repository to be skipped, if it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">        compromise:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --save --setopt=epel.skip_if_unavailable=true</span><br><span class="line"></span><br><span class="line">failure: repodata/repomd.xml from epel: [Errno 256] No more mirrors to try.</span><br><span class="line">http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - &quot;Could not resolve host: mirrors.cloud.aliyuncs.com; Unknown error&quot;</span><br></pre></td></tr></table></figure><p>解决方法：修改vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 这个配置文件。此时我报错的原因是里面没有内容了</p><ul><li><p>添加基本内容</p></li><li><pre><code>  DEVICE=ens32  BOOTPROTO=dhcp  ONBOOT=yes  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再依次执行以下代码：</span><br><span class="line"></span><br><span class="line">```undefined</span><br><span class="line">重启网路</span><br><span class="line">systemctl restart NetworkManager.service</span><br><span class="line">清理yum缓存</span><br><span class="line">yum clean all</span><br><span class="line">更新缓存</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="部署成功后外网无法访问"><a href="#部署成功后外网无法访问" class="headerlink" title="部署成功后外网无法访问"></a>部署成功后外网无法访问</h2><blockquote><p>部署成功后只是</p></blockquote><h2 id="docker安装mysql无限重启"><a href="#docker安装mysql无限重启" class="headerlink" title="docker安装mysql无限重启"></a>docker安装mysql无限重启</h2><blockquote><p>缓冲池设置小一些。在my.cnf里面配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size=512M</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> 上线 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
