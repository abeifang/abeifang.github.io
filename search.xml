<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>镰仓</title>
      <link href="/2024/05/29/%E9%95%B0%E4%BB%93/"/>
      <url>/2024/05/29/%E9%95%B0%E4%BB%93/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Fb421b7YH?vd_source=3c345e27d8321a7372c0ef8871978426"   title="感受镰仓：倒挂列车，江之岛，大海，沙滩，文化。"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>感受镰仓：倒挂列车，江之岛，大海，沙滩，文化。</span></a></p><div class="tip key"><p>倒挂列车，好像武汉光谷也有</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292240791.png" alt="image-20240529224010377"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292217880.png" alt="image-20240529221747356"></p><div class="tip key"><p>感觉这种装修风格挺特别的</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292218467.png" alt="image-20240529221854840"></p><div class="tip key"><p>好像我还没见过这种海边路唱的人，挺不错的</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292220910.png" alt="image-20240529222048125"></p><div class="tip key"><p>等我毕业一定要再去一次海边！！！</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292225609.png" alt="image-20240529222514114"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292225726.png" alt="image-20240529222526107"></p><div class="tip key"><p>好特别的视角，虽然不是那么的科技，但是有复古的味道</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292227802.png" alt="image-20240529222750277"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292228345.png" alt="image-20240529222808724"></p><div class="tip key"><p>这配音笑死我了，一定要去听一下这段的配音，17:25</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292228205.png" alt="image-20240529222851730"></p><div class="tip key"><p>海边真的好舒服，可惜是个内陆人。。。</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405292231222.png" alt="image-20240529223115493"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闯进如梦般的樱花世界</title>
      <link href="/2024/05/29/%E9%97%AF%E8%BF%9B%E5%A6%82%E6%A2%A6%E8%88%AC%E7%9A%84%E6%A8%B1%E8%8A%B1%E4%B8%96%E7%95%8C/"/>
      <url>/2024/05/29/%E9%97%AF%E8%BF%9B%E5%A6%82%E6%A2%A6%E8%88%AC%E7%9A%84%E6%A8%B1%E8%8A%B1%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Tx4y1h7KV?vd_source=3c345e27d8321a7372c0ef8871978426"   title="闯进如梦般的樱花世界！"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>闯进如梦般的樱花世界！</span></a></p><div class="tip key"><p>看着这樱花烂漫的时间，我却还在工位上为代码发愁！</p></div><div class="tip key"><p>摘自评论：</p><p>​看着看着莫名落泪了。想到现在正是四月，窗外正是春光明媚，我却囿于日复一日的考试和高考将至的巨大压力中，少有片刻的喘息机会。想到现在也正是人生的春天，十八岁也正是最蓬勃的年纪，一路上却常常伴随着乌云和阴雨，少有阳光普照的日子。但我知道我一直是一个向往阳光的人，所以才会抓紧一个个明媚的春日午后，拿起相机定格下每一个转瞬即逝的瞬间；所以才会喜欢上那些像光一样照亮我生活的人。今天见到了久违的高一语文老师，他是我整个高中阶段所遇到最可亲可敬的一位老师。但是在高三学年开学前，他却生了一场大病，从那以后我就再没见过他，直到今天中午才时隔一个多学期再次见到他。他依然是老样子，面对学生时总是不吝啬笑容和鼓励。很难相信他刚刚经历过——甚至仍在经历着——病痛的折磨。也许人生就是这样吧，不光有春天，也有秋天；不光有和煦的微风和暖人的阳光，也有阴霾的日子和刺骨的寒。我又想起冯至的那段话“人们爱把青年比作春，这比喻是正确的。可是彼此的相似点与其说是青年人的晴朗有如春阳的明丽，倒不如从另一方面看，青年人的愁苦、青年人的生长，更像那在阴云暗淡的风里、雨里、寒里演变着的春。因为后者比前者更漫长、沉重而更有意义。”所以也许乌云和阴雨都是暂时的，经历过它们的冲刷与磨砺后变得坚韧并独立的我自会蜕变并迎来人生的夏天；又或者乌云和阴雨并不随人生阶段的转变而消失，它们会陪伴我的一生直至我的灵魂如烟散去，那我也就只好恭候它们每一次的到来，并珍惜每一次云销雨霁后的彩虹。最后我还想送给自己一句话：“路虽远，行则将至。”</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291850711.png" alt="image-20240529185018396"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291850436.png" alt="image-20240529185027205"></p><div class="tip key"><p>惬意</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291852816.png" alt="image-20240529185201469"></p><div class="tip key"><p>好帅的柴犬</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291853953.png" alt="image-20240529185340540"></p><div class="tip key"><p>人走了就不叫了，哈哈哈哈哈哈</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291854872.png" alt="image-20240529185404483"></p><div class="tip key"><p>这厕所能拉出屎吗？感觉被一万双眼睛盯着</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291857959.png" alt="image-20240529185720462"></p><div class="tip key"><p>这种风格还挺治愈的</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291858695.png" alt="image-20240529185807258"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291858481.png" alt="image-20240529185817077"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291859512.png" alt="image-20240529185903046"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291859607.png" alt="image-20240529185929212"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291900248.png" alt="image-20240529190043809"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291902502.png" alt="image-20240529190203910"></p><div class="tip key"><p>看起来貌似还不错</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291903824.png" alt="image-20240529190259958"></p><div class="tip key"><p>这一幕大赞！</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291904254.png" alt="image-20240529190451634"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291905086.png" alt="image-20240529190505462"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习笔记</title>
      <link href="/2024/05/29/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/29/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p>学习概览：</p><ol><li>基础篇<ul><li>初识JVM</li><li>字节码文件详解</li><li>Java 内存结构</li><li>垃圾回收</li><li>类的生命周期和类加载器</li></ul></li><li>实战篇<ul><li>内存泄漏<ul><li>概念学习</li><li>监控工具</li><li>产生原因</li><li>线上实战</li></ul></li><li>GC 调优</li><li>性能调优<ul><li>JMH 性能测试</li><li>线上实战</li></ul></li></ul></li><li>高级篇<ul><li>即时编译器 JIT</li><li>ASM 字节码增强</li><li>Java Agent 技术</li><li>ZGC </li><li>GraalVM<ul><li>功能介绍</li><li>入门案例</li><li>Spring Native</li><li>Web 应用</li></ul></li></ul></li><li>原理篇<ul><li>Java 对象布局</li><li>异常、反射原理</li><li>G1 垃圾回收器工作原理</li><li>编译器优化<ul><li>方法内联</li><li>逃逸分析</li></ul></li></ul></li><li>面试题<ul><li>常见的 JVM 参数</li><li>Tomcat 的类加载器</li><li>ThreadLocal 会内存泄露吗？</li><li>如何优化减少 Full GC</li><li>三色标记法是什么？</li></ul></li></ol><h2 id="初识-JVM"><a href="#初识-JVM" class="headerlink" title="初识 JVM"></a>初识 JVM</h2><p>JVM（Java Virtual Machine）: Java虚拟机</p><h3 id="JVM-的功能"><a href="#JVM-的功能" class="headerlink" title="JVM 的功能"></a>JVM 的功能</h3><p>解释和运行： 对字节码文件中的指令，实时的解释成机器码，让计算机执行</p><p>内存管理：</p><ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制，回收不再使用的对象</li></ul><p>即时编译（JIT）</p><ul><li>对热点代码进行优化，提升执行效率</li><li>Java 语言如果不做任何优化，性能不如C、C++等语言</li><li>目的是为了跨平台</li></ul><h3 id="常见的-JVM"><a href="#常见的-JVM" class="headerlink" title="常见的 JVM"></a>常见的 JVM</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405290945433.png" alt="image-20240529094548345"></p><h2 id="字节码文件详解"><a href="#字节码文件详解" class="headerlink" title="字节码文件详解"></a>字节码文件详解</h2><h3 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h3><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405290955343.png" alt="image-20240529095508295" style="zoom:50%;" /><h3 id="字节码文件的组成"><a href="#字节码文件的组成" class="headerlink" title="字节码文件的组成"></a>字节码文件的组成</h3><h4 id="以正确姿势打开文件"><a href="#以正确姿势打开文件" class="headerlink" title="以正确姿势打开文件"></a>以正确姿势打开文件</h4><ul><li>字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读。</li></ul><p>通过NotePad++ 使用十六进制插件查看class文件：</p><p>左边为地址，中间为十六进制数据，右边为编码</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405290959919.png" alt="image-20240529095935829"></p><p>推荐使用<a href="https://github.com/ingokegel/jclasslib/releases">jclasslib</a>工具查看字节码文件。</p><h4 id="字节码文件组成"><a href="#字节码文件组成" class="headerlink" title="字节码文件组成"></a>字节码文件组成</h4><p>基础信息：魔数、字节码文件对应的 Java 版本号访问标识（public final等等）、父类和接口</p><p>常量池：保存了字符串常量、类或接口名、字段名主要在字节码指令中使用</p><p>字段：当前类或接口声明的字段信息</p><p>方法：当前类或接口声明的方法信息转换成字节码指令</p><p>属性：类的属性，比如源码的文件名、内部类的列表等</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291027489.png" alt="image-20240529102734415"></p><p>魔数：</p><p>每个字节码文件开头的4位都是指定的，称为魔数</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291029930.png" alt="image-20240529102946836"></p><p>魔数的作用：</p><ul><li>文件是无法通过文件扩展名来确定文件类型的，文件扩展名可以随意修改，不影响文件的内容</li><li>软件使用文件的头几个字节（文件头）去校验文件的类型，如果软件不支持该种类型就会出错。</li></ul><p>常见的文件类型：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291032834.png" alt="image-20240529103207777"></p><h4 id="主副版本号"><a href="#主副版本号" class="headerlink" title="主副版本号"></a>主副版本号</h4><ul><li>主副版本号指的是编译字节码文件的 JDK 版本号，主版本号用来标识大版本号，JDK1.0-1.1使用了45.0-45.3，JDK1.2 是 46 之后每升级一个大版本就加1；副版本号是当主版本号相同时作为区分不同版本的标识，一般只需要关心主版本号</li><li>1.2之后大版本号计算方法就是：主版本号 - 44</li><li>版本号的作用主要是判断当前字节码的版本和运行时的 JDK 是否兼容</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291037021.png" alt="image-20240529103715970"></p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><ul><li>字节码文件中常量池的作用：避免相同的内容重复定义，节省空间。</li></ul><p>解释：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291049766.png" alt="image-20240529104949709"></p><p>在常量池中，一份字面量只存储一份，可是现在有字段名和字面量相同，在常量池中如何存储呢。</p><ul><li>将abc字面量存入常量池中，并在常量池中存储一份String类型的字面量，引用到abc的字面量，a1和a2再引用这份String类型的字面量。</li><li>而变量abc的字段名是直接引用abc字面量，这样就节省了空间。</li></ul><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291053586.png" alt="image-20240529105319526" style="zoom: 50%;" /><ul><li>常量池中的数据都有一个编号，编号从1开始。在字段或者字节码指令中通过编号可以快速找到对应的数据。</li><li>字节码指令中通过编号引用到常量池的过程称之为&#x3D;&#x3D;符号引用&#x3D;&#x3D;</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291055093.png" alt="image-20240529105507030"></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>局部变量表</p><ul><li>数组为0的位置存储的函数参数args，根据声明顺序生成局部变量表下标</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291100182.png" alt="image-20240529110059147"></p><ul><li><p>iconst_0 将常量 0 放入操作数栈</p></li><li><p>istore_1 将操作数栈的数据取出放在局部变量表数组中下标为1的位置（弹出，操作数栈的数据销毁）</p></li><li><p>iload_1 将局部变量表数组中下标为1的位置的数据放入操作数栈（复制，局部变量表的数据保留）</p></li><li><p>iadd 将操作数栈中最上面的两个值相加，并将结果存入操作数栈中</p></li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291109804.png" alt="image-20240529110956718"></p><p>从字节码文件的层面解释 i &#x3D; i++：</p><p>将i++翻译为字节码文件之后，语句为：</p><ul><li>iinc 1 by 1：表示把局部变量表中下标为1的位置的数据加 1，并且此操作不进入操作数栈，是直接在局部变量表中完成。</li></ul><p>所以最初将0放入了操作数栈，然后存入局部变量表，然后局部变量表下标为 1 的数据 0 加 1，变成了 1，然后 istore_1 将操作数栈中的 0 存入 局部变量表中下标为 1 的位置，所以结果为 0</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291115133.png" alt="image-20240529111535071"></p><p>++i 同理：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405291116570.png" alt="image-20240529111632503"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API开发平台</title>
      <link href="/2024/05/28/API%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
      <url>/2024/05/28/API%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="API-开放平台"><a href="#API-开放平台" class="headerlink" title="API 开放平台"></a>API 开放平台</h1><p>背景：</p><ol><li>前端开发需要用到后端接口</li><li>使用现成的系统的功能（<a href="http://api.btstu.cn/%EF%BC%89">http://api.btstu.cn/）</a></li></ol><p>做一个 API 接口平台：</p><ol><li>防止攻击（安全性）</li><li>不能随便调用（限制、开通）</li><li>统计调用次数</li><li>计费</li><li>流量保护</li><li>API 接入</li></ol><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>做一个提供 API 接口调用的平台，用户可以注册登录，开通接口调用权限。用户可以使用接口，并且每次调用会进行统计。管理员可以发布接口、下线接口、接入接口，以及可视化接口的调用情况、数据分析。</p><h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405282030600.png" alt="image-20240528203059561"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端：</p><ol><li>Ant Design Pro</li><li>React</li><li>Ant Design Procomponents</li><li>Umi</li><li>Umi Request (Axios 的封装)</li></ol><p>后端：</p><ol><li>Java 、Spring Boot</li><li>Spring Boot Starter （SDK 开发）</li><li>？？？</li></ol><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>管理员可以对接口信息进行增删改查</li><li>用户可以访问前台，查看接口信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打工人的进化史</title>
      <link href="/2024/05/28/%E6%89%93%E5%B7%A5%E4%BA%BA%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/"/>
      <url>/2024/05/28/%E6%89%93%E5%B7%A5%E4%BA%BA%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1YZ421J75H?vd_source=3c345e27d8321a7372c0ef8871978426"   title="用100万+张照片，拍下中国打工人的命运迁徙"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>用100万+张照片，拍下中国打工人的命运迁徙</span></a></p><div class="tip key"><p>在我看来，这些是经济发展中付出辛勤劳动的人们。干了几十年了，生活不过还是底层，还是为了温饱而奔波。再看如今的社会环境，随处可见的不买五险一金的企业，随处可见的压榨劳动人民的工厂，纸上实现的双休制度，谁知道是不是监管的问题呢，或许本就是说说而已。都说报警是人生的第一课，人民警察是不是人民的呢😁。苦难不值得被歌颂</p></div><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281921557.png" alt="image-20240528192150039"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281926248.png" alt="image-20240528192616571"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281927394.png" alt="image-20240528192659876"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人总是喜欢带着滤镜看别人生活，却用放大镜看自己的烦恼</title>
      <link href="/2024/05/28/%E4%BD%A0%E6%83%B3%E6%B4%BB%E5%87%BA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
      <url>/2024/05/28/%E4%BD%A0%E6%83%B3%E6%B4%BB%E5%87%BA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1pw4m197yq?vd_source=3c345e27d8321a7372c0ef8871978426"   title="人总是喜欢带着滤镜看别人生活，却用放大镜看自己的烦恼"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>人总是喜欢带着滤镜看别人生活，却用放大镜看自己的烦恼</span></a></p><p>外卖员羡慕直播不用风吹日晒</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281904426.png" alt="image-20240528190422145"></p><p>直播的羡慕敲代码的可以坐办公室</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281904963.png" alt="image-20240528190457578"></p><p>程序员羡慕外卖员不加班有生活</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281905052.png" alt="image-20240528190537835"></p><p>都是一直羡慕别人的生活</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281906455.png" alt="image-20240528190616030"></p><p>慢慢进步就好了😁</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日打卡</title>
      <link href="/2024/05/28/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/"/>
      <url>/2024/05/28/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="每日打卡"><a href="#每日打卡" class="headerlink" title="每日打卡"></a>每日打卡</h1><div class="tip info"><p>从此开始记录每日的学习进展 </p></div><h2 id="2024年5月28日"><a href="#2024年5月28日" class="headerlink" title="2024年5月28日"></a>2024年5月28日</h2><div class="tip key"><p>健康：</p><ul><li>肚子疼了半个月了，准备周末去挂号检查一下</li><li>感觉身体状况不佳</li></ul><p>学习：</p><ul><li>今天翻了许多的文献，还是对这个算法怎么做没有思路</li><li>API 开放平台看了一些，因为电脑跑着爬虫，所以啥也干不了</li></ul></div><h2 id="2024年5月29日"><a href="#2024年5月29日" class="headerlink" title="2024年5月29日"></a>2024年5月29日</h2><div class="tip key"><p>学习：</p><ul><li>看了看眼睛的构成，知道了视网膜分割算法原理是检测每个像素点是否为血管从而完成分割的。但是还是不知道我这个屈光转裸眼怎么处理，害。</li><li>把伙伴匹配系统的代码拷过来继续做了，结果整了一晚上还是没有解决跨域问题，真是非常的离谱啊…</li><li>单词完成打卡，40个，过六级！</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日打卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屈光转裸眼算法研究记录</title>
      <link href="/2024/05/28/%E5%B1%88%E5%85%89%E8%BD%AC%E8%A3%B8%E7%9C%BC%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/05/28/%E5%B1%88%E5%85%89%E8%BD%AC%E8%A3%B8%E7%9C%BC%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>记录从头开始的学术研究过程 </p></div><h2 id="ChatGPT-建议"><a href="#ChatGPT-建议" class="headerlink" title="ChatGPT 建议"></a>ChatGPT 建议</h2><p>问题：我看了视网膜血管分割的原理，是判断每个像素点是否为血管从而完成分割。而我现在有一个算法任务，需要根据眼底图像和屈光度数生成裸眼图像，我看了许久还是没有思路，请你帮我想想从什么角度去完成此算法</p><h4 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><p>这听起来是一个有趣但也挑战性的算法任务！要根据眼底图像和屈光度数生成裸眼图像，你可以考虑以下几个方向：</p><ol><li><strong>图像处理与分割</strong>：首先，你可能需要对眼底图像进行预处理和分割，以便提取出感兴趣的特征，比如眼球边缘、视网膜等。这可能涉及到图像增强、边缘检测、分割算法等技术。</li><li><strong>屈光度数信息融合</strong>：屈光度数是对眼球光学系统的描述，可以通过屈光度数信息来推断眼睛的折射、散光等情况。你可以尝试将这些信息融合到图像处理的过程中，比如根据不同的屈光度数调整图像的对比度、亮度等参数，以模拟不同屈光度的视觉效果。</li><li><strong>视觉仿真与模型构建</strong>：考虑构建一个视觉仿真模型，该模型能够根据眼底图像和屈光度数生成对应的裸眼图像。这可能涉及到机器学习、深度学习等技术，你可以尝试使用已有的数据集进行训练，以学习眼底图像和屈光度数之间的关联，然后生成裸眼图像。</li><li><strong>医学知识与专家咨询</strong>：考虑到眼睛的复杂结构和视觉系统，如果可能的话，最好咨询眼科专家或医生，了解更多关于眼底图像、屈光度数和裸眼图像之间的关系，以及可能需要考虑的其他因素。</li></ol><p>综合考虑以上几点，你可以尝试设计一个综合利用图像处理、屈光度数信息和机器学习技术的算法，以实现根据眼底图像和屈光度数生成裸眼图像的目标。希望这些想法能够给你一些启发！</p><h2 id="眼底图像组成"><a href="#眼底图像组成" class="headerlink" title="眼底图像组成"></a>眼底图像组成</h2><p><strong>视盘(optic disc, OD)：</strong></p><ul><li>全称视神经盘，也叫视神经乳头，视网膜由黄斑向鼻侧约3mm处有一直径约1.5mm，境界清楚的淡红色圆盘状结构，称为视神经盘，简称视盘，如同一个盘子。</li></ul><p><strong>视杯（optic cup，OC）：</strong></p><ul><li>眼底所见视乳头有一个正常的生理性凹陷叫视杯（optic cup），如同一个杯子。杯子与盘子的直径之比就叫杯盘比，即C&#x2F;D。正常C&#x2F;D在0.3左右且一般不超过0.5。</li></ul><p><strong>视网膜中央动脉、静脉：</strong></p><ul><li>从视盘发出、放射状走形的大血管。其中，动脉呈鲜红色，静脉呈暗红色，动脉与静脉管径之比为2:3。</li></ul><p><strong>黄斑部：</strong></p><ul><li>位于眼球后极正中部，大小约一个视盘或稍大，无血管，其中心有一针尖大的反光点称中心凹光反射。</li></ul><p><strong>视网膜：</strong></p><ul><li>视网膜为一层神经组织构成的薄膜，是眼球壁的最内层。正常视网膜是无色透明的，因为其下的脉络膜充满血管，双眼眼底照相时视网膜呈均匀的深桔红色。</li></ul><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405281011996.png" alt="image-20240528101137886"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 算法研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常踩坑</title>
      <link href="/2024/05/15/%E6%97%A5%E5%B8%B8%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/05/15/%E6%97%A5%E5%B8%B8%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>记录在工作中不经意遇到的离谱bug </p></div><h1 id="日常踩坑"><a href="#日常踩坑" class="headerlink" title="日常踩坑"></a>日常踩坑</h1><h2 id="pycharm无法激活conda环境"><a href="#pycharm无法激活conda环境" class="headerlink" title="pycharm无法激活conda环境"></a>pycharm无法激活conda环境</h2><p>点击终端的时候，直接报错无法激活conda环境。并且已经设置了环境变量，且在自带的终端中可以激活。</p><p>解决方法：</p><p>​打开 Anaconda Prompt</p><p>​输入命令 conda init powershell</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>意大利 · 多洛米蒂</title>
      <link href="/2024/05/13/%E6%84%8F%E5%A4%A7%E5%88%A9%20%C2%B7%20%E5%A4%9A%E6%B4%9B%E7%B1%B3%E8%92%82/"/>
      <url>/2024/05/13/%E6%84%8F%E5%A4%A7%E5%88%A9%20%C2%B7%20%E5%A4%9A%E6%B4%9B%E7%B1%B3%E8%92%82/</url>
      
        <content type="html"><![CDATA[<h1 id="意大利-·-多洛米蒂"><a href="#意大利-·-多洛米蒂" class="headerlink" title="意大利 · 多洛米蒂"></a>意大利 · 多洛米蒂</h1><p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1mw411a7So?vd_source=3c345e27d8321a7372c0ef8871978426"   title="现实版魔戒世界！"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>现实版魔戒世界！</span></a></p><h2 id="阿卑斯山下的骏马"><a href="#阿卑斯山下的骏马" class="headerlink" title="阿卑斯山下的骏马"></a>阿卑斯山下的骏马</h2><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132308893.png" alt="image-20240513230804757" style="zoom:80%;" /><h2 id="121"><a href="#121" class="headerlink" title="121"></a>121</h2><blockquote><p>好辽阔壮观的地貌啊，显得我们真是非常渺小的。埋个伏笔，后面有另一番风景。</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132310250.png" alt="image-20240513231045955"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132310042.png" alt="image-20240513231058738"></p><h2 id="山峰山"><a href="#山峰山" class="headerlink" title="山峰山"></a>山峰山</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132314682.png" alt="image-20240513231442327"></p><blockquote><p>这种旅行太惬意了。碰个杯</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132316570.png" alt="image-20240513231645316"></p><blockquote><p>这个一看就是中国人去贴的。哈哈哈哈哈</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132318748.png" alt="image-20240513231815469"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132318082.png" alt="image-20240513231845941"></p><h2 id="奇幻天象"><a href="#奇幻天象" class="headerlink" title="奇幻天象"></a>奇幻天象</h2><blockquote><p>前方烟雾弹</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132319024.png" alt="image-20240513231950865"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132321796.png" alt="image-20240513232151682"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132322175.png" alt="image-20240513232247011"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132323078.png" alt="image-20240513232325012"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132323553.png" alt="image-20240513232335252"></p><h2 id="伏笔"><a href="#伏笔" class="headerlink" title="伏笔"></a>伏笔</h2><blockquote><p>魔戒山的另一番风味</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132326044.png" alt="image-20240513232630695"></p><blockquote><p>up的头发立起来了，是有被雷劈的风险的。太危险了</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132327436.png" alt="image-20240513232732177"></p><blockquote><p>无人机寄了</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132328455.png" alt="image-20240513232842792"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132329163.png" alt="image-20240513232903410"></p><h2 id="云顶天宫"><a href="#云顶天宫" class="headerlink" title="云顶天宫"></a>云顶天宫</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330968.png" alt="image-20240513233004048"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330436.png" alt="image-20240513233010814"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330267.png" alt="image-20240513233021628"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405132330232.png" alt="image-20240513233049474"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云旅行 - 伊斯坦布尔</title>
      <link href="/2024/05/12/%E4%BA%91%E6%97%85%E8%A1%8C-%E4%BC%8A%E6%96%AF%E5%9D%A6%E5%B8%83%E5%B0%94/"/>
      <url>/2024/05/12/%E4%BA%91%E6%97%85%E8%A1%8C-%E4%BC%8A%E6%96%AF%E5%9D%A6%E5%B8%83%E5%B0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="伊斯坦布尔"><a href="#伊斯坦布尔" class="headerlink" title="伊斯坦布尔"></a>伊斯坦布尔</h1><p>点击去B站看看 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.bilibili.com/video/BV1Km421j7v5?vd_source=3c345e27d8321a7372c0ef8871978426"   title="伊斯坦布尔"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>伊斯坦布尔</span></a></p><h2 id="早餐"><a href="#早餐" class="headerlink" title="早餐"></a>早餐</h2><p>红茶、无限供应的面包、番茄炒蛋（土耳其版）</p><blockquote><p>感觉这个面包没有盐味…</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122242097.png"/></div></div><h2 id="海鸥"><a href="#海鸥" class="headerlink" title="海鸥"></a>海鸥</h2><blockquote><p>有机会一定要去看看海鸥和这波光粼粼的海面！</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122248921.png" alt="image-20240512224833499"></p><h2 id="圣索菲亚大教堂（Hagia-Sophia）"><a href="#圣索菲亚大教堂（Hagia-Sophia）" class="headerlink" title="圣索菲亚大教堂（Hagia Sophia）"></a>圣索菲亚大教堂（Hagia Sophia）</h2><blockquote><p>看起来好辉煌，充满时代的味道</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122258493.png"/></div></div><blockquote><p>清真寺要围头发，还蛮特别的</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122253182.png"/></div></div><h2 id="礼拜"><a href="#礼拜" class="headerlink" title="礼拜"></a>礼拜</h2><blockquote><p>这是真礼拜！看来我过的是假的礼拜天。还满壮观的。</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122255620.png" alt="image-20240512225502220"></p><h2 id="蓝色清真寺"><a href="#蓝色清真寺" class="headerlink" title="蓝色清真寺"></a>蓝色清真寺</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122300281.png" alt="image-20240512230032090"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122300980.png" alt="image-20240512230059627"></p><h2 id="奇特方式外卖！"><a href="#奇特方式外卖！" class="headerlink" title="奇特方式外卖！"></a>奇特方式外卖！</h2><blockquote><p>外国竟然也这样取外卖，果然人都是懒的^-^</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122304731.png" alt="image-20240512230446449"></p><h2 id="摆摊"><a href="#摆摊" class="headerlink" title="摆摊"></a>摆摊</h2><blockquote><p>出国摆摊就现在！</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122306615.png" alt="image-20240512230628241"></p><h2 id="下午茶"><a href="#下午茶" class="headerlink" title="下午茶"></a>下午茶</h2><blockquote><p>说的是土耳其下午茶都是甜食，看这样子是甜得不得了。</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122308438.png" alt="image-20240512230832281"></p><h2 id="黄昏"><a href="#黄昏" class="headerlink" title="黄昏"></a>黄昏</h2><blockquote><p>好喜欢这种日落海边的感觉！一个内陆人民对海的执念，心旷神怡</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122309936.png" alt="image-20240512230946627"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122310190.png" alt="image-20240512231012012"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405122310877.png" alt="image-20240512231024689"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openCV 学习</title>
      <link href="/2024/05/12/openCV%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/05/12/openCV%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>介绍：用于记录自己学习 openCV 的理论笔记 </p></div><h1 id="openCV笔记"><a href="#openCV笔记" class="headerlink" title="openCV笔记"></a>openCV笔记</h1><h2 id="图像读取"><a href="#图像读取" class="headerlink" title="图像读取"></a>图像读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv_show</span>(<span class="params">name,img</span>):</span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;cat&#x27;</span>, img)</span><br><span class="line"><span class="comment"># img = cv2.imread(&#x27;cat.png&#x27;,cv2.IMREAD_GRAYSCALE)</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>,<span class="number">0</span>) <span class="comment">#读取灰度图像</span></span><br><span class="line">cv_show(<span class="string">&#x27;cat&#x27;</span>, img)</span><br><span class="line">imgType = <span class="built_in">type</span>(img)     <span class="comment"># 图像存储类型</span></span><br><span class="line">xiangSuNum = img.size  <span class="comment"># 像素个数</span></span><br><span class="line">insideType = img.dtype  <span class="comment"># 数据类型</span></span><br></pre></td></tr></table></figure><h2 id="视频读取"><a href="#视频读取" class="headerlink" title="视频读取"></a>视频读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">Video = cv2.VideoCapture(<span class="string">&#x27;test.mp4&#x27;</span>)</span><br><span class="line"><span class="comment"># 检查是否正确打开</span></span><br><span class="line"><span class="keyword">if</span> Video.isOpened():</span><br><span class="line">    isOpen, frame = Video.read() <span class="comment"># 读取视频的第一帧，isOpen是布尔值，判断是否正常打开。frame为读取第一帧的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    isOpen = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    ret, frame = Video.read()</span><br><span class="line">    <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) <span class="comment"># 转为灰度帧</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;result&#x27;</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">10</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:<span class="comment"># 27是ACSII码的退出键 waitKey(10)值指定处理完一帧后的等待时间</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">Video.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="截取部分图像数据"><a href="#截取部分图像数据" class="headerlink" title="截取部分图像数据"></a>截取部分图像数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------------------截取部分图像数据----------------------------------</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">cat = img[<span class="number">0</span>:<span class="number">500</span>,<span class="number">0</span>:<span class="number">500</span>] <span class="comment"># 从左上角开始计算</span></span><br><span class="line">cv_show(<span class="string">&#x27;cat&#x27;</span>,cat)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131546717.png" alt="image-20240513154649550"></p><h2 id="颜色通道提取"><a href="#颜色通道提取" class="headerlink" title="颜色通道提取"></a>颜色通道提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">b, g, r = cv2.split(img) <span class="comment"># # 将图像拆分为bgr三通道</span></span><br><span class="line">img = cv2.merge((b, g, r)) <span class="comment"># 将拆出来的 bgr重写为一个图像</span></span><br><span class="line"><span class="comment"># 只保留R</span></span><br><span class="line">cur_img = img.copy()</span><br><span class="line">cur_img[:, :, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">cur_img[:, :, <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">cv_show(<span class="string">&#x27;img&#x27;</span>, cur_img)</span><br><span class="line"><span class="comment"># 其他两个通道同理</span></span><br></pre></td></tr></table></figure><h2 id="边界填充"><a href="#边界填充" class="headerlink" title="边界填充"></a>边界填充</h2><blockquote><p> 如果实际的图像与需求大小不符，可以将图像边缘进行填充</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">top_size, bottom_size, left_size, right_size = (<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>) <span class="comment"># 设置上下左右的填充值</span></span><br><span class="line">replicate = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REPLICATE)</span><br><span class="line">reflect = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT)</span><br><span class="line">reflect101 = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_REFLECT_101)</span><br><span class="line">wrap = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_WRAP)</span><br><span class="line">constant = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv2.BORDER_CONSTANT,value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplot(<span class="number">231</span>),plt.imshow(img,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Original&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">232</span>),plt.imshow(replicate,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Replicate&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">233</span>),plt.imshow(reflect,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Reflect&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">234</span>),plt.imshow(reflect101,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Reflect101&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">235</span>),plt.imshow(wrap,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Wrap&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">236</span>),plt.imshow(constant,<span class="string">&#x27;gray&#x27;</span>),plt.title(<span class="string">&#x27;Constant&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131616087.png" alt="Snipaste_2024-05-13_16-15-29"></p><h2 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img_cat = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">img_dog = cv2.imread(<span class="string">&#x27;dog.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 假设cat图像尺寸为(414,500,3)</span></span><br><span class="line"><span class="comment"># 假设dog图像尺寸为(500,500,3) 就需要先将图像调整为相同尺寸</span></span><br><span class="line">img_dog = cv2.resize(img_dog,(<span class="number">414</span>,<span class="number">500</span>))</span><br><span class="line">res = cv2.addWeighted(img_cat,<span class="number">0.4</span>,img_dog,<span class="number">0.6</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret,dst = cv2.threshold(src,thresh,maxval,type)</span></span><br><span class="line"><span class="comment"># src:输入图像 thresh：阈值(实际的值，不是百分比) maxval：最大可能值（一般为255） type:(怎么判断阈值，判断之后怎么处理)</span></span><br><span class="line"><span class="comment"># cv2.THRESH_BINARY 超过阈值部分取maxval(最大值)，否则取0  相当于把亮的地方取255变为白点，暗的地方取0变为黑点，突出主体</span></span><br><span class="line"><span class="comment"># cv2.THRESH_BINARY_INV THRESH_BINARY的反转</span></span><br><span class="line"><span class="comment"># cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变</span></span><br><span class="line"><span class="comment"># cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0</span></span><br><span class="line"><span class="comment"># cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img_cat = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line">img_gary = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">ret, thresh1 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">ret, thresh2 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line">ret, thresh3 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)</span><br><span class="line">ret, thresh4 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)</span><br><span class="line">ret, thresh5 = cv2.threshold(img_gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)</span><br><span class="line">titles = [<span class="string">&#x27;Original&#x27;</span>, <span class="string">&#x27;BINARY&#x27;</span>, <span class="string">&#x27;BINARY_INV&#x27;</span>, <span class="string">&#x27;TRUNC&#x27;</span>, <span class="string">&#x27;TOZERO&#x27;</span>, <span class="string">&#x27;TOZERO_INV&#x27;</span>]</span><br><span class="line">images = [img_cat, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,i+<span class="number">1</span>),plt.imshow(images[i],<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131648645.png" alt="Snipaste_2024-05-13_16-48-44"></p><h2 id="图像平滑处理"><a href="#图像平滑处理" class="headerlink" title="图像平滑处理"></a>图像平滑处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line"><span class="comment"># 简单的平均卷积操作</span></span><br><span class="line">blur = cv2.blur(img,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">cv_show(<span class="string">&#x27;blur&#x27;</span>,blur)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方框滤波</span></span><br><span class="line">box = cv2.boxFilter(img,-<span class="number">1</span>,(<span class="number">3</span>,<span class="number">3</span>),normalize=<span class="literal">True</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;box&#x27;</span>,box)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">aussian = cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;aussian&#x27;</span>,aussian)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中值滤波</span></span><br><span class="line">median = cv2.medianBlur(img,<span class="number">5</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;median&#x27;</span>,median)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131709708.png" alt="image-20240513170956530"></p><h2 id="形态学-腐蚀操作和膨胀操作"><a href="#形态学-腐蚀操作和膨胀操作" class="headerlink" title="形态学-腐蚀操作和膨胀操作"></a>形态学-腐蚀操作和膨胀操作</h2><blockquote><p>去除以下图片的毛刺</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131710660.png" alt="image-20240513171053619"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------------------腐蚀操作----------------------------------</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">erosion = cv2.erode(img,kernel,iterations=<span class="number">1</span>)</span><br><span class="line">pie = cv2.imread(<span class="string">&#x27;pie.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 处理之后变细了</span></span><br><span class="line"><span class="comment"># -------------------------膨胀操作----------------------------------</span></span><br><span class="line">kernel = np.ones((<span class="number">3</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">dige_dilate = cv2.dilate(erosion,kernel,iterations=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405131713024.png" alt="image-20240513171357983"></p><h2 id="开运算与闭运算"><a href="#开运算与闭运算" class="headerlink" title="开运算与闭运算"></a>开运算与闭运算</h2><blockquote><p>开运算： 先腐蚀再膨胀</p><p>闭运算：先膨胀再腐蚀</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开运算</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">opening = cv2.morphologyEx(img,cv2.MORPH_OPEN,kermel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭运算</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">opening = cv2.morphologyEx(img,cv2.MORPH_CLOSE,kermel)</span><br></pre></td></tr></table></figure><h2 id="梯度运算"><a href="#梯度运算" class="headerlink" title="梯度运算"></a>梯度运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 梯度 = 膨胀 - 腐蚀</span></span><br><span class="line">pie = cv2.imread(<span class="string">&#x27;pre.png&#x27;</span>)</span><br><span class="line">kernel = np.ones((<span class="number">7</span>,<span class="number">7</span>),np.uint8)</span><br><span class="line">dilate = cv2.dilate(pie,kernel,iterations = <span class="number">5</span>)</span><br><span class="line">erosion = cv2.erode(pie,kernel,iterations = <span class="number">5</span>)</span><br><span class="line">res = np.hstack(dilate,erosion) <span class="comment"># 将两个图片拼在一起显示，横向 vstack为纵向</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gradient = cv2.morphologyEx(pie,cv2.MORPH_GRADIENT,kernel)</span><br></pre></td></tr></table></figure><h2 id="礼帽与黑帽"><a href="#礼帽与黑帽" class="headerlink" title="礼帽与黑帽"></a>礼帽与黑帽</h2><ul><li>礼帽 &#x3D; 原始输入 - 开运算结果</li><li>黑帽 &#x3D; 闭运算 - 原始输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 礼帽</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">tophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;tophat&#x27;</span>,tophat)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 黑帽</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;dige.png&#x27;</span>)</span><br><span class="line">blackhat = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;blackhat&#x27;</span>,blackhat)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="图像梯度-Sobel算子"><a href="#图像梯度-Sobel算子" class="headerlink" title="图像梯度 - Sobel算子"></a>图像梯度 - Sobel算子</h2><blockquote><p>Gx 表示水平方向，Gy 表示垂直方向</p></blockquote><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140856052.png" alt="image-20240514085623958"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;pie.png&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># dst = cv2.Sobel(src, ddepth, dx, dy, ksize)</span></span><br><span class="line"><span class="comment"># ddepth: 图像的深度（通常为 -1）</span></span><br><span class="line"><span class="comment"># dx 和 dy 分别表示水平和竖直方向</span></span><br><span class="line"><span class="comment"># ksize 是 Sobel 算子的大小</span></span><br><span class="line">sobelx = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 白到黑是正数，黑到白就是负数，所有负数会被截断成0，所以要取绝对值</span></span><br><span class="line">sobelx = cv2.convertScaleAbs(sobelx)</span><br><span class="line"><span class="comment"># 分别计算出 Gx Gy再求和</span></span><br><span class="line">sobely = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">sobely = cv2.convertScaleAbs(sobely)</span><br><span class="line">sobelxy = cv2.addWeighted(sobelx, <span class="number">0.5</span>, sobely, <span class="number">0.5</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="图像梯度-Scharr算子"><a href="#图像梯度-Scharr算子" class="headerlink" title="图像梯度 - Scharr算子"></a>图像梯度 - Scharr算子</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140918478.png" alt="image-20240514091833419"></p><h3 id="图像梯度-laplacian算子"><a href="#图像梯度-laplacian算子" class="headerlink" title="图像梯度 - laplacian算子"></a>图像梯度 - laplacian算子</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140919969.png" alt="image-20240514091938911"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">sobelx = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize = <span class="number">3</span>)</span><br><span class="line">sobely = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize = <span class="number">3</span>)</span><br><span class="line">sobelx = cv2.convertScaleAbs(sobelx)</span><br><span class="line">sobely = cv2.convertScaleAbs(sobely)</span><br><span class="line">sobelxy = cv2.addWeighted(sobelx, <span class="number">0.5</span>, sobely, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">scharrx = cv2.Scharr(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">scharry = cv2.Scharr(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">scharrx = cv2.convertScaleAbs(scharrx)</span><br><span class="line">scharry = cv2.convertScaleAbs(scharry)</span><br><span class="line">scharrxy = cv2.addWeighted(scharrx, <span class="number">0.5</span>, scharry, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">laplacian = cv2.Laplacian(img, cv2.CV_64F)</span><br><span class="line">laplacian = cv2.convertScaleAbs(laplacian)</span><br><span class="line"></span><br><span class="line">res = np.hstack((sobelxy, scharrxy, laplacian))</span><br></pre></td></tr></table></figure><h2 id="Canny-边缘检测算法"><a href="#Canny-边缘检测算法" class="headerlink" title="Canny 边缘检测算法"></a>Canny 边缘检测算法</h2><ul><li>使用高斯滤波器，以平滑图像， 滤除噪声。</li><li>计算图像中每个像素点的梯度强度和方向。</li><li>应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。</li><li>应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。</li><li>通过抑制孤立的弱边缘最终完成边缘检测。</li></ul><p>高斯滤波器</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140936193.png" alt="image-20240514093645117"></p><p>梯度和方向</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140937619.png" alt="image-20240514093748547"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140937674.png" alt="image-20240514093759607"></p><p>非极大值抑制</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140938627.png" alt="image-20240514093830561"></p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140940186.png" alt="image-20240514094041096"></p><p>双阈值检测</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140941673.png" alt="image-20240514094126597"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">v1 = cv2.Canny(img, <span class="number">80</span>, <span class="number">150</span>) <span class="comment"># 后面两个数值为minVal 和 maxVal</span></span><br><span class="line">v2 = cv2.Canny(img, <span class="number">50</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140947567.png" alt="image-20240514094745459"></p><h3 id="高斯金字塔"><a href="#高斯金字塔" class="headerlink" title="高斯金字塔"></a>高斯金字塔</h3><p>向下采样方法（缩小）</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140948293.png" alt="image-20240514094842231"></p><p>向上采样方法（放大）</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140950310.png" alt="image-20240514095057239"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;AM.png&quot;</span>)</span><br><span class="line"><span class="comment"># 上采样</span></span><br><span class="line">up = cv2.pyrUp(img)</span><br><span class="line"><span class="comment"># 下采样</span></span><br><span class="line">down = cv2.pyrDown(img)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拉普拉斯金字塔"><a href="#拉普拉斯金字塔" class="headerlink" title="拉普拉斯金字塔"></a>拉普拉斯金字塔</h3><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405140955216.png" alt="image-20240514095529131"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">down = cv2.pyrDown(img)</span><br><span class="line">down_up = cv2.pyrUp(down)</span><br><span class="line">l_l = img - down_up</span><br></pre></td></tr></table></figure><h2 id="图像轮廓"><a href="#图像轮廓" class="headerlink" title="图像轮廓"></a>图像轮廓</h2><blockquote><p>cv2.findContours(img,mode,method)</p></blockquote><p>mode：轮廓检索模式</p><ul><li>RETR_EXTERNAL：只检索最外面的轮廓</li><li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中</li><li>RETR_CCOMP：检索所有的轮廓，并将他们组织为两层，顶层是各部分的外部边界，第二层是空洞的边界</li><li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次（&#x3D;&#x3D;用这个就足够&#x3D;&#x3D;）</li></ul><p>method：轮廓逼近方法</p><ul><li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。</li><li>CHAIN_APPROX_SIMPLE：压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&quot;contours.png&quot;</span>) <span class="comment"># 必须为 png 格式</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GARY)</span><br><span class="line">ret, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY) <span class="comment"># 二值化</span></span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX, cv2.CHAIN_APPROX_NONE)</span><br><span class="line"><span class="comment"># 传入绘制图像，轮廓，轮廓索引，颜色模式，线条厚度</span></span><br><span class="line"><span class="comment"># 注意需要copy，要不原图会变</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, contours, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)<span class="comment"># -1表示绘出所有轮廓</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="轮廓近似"><a href="#轮廓近似" class="headerlink" title="轮廓近似"></a>轮廓近似</h3><p>设置阈值 T，找出与 AB 曲线上最远的点 D，判断 D 到 AB 的距离是否小于阈值，若小于则将 AB 直线代替 AB 曲线，若大于，则继续以相同的方法判断 AD 直线能否代替 AD 曲线，以此类推。</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405200906069.png" alt="image-20240520090634996"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;contour2.png&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GARY)</span><br><span class="line">ret, thresh = cv2.threshold(gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[<span class="number">0</span>] <span class="comment"># 取出第一个轮廓</span></span><br><span class="line"><span class="comment"># 展示轮廓效果</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, [cut], -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv.show(res, <span class="string">&#x27;res&#x27;</span>)</span><br><span class="line"></span><br><span class="line">thresholdT = <span class="number">0.1</span> <span class="comment"># 设置阈值</span></span><br><span class="line">epsilon = thresholdT*cv2.arcLength(cnt, <span class="literal">True</span>)</span><br><span class="line">approx = cv2.approxPloyDP(cnt, epsilon, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 展示近似后的效果</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, [approx], -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv.show(res, <span class="string">&#x27;res&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="边界矩形"><a href="#边界矩形" class="headerlink" title="边界矩形"></a>边界矩形</h3><p>画出轮廓的外接矩形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;contour2.png&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GARY)</span><br><span class="line">ret, thresh = cv2.threshold(gary, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[<span class="number">0</span>] <span class="comment"># 取出第一个轮廓</span></span><br><span class="line"></span><br><span class="line">x, y, w, h = cv2.boundingRect(cnt)</span><br><span class="line">img = cv2.rectangle(img, (x, y), (x + w, y + h),(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv2.show(img,<span class="string">&#x27;img&#x27;</span>) <span class="comment"># 展示处理后的图像</span></span><br><span class="line">area = cv2.contourArea(cnt) <span class="comment"># 边界包裹的面积</span></span><br><span class="line">rect_area = w*h <span class="comment"># 外接矩形面积</span></span><br><span class="line">extent = <span class="built_in">float</span>(area) / rect_area</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;轮廓面积与边界矩形比&#x27;</span>, extent)</span><br></pre></td></tr></table></figure><h3 id="外接圆"><a href="#外接圆" class="headerlink" title="外接圆"></a>外接圆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 承接了上一小节的 cnt</span></span><br><span class="line">(x, y), radius = cv2.minEnclosingCircle(cnt)</span><br><span class="line">center = (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br><span class="line">radius = <span class="built_in">int</span>(radius)</span><br><span class="line">img = cv2.circle(img, center, radius, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">cv2.show(img,<span class="string">&#x27;img&#x27;</span>) <span class="comment"># 展示处理后的图像</span></span><br></pre></td></tr></table></figure><p>一个三角形画出了外接矩形和外接圆</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405200925076.png" alt="image-20240520092541997"></p><h2 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h2><p>模板匹配和卷积原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，这个差别程度的计算方法在 opencv 里有 6 种，然后将每次计算的结果放入一个矩阵，作为结果输出。假如原图形是 A * B 大小， 而模板是 a * b 大小，则输出结果的矩阵是（A - a  + 1）*（B - b + 1）</p><ul><li>TM_SQDIFF：计算平方不同，计算出来的值越小，越相关</li><li>TM_CCORR：计算相关性，计算出来的值越大，越相关</li><li>TM_CCOEFF：计算相关系数，计算出来的值越大，越相关</li><li>TM_SQDIFF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关</li><li>TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关</li><li>TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">template = cv2.imread(<span class="string">&#x27;face.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">h, w = template.shape[:<span class="number">2</span>]</span><br><span class="line">res = cv2.matchTemplate(img, template, cv2.TM_SQDIFF)</span><br><span class="line">min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)</span><br><span class="line"><span class="comment"># 匹配多个对象</span></span><br><span class="line">res = cv2.matchTemplate(img, template, cv2.TM_SQDIFF_NORMED)</span><br><span class="line">threshold = <span class="number">0.8</span></span><br><span class="line"><span class="comment"># 取匹配程度大于百分之80的坐标</span></span><br><span class="line">loc = np.where(res &gt;= threshold)</span><br><span class="line"><span class="comment"># 画出</span></span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> <span class="built_in">zip</span>(*loc[::-<span class="number">1</span>]):</span><br><span class="line">    bottom_right = (pt[<span class="number">0</span>] + w, pt[<span class="number">1</span>] + h)</span><br><span class="line">    cv2.rectangle(img, pt, bottom_right, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241417173.png" alt="image-20240524141705079"></p><p>cv2.calcHist(images, channels, mask, histSize, ranges)</p><ul><li>images：原图像图像格式为 uint8 或 float32。当传入函数时，用中括号 [] 括，例如 [img]</li><li>channels：同样用中括号括来他会告函数我们统幅图 像的直方图。如果入图像是灰度图它的值就是 [0] 如果是彩色图像的传入参数可以是 [0] [1] [2] 他们分别对应着 BGR</li><li>mask：掩模图像。统整幅图像的直方图就把它为 None。但是如果想统图像某一部分的直方图，就制作一个掩模图像并使用它。</li><li>histSize：BIN 的数目。也应用中括号括来</li><li>ranges：像素值范围常为 [0256]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;cat.jpg&#x27;</span>, <span class="number">0</span>) <span class="comment"># 表示灰度图</span></span><br><span class="line">hist = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">hist.shape</span><br></pre></td></tr></table></figure><h3 id="mask-操作"><a href="#mask-操作" class="headerlink" title="mask 操作"></a>mask 操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建mask</span></span><br><span class="line">mask = np.zeros(img.shape[:<span class="number">2</span>], np.uint8)</span><br><span class="line">mask[<span class="number">100</span>:<span class="number">300</span>, <span class="number">100</span>:<span class="number">400</span>] = <span class="number">255</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;cat.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">masked_img = cv2.bitwise_and(img, img, mask=mask)</span><br><span class="line">hist_full = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">hist_mask = cv2.calcHist([img], [<span class="number">0</span>], mask, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"><span class="comment"># 绘制结果</span></span><br><span class="line">plt.subplot(<span class="number">221</span>), plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>), plt.imshow(mask, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>), plt.imshow(masked_img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>), plt.plot(hist_full), plt.plot(hist_mask)</span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241440546.png" alt="image-20240524144025475"></p><h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入一个图像即可</span></span><br><span class="line">equ = cv2.equalizeHist(img)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241446689.png" alt="image-20240524144630569"></p><h3 id="自适应直方图均衡化"><a href="#自适应直方图均衡化" class="headerlink" title="自适应直方图均衡化"></a>自适应直方图均衡化</h3><p>将图像分块，只在各自块内进行直方图均衡化处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clahe = cv2.createCLAHE(clipLimit=<span class="number">2.0</span>, tileGridSize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">res_clahe = clahe.apply(img)</span><br><span class="line">res = np.hstack((img,equ,res_clahe))</span><br><span class="line">cv_show(res,<span class="string">&#x27;res&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241451223.png" alt="image-20240524145111999"></p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>点击去知乎看详解 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://zhuanlan.zhihu.com/p/19763358"   title="傅里叶分析之掐死教程（完整版）"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>傅里叶分析之掐死教程（完整版）</span></a></p><p>傅里叶变换的作用</p><ul><li>高频：变化剧烈的灰度分量，例如边界。</li><li>低频：变化缓慢的灰度分量，例如一片大海。</li></ul><p>滤波：</p><ul><li><p>低通滤波器：只保留低频，会使得图像模糊</p></li><li><p>高通滤波器：只保留高频，会使得图像细节增强</p></li><li><p>opencv中主要就是 cv2.dft() 和 cv2.idft()，输入图像需要先转换成np.float32 格式</p></li><li><p>得到的结果中频率为 0 的部分会在左上角，通常要转换到中心位置，可以通过 shift 变换来实现。</p></li><li><p>cv2.dft() 返回的结果是双通道的（实部，虚数），通常还需要转换成图像格式才能展示（0，255）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"><span class="comment"># 得到灰度图能表示的形式</span></span><br><span class="line">magnitude_spectrum = <span class="number">20</span>*np.log(cv2.magnitude(dft_shift[:,:,<span class="number">0</span>],dft_shift[:,:,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input Image&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(magnitude_spectrum,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Magnitude Spectrum&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241523408.png" alt="image-20240524152306308"></p><h3 id="低通滤波"><a href="#低通滤波" class="headerlink" title="低通滤波"></a>低通滤波</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">rows, cols = img.shape</span><br><span class="line">crow,ccol = <span class="built_in">int</span>(row/<span class="number">2</span>),<span class="built_in">int</span>(cols/<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 低通滤波</span></span><br><span class="line">mask = np.zeros((rows, cols, <span class="number">2</span>),np.uint8)</span><br><span class="line">mask[crow-<span class="number">30</span>:crow+<span class="number">30</span>, ccol-<span class="number">30</span>:ccol+<span class="number">30</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDFT</span></span><br><span class="line">fshift = dft_shift*mask</span><br><span class="line">f_ishift = np.fft.ifftshift(fshift)</span><br><span class="line">img_back = cv2.idft(f_ishift)</span><br><span class="line">img_back = cv2.magnitude(img_back[:,:,<span class="number">0</span>],img_back[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input Image&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img_back,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Result&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241545508.png" alt="image-20240524154510402"></p><h3 id="高通滤波"><a href="#高通滤波" class="headerlink" title="高通滤波"></a>高通滤波</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">rows, cols = img.shape</span><br><span class="line">crow,ccol = <span class="built_in">int</span>(row/<span class="number">2</span>),<span class="built_in">int</span>(cols/<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 低通滤波</span></span><br><span class="line">mask = np.ones((rows, cols, <span class="number">2</span>),np.uint8)</span><br><span class="line">mask[crow-<span class="number">30</span>:crow+<span class="number">30</span>, ccol-<span class="number">30</span>:ccol+<span class="number">30</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDFT</span></span><br><span class="line">fshift = dft_shift*mask</span><br><span class="line">f_ishift = np.fft.ifftshift(fshift)</span><br><span class="line">img_back = cv2.idft(f_ishift)</span><br><span class="line">img_back = cv2.magnitude(img_back[:,:,<span class="number">0</span>],img_back[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input Image&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img_back,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Result&#x27;</span>),plt.xticks([]),plt.yticks([])</span><br></pre></td></tr></table></figure><p><img src="https://abei-1256557411.cos.ap-chengdu.myqcloud.com/blogs/202405241546845.png" alt="image-20240524154644740"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统</title>
      <link href="/2024/05/11/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/11/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="伙伴匹配系统"><a href="#伙伴匹配系统" class="headerlink" title="伙伴匹配系统"></a>伙伴匹配系统</h1><div class="tip info"><p>介绍：帮助用户找到志同道合的伙伴 </p></div><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>用户去添加标签，标签的分类（要哪些标签，怎么把标签进行分类）学习方向？</li><li>主动搜索：允许用户根据标签去搜索其他用户<ol><li>Redis 缓存</li></ol></li><li>组队<ol><li>创建队伍</li><li>加入队伍</li><li>根据标签查询队伍</li><li>邀请其他人</li></ol></li><li>允许用户去修改标签</li><li>推荐<ol><li>相似度计算算法 + 本地分布式计算</li></ol></li></ol><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol><li>Vue 3 开发框架（提交页面开发效率）</li><li>Vant UI （基于 Vue 的移动端组件库） （React 版 Zent）</li><li>Vite （打包工具，快！）</li><li>Nginx 来单机部署</li></ol><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>Java 编程语言 + SpringBoot 框架</li><li>SpringMVC + Mybatis + Mybatis Plus</li><li>MySQL 数据库</li><li>Redis 缓存</li><li>Swagger + Knife4j 接口文档</li></ol><h2 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h2><ol><li>前端初始化</li><li>前端主页 + 组件概览</li><li>数据库表设计<ol><li>标签表</li><li>用户表</li></ol></li><li>开发后端 - 根据标签搜索用户</li><li>开发前端 - 根据标签搜索用户</li></ol><h3 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h3><p>用脚手架初始化项目</p><ul><li>Vue CLI</li><li>Vite 脚手架</li></ul><p>整合组件库 Vant：</p><ul><li>安装 Vant</li><li>按需引入 <a href="https://vant-ui.github.io/vant/#/zh-CN/quickstart">指令参考官方文档</a></li></ul><p>开发页面经验：</p><ol><li>多参考</li><li>从整体到局部</li><li>先想清楚页面要做成什么样子，再写代码</li></ol><h3 id="前端主页-组件概览"><a href="#前端主页-组件概览" class="headerlink" title="前端主页 + 组件概览"></a>前端主页 + 组件概览</h3><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><ol><li>导航条：展示当前页面</li><li>主页搜索框 -&gt; 推荐页 -&gt; 搜索结果页</li><li>内容</li><li>tab栏：<ul><li>主页（推荐页 + 广告）<ul><li>搜索框</li><li>banner</li><li>推荐信息流</li></ul></li><li>队伍页</li><li>用户页</li></ul></li></ol><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>很多页面要复用组件 &#x2F; 样式，重复写很麻烦，不利于维护，所以抽象一个通用的布局（Layout）</p><h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>标签的分类（要有哪些标签，怎么把标签分类）</p><h4 id="标签表（分类表）"><a href="#标签表（分类表）" class="headerlink" title="标签表（分类表）"></a>标签表（分类表）</h4><p>建议用标签不要用分类。更灵活</p><ul><li>性别 ： 男，女</li><li>方向：Java、Python、C++</li><li>目标：考研、春招、秋招、考公、竞赛</li><li>身份：大学生、待业、研究生</li><li>状态：乐观、有点丧、一般、单身、已婚、有对象</li><li>【用户自定义标签】？</li></ul><p>字段：</p><ul><li><p>id int 主键</p></li><li><p>标签名 varchar 非空 （必须唯一，唯一索引）</p></li><li><p>userId 上传标签的用户 int （普通索引）</p></li><li><p>parentId 父标签 int（分类）</p></li><li><p>isParent 是否为父标签 tinyint</p></li><li><p>creatTime 创建时间 datetime</p></li><li><p>updateTime 更新时间 datetime</p></li><li><p>isDelete 是否删除 tinyint</p></li></ul><p>怎么查询所有标签，并且把标签分好组？能实现 √</p><p>根据父标签查询子标签，根据id查询 √</p><p>SQL语言分类：</p><p>DDL define 建表、操作表</p><p>DML manager 更新删除数据，影响实际表里的内容</p><p>DCL control 控制、权限</p><p>DQL query 查询</p><h4 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h4><p>用户有哪些标签？</p><ol><li>直接在用户表补充 tags 字段，[‘java’, ‘男’]存 JSON 字符串<ol><li>优点：查询方便，不用新建关联表，标签是用户的固有属性（除了该系统、其他系统可能也要使用），节省开发成本。</li><li>缺点：用户表多一列，会有点</li><li>哪怕性能低，可以用缓存</li></ol></li><li>加一个关联表，记录用户和标签的关系<ol><li>优点：查询灵活，可以正查反查</li><li>缺点：要多建一个表、多维护一个表</li><li>重点：企业大项目开发中尽量减少关联查询，很影响扩展性，而且会影响查询性能</li></ol></li></ol><h3 id="开发后端接口"><a href="#开发后端接口" class="headerlink" title="开发后端接口"></a>开发后端接口</h3><p>搜索标签：</p><ol><li>允许用户传入多个标签，多个标签都存在才搜索出来 and。like %Java% and like %C++%</li><li>允许用户传入多个标签，有任何一个标签存在就能搜索出来 or。like %Java% or like %C++%</li></ol><p>两种方式：</p><ol><li>SQL查询</li><li>内存查询</li></ol><h3 id="用户中心来集中提供用户的检索、操作、登录、鉴权等等"><a href="#用户中心来集中提供用户的检索、操作、登录、鉴权等等" class="headerlink" title="用户中心来集中提供用户的检索、操作、登录、鉴权等等"></a>用户中心来集中提供用户的检索、操作、登录、鉴权等等</h3><h2 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h2><ol><li>前端开发（搜索页面、用户信息页、用户信息修改页）</li><li>前端整合路由</li><li>后端整合Swagger + Knife4j 接口文档</li><li>存量用户信息导入及同步（爬虫）</li></ol><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><ol><li>stream &#x2F; parallelStream 流式处理</li><li>Optional 可选类</li></ol><h3 id="前端整合路由"><a href="#前端整合路由" class="headerlink" title="前端整合路由"></a>前端整合路由</h3><p>点击去Vue-Router 官方文档 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://router.vuejs.org/zh/guide/"   title="Vue-Router"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Vue-Router</span></a></p><p>Vue - Router 其实就是帮助你根据不同的 url 来展示不同的页面（组件），不用自己写 if &#x2F; else</p><p>路由配置影响整个项目，所以建议单独用 config 目录、单独的配置文件去集中定义和管理。</p><p>有些组件库可能自带了和 Vue-Router 的整合，所以尽量先看组件文档，省去自己写的时间。</p><h2 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h2><p>计划：</p><ol><li>后端整合Swagger + Knife4j 接口文档</li><li>存量用户信息导入及同步（爬虫）</li><li>前后端联调：搜索页面、用户信息页、用户信息修改页</li><li>标签整理、部分细节优化</li></ol><h3 id="后端整合Swagger-Knife4j-接口文档"><a href="#后端整合Swagger-Knife4j-接口文档" class="headerlink" title="后端整合Swagger + Knife4j 接口文档"></a>后端整合Swagger + Knife4j 接口文档</h3><p>什么是接口文档？写接口信息的文档，每条接口包括：</p><ul><li>请求参数</li><li>响应参数<ul><li>错误码</li></ul></li><li>接口地址</li><li>接口名称</li><li>请求类型</li><li>请求格式</li><li>备注</li></ul><p>谁用？一般是后端或者负责人提供，后端前端都要使用</p><p>为什么需要接口文档？</p><ul><li>有个书面内容（背书或者归档），便于大家参考和查阅，便于沉淀和维护，拒绝口口相传</li><li>有个文档方便与前端和后端开发对接，前端后端联调的&#x3D;&#x3D;介质&#x3D;&#x3D;。后端&#x3D;&gt;接口文档&lt;&#x3D;前端</li><li>好的接口文档支持在线调试、在线测试，可以作为工具提高我们的开发测试效率</li></ul><p>怎么做接口文档？</p><ul><li>手写（比如腾讯文档、Markdown笔记）</li><li>自动化接口文档生成：Swagger、Postman（侧重接口管理）；apifox，apipost，eolink（国产）</li></ul><p>Swagger原理：</p><ol><li>自定义 Swagger 配置类</li><li>定义需要生成接口文档的代码位置（Controller）</li></ol><p>千万注意：线上环境不要把接口暴露出去</p><blockquote><p>[!NOTE]</p><p>可直接引入knife4j，其集成了 Swagger 和 openAPI &#x3D;&#x3D;引入请见官方文档&#x3D;&#x3D;。</p></blockquote><p>FeHelper 前端插件 推荐安装</p><h2 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h2><p>计划：</p><ol><li>页面和功能开发（搜索页面、用户信息、用户修改页面）</li><li>改造用户中心，把单机登录改为分布式 session 登录</li><li>标签的整理、细节的优化</li></ol><h3 id="前端页面跳转传值"><a href="#前端页面跳转传值" class="headerlink" title="前端页面跳转传值"></a>前端页面跳转传值</h3><ol><li>query &#x3D;&gt; url searchParams, url 后附加参数（传递值长度有限）</li><li>vuex （全局状态管理），搜索页将关键词塞到状态中，搜索结果页从状态中取值</li></ol><p>以下代码使用参考Vue Router官方文档 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://router.vuejs.org/zh/"   title="Vue Router"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Vue Router</span></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/user/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/eduardo&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//命名路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="整合Axios"><a href="#整合Axios" class="headerlink" title="整合Axios"></a>整合Axios</h2><p>点击去官方文档 -&gt;&gt;&gt; <a class="btn-anzhiyu outline orange larger" href="https://www.axios-http.cn/"   title="Axios中文文档"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>Axios中文文档</span></a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具指令存档</title>
      <link href="/2024/05/09/%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%98%E6%A1%A3/"/>
      <url>/2024/05/09/%E6%8C%87%E4%BB%A4%E8%AE%B0%E5%BD%95%E5%AD%98%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="指令记录存档"><a href="#指令记录存档" class="headerlink" title="指令记录存档"></a>指令记录存档</h1><div class="tip info"><p>此文章用来存储一些工具的使用指令。人老了记不住。 </p></div><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>工作区-&gt;暂存区 git add</li><li>暂存区-&gt;仓库 git commit -m ‘备注’</li><li>查看状态 git status</li><li>查看提交记录 git log 等等，自己简化的指令 git-log</li><li>版本回退  git reset –hard commitID</li><li>查看分支 git branch</li><li>创建并切换分支 git checkout -b 分支名</li><li>分支合并 git merge 分支名</li><li>删除分支 git branch -d 分支名 （需要切换到另一个分支上）</li><li>将本地仓库与gitee关联 git remote add origin 远程仓库的ssh</li><li>查看远程仓库 git remote</li><li>推送到远程仓库 git push [-f] (强制覆盖) origin master</li><li>推送到远端的同时并且建立起和远端分支的关联关系 git push –set-upstream origin master<ul><li>建立之后，可以省略分支名和远端名 git push</li></ul></li><li>克隆 get clone 仓库地址</li><li>抓取 git fetch [remote name] [branch name]</li><li>拉取 git pull [remote name] [branch name]</li></ul><h2 id="Java后端"><a href="#Java后端" class="headerlink" title="Java后端"></a>Java后端</h2><h3 id="将接收的JSON数据类型转化为对象并存储到Map中"><a href="#将接收的JSON数据类型转化为对象并存储到Map中" class="headerlink" title="将接收的JSON数据类型转化为对象并存储到Map中"></a>将接收的JSON数据类型转化为对象并存储到Map中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2 json 转对象（可以使用生成一个对象来进行接收，或者使用Map）</span></span><br><span class="line">        Map&lt;String, Object&gt;map = JSONUtil.toBean(result,Map.class);</span><br></pre></td></tr></table></figure><h2 id="Pyenv"><a href="#Pyenv" class="headerlink" title="Pyenv"></a>Pyenv</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看可安装的python发行版本</span><br><span class="line">pyenv install -l</span><br><span class="line"># 安装指定python版本</span><br><span class="line">pyenv install 3.9.0</span><br><span class="line"># 查看当前已安装的python版本(标*的为当前环境python)</span><br><span class="line">pyenv versions</span><br><span class="line">pyenv version</span><br><span class="line"># 切换python版本</span><br><span class="line">pyenv local 3.9.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重庆</title>
      <link href="/2024/05/09/%E9%87%8D%E5%BA%86/"/>
      <url>/2024/05/09/%E9%87%8D%E5%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h1><p>占个位置</p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 出游记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活着-余华</title>
      <link href="/2024/05/09/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/"/>
      <url>/2024/05/09/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="活着-余华"><a href="#活着-余华" class="headerlink" title="活着 - 余华"></a>活着 - 余华</h1><p>​福贵最初嚣张跋扈，一点不把别人放在眼里。对身边的人的行为充分展示了地主家的儿子的形象。到后来，福贵在赌场被坑，导致散尽家财。然后回家被失去了世界的样子。</p><p>​福贵的父亲也因为福贵从富贵的生活变成了极为清贫。在此后不久福贵的父亲就去世了。福贵感觉是自己害死了父亲。从此福贵的悲惨人生才刚刚开始。</p><p>​福贵输光了家财，家珍的父亲也来接走了她，并且家珍走的时候已经怀了有庆。<span class='p red large'>赌博可谓是让人妻离子散</span></p><p>​在一年多以后家珍也回来了，家珍是真爱着福贵。再往后真是清贫人生、悲惨人生。</p><p>​不久之后，福贵的母亲也病危了，福贵去买药的时候还被长官抓取拉炮车，去前线打仗了。辗转一年多才回到家。在此期间，福贵的母亲已经离世，凤霞也因为生了场病而聋哑了。<span class='p red large'>支离破碎呐</span></p><p>​继续保持着贫苦的生活，再往后县长夫人生病，需要抽血，结果把有庆害死了，一个这么年轻的孩子。<span class='p red large'>官大真是压死人</span></p><p>​后来，凤霞和二喜结婚了。二喜对凤霞非常好，结婚也是花了很多钱弄得很有排面。凤霞换怀孕了，到生孩子的时候，进产房很久没有出来，很久之后医生出来开玩笑的说，保大还是保小。二喜慌了，连忙说着保大，我要凤霞。但是医生说开玩笑的，两个都没事。但刚说不久，凤霞就因为大出血离世了。</p><p>​二喜从此背着孩子干搬运活，非常辛苦非常累。<span class='p red large'>这才是底层人的苦难</span>，后来，二喜因为干活的时候出了意外，离世了。从此只有福贵和苦根相依为命。</p><p>​福贵年纪也大了，干起活来也不太顺利。日子这么贫苦的过着。苦根长大一些后，也帮着福贵干起农活，在干活时突然发烧了，福贵将苦根带回家休息。想着给苦根吃饱些，就去煮了许多豆子。但是苦根因为吃了太多豆子而离世。<span class='p red large'>有时候命运就是这么悲惨，不知道什么时候就没了</span></p><p>​最后只有福贵一个人了，福贵去买了头牛与自己相依为命。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户中心</title>
      <link href="/2024/05/08/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
      <url>/2024/05/08/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="用户中心"><a href="#用户中心" class="headerlink" title="用户中心"></a>用户中心</h1><h2 id="好用的工具收集"><a href="#好用的工具收集" class="headerlink" title="好用的工具收集"></a>好用的工具收集</h2><blockquote><!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --><dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> <version>3.14.0</version></dependency><p>用于</p></blockquote><h2 id="企业做项目流程"><a href="#企业做项目流程" class="headerlink" title="企业做项目流程"></a>企业做项目流程</h2><ul><li>需求分析</li><li>设计（概要设计、详细设计）</li><li>技术选型</li><li>初始化 &#x2F; 引入需要的技术</li><li>写 Demo</li><li>写代码（实现业务逻辑）</li><li>测试（单元测试）</li><li>代码提交 &#x2F; 代码评审</li><li>部署</li><li>发布</li></ul><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>登录 &#x2F; 注册</li><li>用户管理（管理员）对用户的查询、修改</li><li>用户校验（仅VIP使用）</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>前端：</p><ol><li>三件套</li><li>React</li><li>组件库 Ant Design</li><li>Umi</li><li>Ant Design Pro（现成的管理系统）</li></ol><p>后端：</p><ol><li>Java</li><li>Spring（依赖注入框架，帮助你管理Java对象，集成一些其他的内容）</li><li>Spring MVC（web框架，提供接口访问，restful接口等能力）</li><li>mybatis（Java 操作数据库的框架，持久层框架，对 jdbc 的封装）</li><li>mybatis-plus（对 mybatis 的增强，不用写 sql 也能实现增删改查）</li><li>Spring-Boot（&#x3D;&#x3D;快速启动&#x3D;&#x3D; &#x2F; 快速集成项目。不用自己管理 spring 配置，不用自己整合各种框架）</li><li>mysql</li></ol><p>部署：服务器 &#x2F; 容器（平台）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol><li>初始化项目<ol><li>前端初始化<ol><li>初始化项目</li><li>引入组件库</li><li>框架介绍 &#x2F; 瘦身</li></ol></li><li>后端初始化<ol><li>准备环境（MySQL之类的）</li><li>引入框架（整合框架）</li></ol></li></ol></li><li>登录 &#x2F; 注册<ol><li>前端</li><li>后端</li></ol></li><li>用户管理（仅管理员可见）<ol><li>前端</li><li>后端</li></ol></li></ol><h2 id="第二次直播任务"><a href="#第二次直播任务" class="headerlink" title="第二次直播任务"></a>第二次直播任务</h2><ul><li>用户库表设计</li><li>完成登录注册的前后端开发</li><li>完成用户管理后台的前后端开发</li></ul><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>有哪些表（模型）？表中有哪些字段？ 字段类型？ 数据库字段添加索引？ 表与表之间的关联？</p><p>用户表：</p><ul><li><p>id（主键） varchar</p></li><li><p>userAccount 账号</p></li><li><p>userName 昵称 varchar</p></li><li><p>avatarUrl 头像 varchar</p></li><li><p>gender 性别 tinyint</p></li><li><p>password 密码 varchar</p></li><li><p>phone 电话 varchar</p></li><li><p>email 邮箱 varchar</p></li><li><p>isValid 是否有效 tinyint 0 1 (比如被封号)</p></li></ul><hr><ul><li>createTime 创建时间 datetime</li><li>updateTime 更新时间 datetime</li><li>isDelete 是否删除 tinyint</li></ul><h3 id="自动生成器的使用"><a href="#自动生成器的使用" class="headerlink" title="自动生成器的使用"></a>自动生成器的使用</h3><p>MyBatisX 插件，自动根据数据库生成domain 实体对象，mapper（操作数据库对象），mapper.xml (定义了mapper对象和数据库的关联，可以在里面自己写SQL)，service（包括常用的增删改查），serviceImpl（具体实现 service）</p><h3 id="注册逻辑"><a href="#注册逻辑" class="headerlink" title="注册逻辑"></a>注册逻辑</h3><ol><li>用户在前端输入账户和密码、以及校验码（todo）</li><li>校验用户的账户、密码、校验密码，是否符合要求<ol><li>账户不小于 4 位</li><li>密码不小于 6 位</li><li>账户不能重复</li><li>账户不包含特殊字符</li></ol></li><li>对密码进行加密（密码千万不要以明文存储到数据库中）</li><li>向数据库插入用户数据</li></ol><h2 id="第三次直播"><a href="#第三次直播" class="headerlink" title="第三次直播"></a>第三次直播</h2><h3 id="计划-1"><a href="#计划-1" class="headerlink" title="计划"></a>计划</h3><ol><li>开发完成后端登录功能 （单机登录）</li><li>开发后端用户的管理接口 （用户的查询 &#x2F; 状态的更改）</li><li>开发前端用户登录注册功能</li><li>讨论如何校验用户（VIP可以使用）</li></ol><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><p>接收参数：用户账户、密码</p><p>请求类型：POST</p><blockquote><p>请求参数很长时，不建议使用GET</p></blockquote><p>请求体：JSON 格式的数据</p><p>返回值：用户信息（&#x3D;&#x3D;脱敏&#x3D;&#x3D;）</p><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ol><li>校验用户的账户、密码、是否合法</li><li>非空</li><li>账户不小于 4 位</li><li>密码不小于 6 位</li><li>账户不包含特殊字符</li><li>校验密码是否输入正确，要和数据库中的密文密码去对比</li><li>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</li><li>我们要记录用户的登录态（session），将其存到服务器上（用后端 Springboot 框架封装的服务器 tomcat 去记录）</li><li>返回用户信息 （脱敏）</li></ol><h4 id="控制层-Controller-封装请求"><a href="#控制层-Controller-封装请求" class="headerlink" title="控制层 Controller 封装请求"></a>控制层 Controller 封装请求</h4><blockquote><p>@RestController 适用于编写 restful 风格的 api ， 返回值默认为 JSON 类型</p></blockquote><p>controller 层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</p><p>service 层是对业务逻辑的校验（有可能被 controller 之外的类调用）</p><h4 id="如何知道是哪个用户登录了？"><a href="#如何知道是哪个用户登录了？" class="headerlink" title="如何知道是哪个用户登录了？"></a>如何知道是哪个用户登录了？</h4><ol><li>连接服务器端后，得到一个session1 状态，返回给前端</li><li>登陆成功后，得到了登陆成功的session，并且给该session设置一些值（比如用户信息），返回给前端一个设置cookie的“命令”</li><li>前端接收到后端的命令后，设置cookie，保存到浏览器内</li><li>前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求</li><li>后端拿到前端传来的cookie，找到对应的session</li><li>后端从session中可以取出基于该session存储的变量（用户的登录信息，登录名等等）</li></ol><h3 id="用户管理接口"><a href="#用户管理接口" class="headerlink" title="用户管理接口"></a>用户管理接口</h3><ol><li>查询用户<ol><li>允许根据用户名查询</li></ol></li><li>删除用户</li></ol><h4 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h4><p>前端需要向后端发送请求</p><p>前端 ajax 来请求后端</p><p>axios 封装了 ajax</p><p>request 是 ant design 项目又封装了一次</p><p>追踪 request 源码：用到了 umi 的插件、 requestConfig  是一个配置</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>正向代理：替客户端发送请求</p><p>反向代理：替服务器接受请求</p><p>怎么做代理？</p><ul><li>Nginx 服务器</li><li>Node.js 服务器</li></ul><h2 id="前端不再开发"><a href="#前端不再开发" class="headerlink" title="前端不再开发"></a>前端不再开发</h2><p>此项目的教程时间有点久远了。所以很多东西都不一样了。我还是注重后端开发，所以前端的就不研究了。</p><h2 id="末-直播内容"><a href="#末-直播内容" class="headerlink" title="末 - 直播内容"></a>末 - 直播内容</h2><ol><li>开发用户注销前端 &#x2F; 后端</li><li>补充用户注册校验逻辑前端 &#x2F; 后端</li><li>后端代码优化</li><li>前端代码优化</li><li>项目部署上线<ol><li>web 服务器</li><li>容器部署</li><li>绑定域名</li></ol></li></ol><h3 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h3><ol><li><p>通用返回对象</p><p> 目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功的还是失败的</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abei&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//封装后</span></span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1111</span> <span class="comment">//自定义错误码，与自己的业务强相关</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abei&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">50001</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXX地方发生了异常&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自定义错误码</li><li>自定义返回信息</li></ul></li><li><p>封装全局异常处理</p><ol><li>定义业务异常类<ol><li>相对 java 的异常类，支持更多字段</li><li>自定义构造函数，更灵活 &#x2F; 快捷的设置字段</li></ol></li><li>编写全局异常处理器<ol><li>捕获代码中所有的异常，集中处理，让前端得到更详细的业务报错 &#x2F; 信息</li><li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li><li>集中处理，比如记录日志</li></ol></li></ol></li><li><p>全局请求日志和登录校验</p></li></ol><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><p>本地开发： localhost</p><p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上。</p><p>为什么需要？</p><ol><li>每个环境互不影响</li><li>区分不同的阶段： 开发 &#x2F; 测试 &#x2F; 生产</li><li>对项目进行优化：<ol><li>本地日志级别</li><li>精简依赖，节省项目体积</li><li>项目的环境 &#x2F; 参数可以调整，比如 JVM 参数、</li></ol></li></ol><p>针对不同环境做不同事情。</p><p>多环境分类：</p><ol><li>本地环境：（自己的电脑）localhost</li><li>开发环境：（远程开发）大家连同一台机器，为了大家开发方便</li><li>测试环境：（测试）开发 &#x2F; 测试 &#x2F; 产品，分为 性能测试 &#x2F; 功能测试 &#x2F; 系统集成测试，独立的数据库，独立的服务器</li><li>预发布环境：（体验服）和正式环境一致，正式数据库，更严谨，查出更多问题</li><li>正式环境（上线，公开对外访问的项目）：尽量不要改动，保证上线前代码是”完美“运行</li><li>沙箱环境（实验环境）：为了实验，测试新功能</li></ol><h3 id="后端多环境上线"><a href="#后端多环境上线" class="headerlink" title="后端多环境上线"></a>后端多环境上线</h3><p>SpringBoot项目，通过 application.yml 添加不同的后缀来区分配置文件</p><p>可以在启动项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\user-center-backend-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马赛克项目部署文档</title>
      <link href="/2024/05/08/%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/"/>
      <url>/2024/05/08/%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于 Flask 框架搭建</p></blockquote><h1 id="视频人脸马赛克——部署文档"><a href="#视频人脸马赛克——部署文档" class="headerlink" title="视频人脸马赛克——部署文档"></a>视频人脸马赛克——部署文档</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>Pyhton3.9.5</p><blockquote><p>安装</p><ul><li><p>安装gcc</p><p>  yum install gcc -y</p></li><li><p>安装Python依赖</p><p>  yum install zlib zlib-devel -y<br>  yum install bzip2 bzip2-devel  -y<br>  yum install ncurses ncurses-devel  -y<br>  yum install readline readline-devel  -y<br>  yum install openssl openssl-devel  -y<br>  yum install xz lzma xz-devel  -y<br>  yum install sqlite sqlite-devel  -y<br>  yum install gdbm gdbm-devel  -y<br>  yum install tk tk-devel  -y<br>  yum install mysql-devel -y<br>  yum install python-devel -y<br>  yum install libffi-devel -y</p></li><li><p>下载源码 Python3.9.5<br>  yum install wget -y<br>  wget <a href="https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz">https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz</a></p></li><li><p>解压 &amp; 编译 &amp; 安装</p><p>  tar -xvf Python-3.9.5.tgzcd Python-3.9.5<br>  .&#x2F;configure<br>  make all<br>  make install</p></li></ul></blockquote></li><li><p>虚拟环境（使用virtualenv）</p><ul><li><p>安装virtualenv</p><ul><li>pip3.9 install virtualenv</li></ul></li><li><p>创建虚拟环境</p><ul><li><p>mkdir envs<br>  virtualenv envs&#x2F;mosaic –python&#x3D;python3.9</p><p>  &#x3D;&#x3D;virtualenv envs&#x2F;eye_system_python –python&#x3D;$(pyenv which python3.6)&#x3D;&#x3D;</p></li></ul></li><li><p>激活虚拟环境</p><ul><li>source envs&#x2F;nb&#x2F;bin&#x2F;activate</li></ul></li><li><p>进入项目所在文件夹，安装 requirement.txt 中的相关依赖</p><ul><li>pip install -r requirement.txt</li></ul></li></ul></li></ul><blockquote><p>[!NOTE]</p><p>此项目需要使用&#x3D;&#x3D;ffmpeg&#x3D;&#x3D;</p></blockquote><h3 id="ffmpeg安装"><a href="#ffmpeg安装" class="headerlink" title="ffmpeg安装"></a>ffmpeg安装</h3><ul><li>安装yasm</li></ul><blockquote><p># wget <a href="http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz">http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz</a></p><p># tar -xvf yasm-1.3.0.tar.gz</p><p># cd yasm-1.3.0</p><p>编译安装yasm，安装ffmpeg必须要安装的</p><p># .&#x2F;configure &amp;&amp; make &amp;&amp; make install</p></blockquote><ul><li>安装x264</li></ul><blockquote><p>安装nasm</p><p># wget <a href="http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz">http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz</a> –no-check-certificate</p><p># tar xvJf nasm-2.13.03.tar.xz</p><p># cd nasm-2.13.03</p><p># .&#x2F;configure &amp;&amp; make &amp;&amp; make install</p><p>安装x264</p><p># yum -y install git</p><p># git clone <a href="https://code.videolan.org/videolan/x264.git">https://code.videolan.org/videolan/x264.git</a>　　　　#下载x264安装</p><p># cd x264</p><p># .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;x264 –enable-shared –enable-static</p><p># make &amp;&amp; make install</p><p>添加环境变量</p><p># vim &#x2F;etc&#x2F;profile</p><p>export PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib&#x2F;pkgconfig</p><p># source &#x2F;etc&#x2F;profile     激活</p></blockquote><ul><li>安装ffmpeg</li></ul><blockquote><p># wget <a href="http://ffmpeg.org/releases/ffmpeg-5.1.3.tar.gz">http://ffmpeg.org/releases/ffmpeg-5.1.3.tar.gz</a></p><p># tar -xvf ffmpeg-5.1.3.tar.gz</p><p># cd ffmpeg-5.1.3</p><p># .&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg5.1.3 –enable-gpl –enable-libx264 –extra-cflags&#x3D;”-I&#x2F;usr&#x2F;local&#x2F;x264&#x2F;include” –extra-ldflags&#x3D;”-L&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib”</p><p># make &amp;&amp; make install</p><p>&#x3D;&#x3D;添加环境变量&#x3D;&#x3D;</p><p># vim &#x2F;etc&#x2F;profile</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;ffmpeg&#x2F;bin</p><p># source &#x2F;etc&#x2F;profile     激活</p><p># vim &#x2F;etc&#x2F;ld.so.conf  #文件最后添加以下内容</p><p>&#x2F;usr&#x2F;local&#x2F;x264&#x2F;lib</p><p># ldconfig</p><p># &#x2F;usr&#x2F;local&#x2F;ffmpeg5.1.3&#x2F;bin&#x2F;ffmpeg -v　　　　#安装成功，查看环境变</p></blockquote><h3 id="运行及停止命令"><a href="#运行及停止命令" class="headerlink" title="运行及停止命令"></a>运行及停止命令</h3><p>使用nohup使得程序后台常驻（先进入项目文件夹）</p><ul><li>&#x3D;&#x3D;nohup python app.py &amp;&#x3D;&#x3D;</li></ul><p>停止命令，使用kill杀死进程</p><ul><li>&#x3D;&#x3D;ps aux | grep python app.py&#x3D;&#x3D; （查找进程）</li><li>&#x3D;&#x3D;kill PID&#x3D;&#x3D; (杀死进程)</li></ul><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ul><li>正常情况下命名为收到请求传递的名称，若在video中此名称已存在，则在此名称后加了五位随机字母为新名字。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上线 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署上线踩坑</title>
      <link href="/2024/05/08/%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/05/08/%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="部署上线踩坑"><a href="#部署上线踩坑" class="headerlink" title="部署上线踩坑"></a>部署上线踩坑</h1><h2 id="文件如何上传服务器"><a href="#文件如何上传服务器" class="headerlink" title="文件如何上传服务器"></a>文件如何上传服务器</h2><p>通过git工具传到gitee，然后通过clone到服务器上</p><p>修改代码在本地修改之后在提交到gitee上，在服务器上通过git pull 拉取</p><h2 id="如果项目中使用了ffprobe视频处理工具"><a href="#如果项目中使用了ffprobe视频处理工具" class="headerlink" title="如果项目中使用了ffprobe视频处理工具"></a>如果项目中使用了ffprobe视频处理工具</h2><p>需要将ffmpeg安装到服务器中，并且配置环境变量</p><p>见：<a href="https://blog.csdn.net/weixin_44692055/article/details/128848638">CentOS环境安装ffmpeg</a></p><h2 id="报错-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#报错-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="报错 libGL.so.1: cannot open shared object file: No such file or directory"></a>报错 libGL.so.1: cannot open shared object file: No such file or directory</h2><p>在虚拟环境中，卸载opencv-python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall opencv-python</span><br><span class="line">安装 opencv-python-headless</span><br><span class="line">pip install opencv-python-headless</span><br></pre></td></tr></table></figure><h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="yum源无法使用"><a href="#yum源无法使用" class="headerlink" title="yum源无法使用"></a>yum源无法使用</h2><p>参考文章：[<a href="https://www.cnblogs.com/Leehy0518/p/17317425.html">解决CentOS7的yum源无法正常使用</a>]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">报错信息如下</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">base                                                        | 3.6 kB  00:00:00     </span><br><span class="line">http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - &quot;Could not resolve host: mirrors.cloud.aliyuncs.com; Unknown error&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> One of the configured repositories failed (Extra Packages for Enterprise Linux 7 - x86_64),</span><br><span class="line"> and yum doesn&#x27;t have enough cached data to continue. At this point the only</span><br><span class="line"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="line"></span><br><span class="line">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="line"></span><br><span class="line">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="line">        upstream. This is most often useful if you are using a newer</span><br><span class="line">        distribution release than is supported by the repository (and the</span><br><span class="line">        packages for the previous distribution release still work).</span><br><span class="line"></span><br><span class="line">     3. Run the command with the repository temporarily disabled</span><br><span class="line">            yum --disablerepo=epel ...</span><br><span class="line"></span><br><span class="line">     4. Disable the repository permanently, so yum won&#x27;t use it by default. Yum</span><br><span class="line">        will then just ignore the repository until you permanently enable it</span><br><span class="line">        again or use --enablerepo for temporary usage:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --disable epel</span><br><span class="line">        or</span><br><span class="line">            subscription-manager repos --disable=epel</span><br><span class="line"></span><br><span class="line">     5. Configure the failing repository to be skipped, if it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">        compromise:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --save --setopt=epel.skip_if_unavailable=true</span><br><span class="line"></span><br><span class="line">failure: repodata/repomd.xml from epel: [Errno 256] No more mirrors to try.</span><br><span class="line">http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - &quot;Could not resolve host: mirrors.cloud.aliyuncs.com; Unknown error&quot;</span><br></pre></td></tr></table></figure><p>解决方法：修改vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 这个配置文件。此时我报错的原因是里面没有内容了</p><ul><li><p>添加基本内容</p></li><li><pre><code>  DEVICE=ens32  BOOTPROTO=dhcp  ONBOOT=yes  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再依次执行以下代码：</span><br><span class="line"></span><br><span class="line">```undefined</span><br><span class="line">重启网路</span><br><span class="line">systemctl restart NetworkManager.service</span><br><span class="line">清理yum缓存</span><br><span class="line">yum clean all</span><br><span class="line">更新缓存</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="部署成功后外网无法访问"><a href="#部署成功后外网无法访问" class="headerlink" title="部署成功后外网无法访问"></a>部署成功后外网无法访问</h2><blockquote><p>部署成功后只是</p></blockquote><h2 id="docker安装mysql无限重启"><a href="#docker安装mysql无限重启" class="headerlink" title="docker安装mysql无限重启"></a>docker安装mysql无限重启</h2><blockquote><p>缓冲池设置小一些。在my.cnf里面配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size=512M</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> 上线 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
